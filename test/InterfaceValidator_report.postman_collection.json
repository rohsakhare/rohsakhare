{
	"info": {
		"_postman_id": "d8cac4e4-70dc-4394-8b1f-4ebf29341449",
		"name": "InterfaceValidator_Report",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "UserInput Copy",
			"item": [
				{
					"name": "NetworkDiscovery",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"\\n\\n\\n==========================================================================================\");\r",
									"console.log(\"========================== Inteface Validator User Input +==========================\");\r",
									"console.log(\"==========================================================================================\");\r",
									"\r",
									"/****************************************************************************************\r",
									"* User input data\r",
									"****************************************************************************************/\r",
									"var SOURCE_OF_INPUT_PARAMETERS = \"network\";          // choose from \"manual\" or \"file\" or \"network\"\r",
									"\r",
									"try {\r",
									"    if (typeof data.USER_DATA != \"undefined\") {\r",
									"        var USER_DATA = data.USER_DATA[0];\r",
									"        SOURCE_OF_INPUT_PARAMETERS = USER_DATA.SOURCE_OF_INPUT_PARAMETERS;\r",
									"        if (SOURCE_OF_INPUT_PARAMETERS === \"network\") {\r",
									"            var IP_ADDRESS_OF_THE_CONTROLLER = USER_DATA.IP_ADDRESS_OF_THE_CONTROLLER;\r",
									"            var RESTCONF_PORT_AT_THE_CONTROLLER = USER_DATA.RESTCONF_PORT_AT_THE_CONTROLLER;\r",
									"            var AUTHORIZATION_CODE_AT_THE_CONTROLLER = USER_DATA.AUTHORIZATION_CODE_AT_THE_CONTROLLER;\r",
									"\r",
									"            var TEST_EXECUTION = USER_DATA.TEST_EXECUTION;\r",
									"            var MULTIPLICITY_OF_DEVICE_ITERATIONS = USER_DATA.MULTIPLICITY_OF_DEVICE_ITERATIONS;\r",
									"            var MANTIS_INTERFACE_STATUS = USER_DATA.MANTIS_INTERFACE_STATUS;\r",
									"            var LOAD_LTP_FROM_NETWORK = USER_DATA.LOAD_LTP_FROM_NETWORK;\r",
									"            var TEST_CONFIG_DATA = USER_DATA.TEST_CONFIG_DATA;\r",
									"\r",
									"            var NAME_OF_DEVICE_LIST_UNDER_TEST = USER_DATA.NAME_OF_DEVICE_LIST_UNDER_TEST;\r",
									"            var NAME_OF_INTERFACE_LIST_UNDER_TEST = USER_DATA.NAME_OF_INTERFACE_LIST_UNDER_TEST;\r",
									"            var AUTHORIZATION_CODE_AT_THE_MANTIS = USER_DATA.AUTHORIZATION_CODE_AT_THE_MANTIS;\r",
									"            var MULTIPLICITY_OF_INTERFACE_ITERATIONS = USER_DATA.MULTIPLICITY_OF_INTERFACE_ITERATIONS;\r",
									"            var NAME_OF_NOT_REQUIRED_DEVICE_FROM_TEST = USER_DATA.NAME_OF_NOT_REQUIRED_DEVICE_FROM_TEST;\r",
									"        }\r",
									"    } else if (SOURCE_OF_INPUT_PARAMETERS === \"network\") {\r",
									"\r",
									"        var IP_ADDRESS_OF_THE_CONTROLLER = \"172.29.145.220\";  // \"10.118.125.76\";\r",
									"        var RESTCONF_PORT_AT_THE_CONTROLLER = \"8181\";\r",
									"        var AUTHORIZATION_CODE_AT_THE_CONTROLLER = \"Basic c2VudGhpbHZlbC5zOlBSU2UwOA==\";; \r",
									"\r",
									"        var TEST_EXECUTION = \"parallel\";                // \"serial\" or \"parallel\"\r",
									"        var MULTIPLICITY_OF_DEVICE_ITERATIONS = \"all\";  // \"none\", \"one\" or \"all\" devices to be validated\r",
									"        var MANTIS_INTERFACE_STATUS = \"off\";            // choose from \"off\", \"read-only\" or \"read-write\"\r",
									"        var TEST_CONFIG_DATA = false;                   // choose true or false for config\r",
									"        var LOAD_LTP_FROM_NETWORK = \"complete\";  //\"none\" or \"partial\" or \"complete\"\r",
									"                                            // \"none\" do not fetch any LTPs, execute with existing LTPs \r",
									"                                            // \"partial\" fetch new LTPs for newly identified Nodes \r",
									"                                            // \"complete\" remove existing LTPs and fetch LTPs for all Nodes \r",
									"\r",
									"        /****************************************************************************************\r",
									"         * Network case input information\r",
									"         ****************************************************************************************/\r",
									"        var NAME_OF_DEVICE_LIST_UNDER_TEST = [\"513250004\"];  // Supports \"all\", or required devices list.\r",
									"                                                            // supports any connected devie,\r",
									"                                                            // it can be any NTS device or real device \r",
									"                                                            // \"siae_513250008\", \"siae_513250009\",\r",
									"                                                            // \"ericsson_513250001\", ericsson_513250002\",\r",
									"                                                            // \"zte_nr8120_14307\", \"zte_nr8120_14308\", \r",
									"                                                            // \"huawei_513250005\", \"huawei_513250006\"\r",
									"\r",
									"        var NAME_OF_INTERFACE_LIST_UNDER_TEST = [\"wire-interface\"];  // \"all\" , or required interfaces list\r",
									"                                // Supported interfaces are \"air-interface\", \"ethernet-container\", \"hybrid-mw-structure\",\r",
									"                                // \"pure-ethernet-structure\", \"wire-interface\", \"mac-interface\", \"tdm-container\",\r",
									"                                // \"ip-interface\", \"vlan-interface\"\r",
									"\r",
									"        var AUTHORIZATION_CODE_AT_THE_MANTIS = \"\";  //This parameter is common for given input Device list, \r",
									"                                                //This parameter needs to be implemented futher per each Device\r",
									"\r",
									"        var MULTIPLICITY_OF_INTERFACE_ITERATIONS = \"all\"  //\"one\" or \"all\" same type of interfaces to be fetched from Device\r",
									"        var NAME_OF_NOT_REQUIRED_DEVICE_FROM_TEST = [\"NTS\"];  // This is used to remove unwanted Devices from list of Devices \r",
									"    }\r",
									"\r",
									"    var PATH_TO_DB_AND_MOUNT_POINT = \"/rests/data/network-topology:network-topology/topology=topology-netconf\";\r",
									"\r",
									"    //DUMMY_URI = \"ping.openBackhaul.com\";\r",
									"    var DUMMY_URI = \"http://\"+IP_ADDRESS_OF_THE_CONTROLLER+\":8181/rests/data/network-topology:network-topology/topology=topology-netconf?content=config&fields=node(node-id;netconf-node-topology:connection-status)\";\r",
									"\r",
									"    if (SOURCE_OF_INPUT_PARAMETERS != \"network\") {\r",
									"        postman.setNextRequest(\"UserInput\");\r",
									"    }\r",
									"\r",
									"} catch (error) { \r",
									"    console.log(\"Exception: in Reading User input data\");\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									" * Prepare URI and reset var Device Information for Network\r",
									" ****************************************************************************************/\r",
									"try {\r",
									"    var controller = pm.environment.get(\"controller\");\r",
									"    if ((SOURCE_OF_INPUT_PARAMETERS === \"network\") && \r",
									"        ((LOAD_LTP_FROM_NETWORK === \"complete\") || (typeof controller === \"undefined\") || \r",
									"         (controller === \"\") || ( controller === null) )) \r",
									"    {\r",
									"        //Clear environment variables\r",
									"        pm.environment.clear();\r",
									"\r",
									"        class Controller {\r",
									"            constructor(newControllerAddress,\r",
									"                newAuthorizationCode,\r",
									"                newPathToDbAndMountPoint) {\r",
									"                this.controllerAddress = newControllerAddress;\r",
									"                this.authorizationCode = newAuthorizationCode;\r",
									"                this.pathToDbAndMountPoint = newPathToDbAndMountPoint;\r",
									"                this.nodeList = [];\r",
									"            }\r",
									"        }\r",
									"        try {\r",
									"                controller = new Controller(IP_ADDRESS_OF_THE_CONTROLLER + \":\" + RESTCONF_PORT_AT_THE_CONTROLLER,\r",
									"                AUTHORIZATION_CODE_AT_THE_CONTROLLER,\r",
									"                PATH_TO_DB_AND_MOUNT_POINT\r",
									"            );\r",
									"        } catch (error) {\r",
									"            console.log(\"Exception: in Controller constructor\");\r",
									"            //IsControllerUnderTestDefined();\r",
									"        }\r",
									"\r",
									"        pm.environment.set(\"controller\", controller);\r",
									"    } else if (LOAD_LTP_FROM_NETWORK === \"none\") {\r",
									"        postman.setNextRequest(\"End Of UserInput\");\r",
									"    }\r",
									"\r",
									"    VALIDATION_ERROR_RESULTS = [];\r",
									"    VALIDATION_REPORT = [];\r",
									"    INITIAL_INDEX_OF_DEVICE_UNDER_TEST = 0;\r",
									"    RESPONSE_CODE_FOR_CONFIGURATION_ERROR = 500;\r",
									"\r",
									"    ERROR_MESSAGE_FOR_NOT_SUPPORTED = \"#[onf:Attribute/feature not supported by the hardware.]#\";\r",
									"    ERROR_MESSAGE_FOR_OUT_OF_RANGE = \"#[onf:Configuration value out of range of hardware capabilities.]#\";\r",
									"    ERROR_MESSAGE_FOR_AGAINST_EXISTING = \"#[onf:Wished change contradicts existing configuration.]#\";\r",
									"    ERROR_MESSAGE_FOR_INCONSISTENT = \"#[onf:Wished changes are not consistent.]#\";\r",
									"\r",
									"    pm.environment.set(\"validationReport\", VALIDATION_REPORT);\r",
									"    pm.environment.set(\"validationErrorResults\", VALIDATION_ERROR_RESULTS);\r",
									"\r",
									"    pm.environment.set(\"mantisInterfaceStatus\", MANTIS_INTERFACE_STATUS);\r",
									"    pm.environment.set(\"dummyUri\", DUMMY_URI);\r",
									"\r",
									"    pm.environment.set(\"responseCodeForConfigurationError\", RESPONSE_CODE_FOR_CONFIGURATION_ERROR);\r",
									"    pm.environment.set(\"errorMessageForNotSupported\", ERROR_MESSAGE_FOR_NOT_SUPPORTED);\r",
									"    pm.environment.set(\"errorMessageForOutOfRange\", ERROR_MESSAGE_FOR_OUT_OF_RANGE);\r",
									"    pm.environment.set(\"errorMessageForAgainstExisting\", ERROR_MESSAGE_FOR_AGAINST_EXISTING);\r",
									"    pm.environment.set(\"errorMessageForInconsistent\", ERROR_MESSAGE_FOR_INCONSISTENT);\r",
									"\r",
									"    pm.environment.set(\"TEST_EXECUTION\", TEST_EXECUTION);\r",
									"    pm.environment.set(\"LOAD_LTP_FROM_NETWORK\", LOAD_LTP_FROM_NETWORK);\r",
									"    pm.environment.set(\"TEST_CONFIG_DATA\", TEST_CONFIG_DATA);\r",
									"\r",
									"    pm.environment.set(\"deviceListUnderTest\", NAME_OF_DEVICE_LIST_UNDER_TEST);\r",
									"    pm.environment.set(\"indexOfDeviceUnderTest\", INITIAL_INDEX_OF_DEVICE_UNDER_TEST);\r",
									"    pm.environment.set(\"multiplicityOfDeviceIterations\", MULTIPLICITY_OF_DEVICE_ITERATIONS);\r",
									"\r",
									"    pm.environment.set(\"interfaceListUnderTest\", NAME_OF_INTERFACE_LIST_UNDER_TEST);\r",
									"    pm.environment.set(\"multiplicityOfinterfaceIterations\", MULTIPLICITY_OF_INTERFACE_ITERATIONS);\r",
									"    pm.environment.set(\"NAME_OF_NOT_REQUIRED_DEVICE_FROM_TEST\", NAME_OF_NOT_REQUIRED_DEVICE_FROM_TEST);\r",
									"\r",
									"    //AreAllEnvironmentVariablesSet();\r",
									"} catch (error) { \r",
									"    console.log(\"Exception: in creating Controller reference\");\r",
									"}\r",
									"\r",
									"/****************************************************************************************\r",
									" * Provided Collection Variables \r",
									" ****************************************************************************************/\r",
									"try {\r",
									"    pm.collectionVariables.clear();\r",
									"    pm.collectionVariables.set(\"sourceOfInputParameters\", SOURCE_OF_INPUT_PARAMETERS);\r",
									"    //AreSourceOfInputParametersCollectionVariablessSet();\r",
									"} catch (error) { \r",
									"    console.log(\"Exception: in setting Collection Variable\");\r",
									"}\r",
									"/****************************************************************************************\r",
									" * Setting up Local Variables and Preparing the Request\r",
									" ****************************************************************************************/\r",
									"pm.variables.clear();\r",
									"if( (typeof controller === \"undefined\") || ( controller === \"\") || ( controller === null) )\r",
									"{\r",
									"    console.log(\"Error: Controller: \"+controller);\r",
									"}\r",
									"\r",
									"try {\r",
									"    if ((SOURCE_OF_INPUT_PARAMETERS === \"network\") &&\r",
									"        ((LOAD_LTP_FROM_NETWORK === \"complete\") || (LOAD_LTP_FROM_NETWORK === \"partial\") || \r",
									"        ( controller.nodeList.length === 0))) {\r",
									"\r",
									"        EXTENSION = \"content=nonconfig\";\r",
									"        FILTER = \"fields=node(node-id;netconf-node-topology:connection-status;netconf-node-topology:host;netconf-node-topology:port)\";\r",
									"\r",
									"        var controllConstructLink = \"http://\" + IP_ADDRESS_OF_THE_CONTROLLER + \":\" +\r",
									"                                    RESTCONF_PORT_AT_THE_CONTROLLER + PATH_TO_DB_AND_MOUNT_POINT;\r",
									"\r",
									"        var uri = controllConstructLink + \"?\" + EXTENSION + \"&\" + FILTER;\r",
									"        //CouldTheInputBeLoadedForNetwork(controllConstructLink, uri);\r",
									"        pm.collectionVariables.set(\"controllConstructLink\", controllConstructLink);\r",
									"        pm.variables.set(\"uri\", uri);\r",
									"    }\r",
									"    else {\r",
									"        var dummyUri = pm.environment.get(\"dummyUri\");\r",
									"        pm.variables.set(\"uri\", dummyUri);\r",
									"    }\r",
									"    pm.request.headers.upsert({ key: \"Authorization\", value: AUTHORIZATION_CODE_AT_THE_CONTROLLER });\r",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
									"} catch (error) {\r",
									"     console.log(\"Exception: in Preparing URL for request\");\r",
									" }\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									" * Self Testing Functions\r",
									" ****************************************************************************************/\r",
									"function AreMainInputParametersCorrect(sourceOfInputParameters,\r",
									"    multiplicityOfDeviceIterations,\r",
									"    mantisInterfaceStatus) {\r",
									"    pm.test(\"IsValueOfSourceOfInputParametersCorrect\", function () {\r",
									"        pm.expect(sourceOfInputParameters).to.be.oneOf([\"manual\", \"file\", \"network\"]);\r",
									"    });\r",
									"    pm.test(\"IsValueOfMultiplicityOfDeviceIterationsCorrect\", function () {\r",
									"        pm.expect(multiplicityOfDeviceIterations).to.be.oneOf([\"none\", \"one\", \"all\"]);\r",
									"    });\r",
									"    pm.test(\"IsValueOfMantisInterfaceStatusCorrect\", function () {\r",
									"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);\r",
									"    });\r",
									"}\r",
									"\r",
									"function CouldTheInputBeLoadedForNetwork(controllConstructLink, uri) {\r",
									"    pm.test(\"CouldTheInputBeLoadedForNetwork\", function () {\r",
									"        pm.expect(controllConstructLink).to.be.a(\"string\");\r",
									"        pm.expect(controllConstructLink).to.not.have.lengthOf(0);\r",
									"        pm.expect(uri).to.be.a(\"string\");\r",
									"        pm.expect(uri).to.not.have.lengthOf(0);\r",
									"    });\r",
									"}\r",
									"\r",
									"function IsControllerUnderTestDefined(controllerUnderTest) {\r",
									"    pm.test(\"IsControllerUnderTestDefined\", function () {\r",
									"        pm.expect(controllerUnderTest).to.be.an.instanceof(Controller);\r",
									"        pm.expect(controllerUnderTest.controllerAddress).to.be.a(\"string\");\r",
									"        pm.expect(controllerUnderTest.controllerAddress).to.not.have.lengthOf(0);\r",
									"        pm.expect(controllerUnderTest.authorizationCode).to.be.a(\"string\");\r",
									"        pm.expect(controllerUnderTest.authorizationCode).to.not.have.lengthOf(0);\r",
									"        pm.expect(controllerUnderTest.pathToDbAndMountPoint).to.be.a(\"string\");\r",
									"        pm.expect(controllerUnderTest.pathToDbAndMountPoint).to.not.have.lengthOf(0);\r",
									"    });\r",
									"}\r",
									"\r",
									"function AreAllEnvironmentVariablesSet() {\r",
									"    pm.test(\"AreAllEnvironmentVariablesSet\", function () {\r",
									"        pm.expect(pm.environment.get(\"multiplicityOfDeviceIterations\")).to.be.oneOf([\"none\", \"one\", \"all\"]);\r",
									"        pm.expect(pm.environment.get(\"controller\")).to.be.an.instanceof(Controller);\r",
									"        \r",
									"        pm.expect(pm.environment.get(\"mantisInterfaceStatus\")).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);\r",
									"        pm.expect(pm.environment.get(\"dummyUri\")).to.be.a(\"string\");\r",
									"        pm.expect(pm.environment.get(\"dummyUri\")).to.not.have.lengthOf(0);\r",
									"        pm.expect(pm.environment.get(\"validationErrorResults\")).to.be.an(\"array\");\r",
									"    });\r",
									"}\r",
									"\r",
									"function AreSourceOfInputParametersCollectionVariablessSet() {\r",
									"    pm.test(\"AreSourceOfInputParametersCollectionVariablessSet\", function () {\r",
									"        pm.expect(pm.collectionVariables.get(\"sourceOfInputParameters\")).to.be.oneOf([\"manual\", \"file\", \"network\"]);\r",
									"    });\r",
									"}\r",
									"\r",
									"function CouldTheRequestBePrepared() {\r",
									"    pm.test(\"CouldTheRequestBePrepared\", function () {\r",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var controller = pm.environment.get(\"controller\");\r",
									"if( (typeof controller === \"undefined\") || ( controller === \"\") || ( controller === null) ) {\r",
									"    console.log(\"Error: Controller: \"+controller);\r",
									"}\r",
									"\r",
									"var sourceOfInputParameters = pm.collectionVariables.get(\"sourceOfInputParameters\");\r",
									"var LOAD_LTP_FROM_NETWORK = pm.environment.get(\"LOAD_LTP_FROM_NETWORK\");\r",
									"var nameOfNotRequiredDevicesFromTest = pm.environment.get(\"NAME_OF_NOT_REQUIRED_DEVICE_FROM_TEST\"); \r",
									"\r",
									"if ((sourceOfInputParameters === \"network\") && \r",
									"    ( (LOAD_LTP_FROM_NETWORK === \"complete\") || (LOAD_LTP_FROM_NETWORK === \"partial\") || \r",
									"      (controller.nodeList.length === 0))) {\r",
									"    try {\r",
									"        //input paramters\r",
									"        var deviceListUnderTest = pm.environment.get(\"deviceListUnderTest\");\r",
									"        //CouldTheDeviceListUnderTestInputBeValid(deviceListUnderTest);\r",
									"\r",
									"        /****************************************************************************************\r",
									"        * Definition of input Parameters\r",
									"        ****************************************************************************************/\r",
									"        var nodeList = [];\r",
									"        var faultyNodeList = [];\r",
									"        pm.environment.set(\"TotalNumberOfNodes\", 0);\r",
									"        pm.environment.set(\"NumberOfConnectedNodes\", nodeList.length);\r",
									"        pm.environment.set(\"ConnectedNodes\", nodeList);\r",
									"        pm.environment.set(\"NumberOfFaultyNodes\", faultyNodeList.length);\r",
									"        pm.environment.set(\"FaultyNodes\", faultyNodeList);\r",
									"\r",
									"        var FailedLTPNodes = [];\r",
									"        var NewIdentifiedNodeList = [];       \r",
									"        pm.environment.set(\"NumberOfFailedLTPNodes\",FailedLTPNodes.length);\r",
									"        pm.environment.set(\"FailedLTPNodes\",FailedLTPNodes);\r",
									"        pm.environment.set(\"NewIdentifiedNodeList\",NewIdentifiedNodeList);\r",
									"        pm.environment.set(\"NumberOfNewIdentifiedNodes\",NewIdentifiedNodeList.length);\r",
									"        \r",
									"        var  SelectedFaultyNodeList = [];\r",
									"        pm.environment.set(\"SelectedFaultyNodeList\",SelectedFaultyNodeList);\r",
									"\r",
									"        var responseCode = pm.response.code;\r",
									"        //CouldTheResponseBeProcessed(responseCode);\r",
									"    } catch (error) {\r",
									"        console.log(\"Exception: While Reading and setting input\");\r",
									"        CouldTheResponseBeProcessed();\r",
									"    }\r",
									"\r",
									"    /****************************************************************************************\r",
									"    * Extract response and fetch node details\r",
									"    ****************************************************************************************/\r",
									"    try {\r",
									"        if (Math.floor(responseCode / 100) === 2) {\r",
									"            var response = pm.response.json();\r",
									"            var topology = response[\"network-topology:topology\"][0];\r",
									"\r",
									"            console.log(\"Totoal available nodes: \"+topology.node.length);\r",
									"            pm.environment.set(\"TotalNumberOfNodes\", topology.node.length);\r",
									"\r",
									"            for (let i = 0; i < topology.node.length; i++) {\r",
									"                let node = topology.node[i];\r",
									"                var nodeId = node[\"node-id\"];\r",
									"                let nodeStatus = node[\"netconf-node-topology:connection-status\"];\r",
									"\r",
									"                if (nodeStatus === \"connected\") {\r",
									"                    if (deviceListUnderTest[0] === \"all\") {\r",
									"                        if (nameOfNotRequiredDevicesFromTest.length > 0) {\r",
									"                            if( ChecknotRequiredDevicesList(nameOfNotRequiredDevicesFromTest, nodeId) ) {\r",
									"                                continue;\r",
									"                            } else {\r",
									"                                nodeList.push(nodeId);\r",
									"                            }\r",
									"                        }\r",
									"                        else {\r",
									"                            nodeList.push(nodeId);\r",
									"                        }\r",
									"                    }\r",
									"                    else {\r",
									"                        for (let j = 0; j < deviceListUnderTest.length; j++) {  //Input device loop\r",
									"                            if (nodeId.includes(deviceListUnderTest[j])) {\r",
									"                                nodeList.push(nodeId);\r",
									"                                break;\r",
									"                            }\r",
									"                        }\r",
									"                    }\r",
									"                } else {\r",
									"                    for (let j = 0; j < deviceListUnderTest.length; j++) {\r",
									"                        if (nodeId.includes(deviceListUnderTest[j])) {\r",
									"                            console.log(\"ERROR: Device \" + nodeId + \" is not connected\");\r",
									"                            SelectedFaultyNodeList.push(nodeId);\r",
									"                            break;\r",
									"                        }\r",
									"                    }\r",
									"                    faultyNodeList.push(nodeId);\r",
									"                }\r",
									"            }\r",
									"        } else {\r",
									"            console.log(\" ERROR: could not be retrieved device data. Response Code: \" + response.code);\r",
									"        }\r",
									"        \r",
									"        if(deviceListUnderTest[0] === \"all\") {\r",
									"            console.log(\"TotalNumberOfNodes: \"+topology.node.length);\r",
									"            pm.environment.set(\"TotalNumberOfNodes\", topology.node.length);\r",
									"        } else {\r",
									"            console.log(\"TotalNumberOfNodes: \"+ (nodeList.length + SelectedFaultyNodeList.length));\r",
									"            pm.environment.set(\"TotalNumberOfNodes\", (nodeList.length + SelectedFaultyNodeList.length));\r",
									"            faultyNodeList = SelectedFaultyNodeList;\r",
									"        }\r",
									"\r",
									"        console.log(\"Connected Nodes Length: \"+nodeList.length);\r",
									"        console.log(\"Connected Nodes: \"+nodeList)\r",
									"        pm.environment.set(\"NumberOfConnectedNodes\", nodeList.length);\r",
									"        pm.environment.set(\"ConnectedNodes\", nodeList);\r",
									"\r",
									"        console.log(\"Faulty Nodes Length: \"+faultyNodeList.length);\r",
									"        console.log(\"Faulty Nodes: \"+faultyNodeList) \r",
									"        pm.environment.set(\"NumberOfFaultyNodes\", faultyNodeList.length);\r",
									"        pm.environment.set(\"FaultyNodes\", faultyNodeList);        \r",
									"\r",
									"        //CouldTheNodeBeProcessed(nodeList, faultyNodeList);\r",
									"    } catch (error) {\r",
									"        console.log(\"Exception: While extracting Nodes information\");\r",
									"        CouldTheNodeBeProcessed();\r",
									"    }\r",
									"\r",
									"    /****************************************************************************************\r",
									"    * Set Output variables\r",
									"    ****************************************************************************************/\r",
									"    try {\r",
									"        var TEST_EXECUTION = pm.environment.get(\"TEST_EXECUTION\");\r",
									"        if( TEST_EXECUTION === \"serial\") {\r",
									"            postman.setNextRequest(\"SerialRetrievalOfLTPs\");\r",
									"        }\r",
									"\r",
									"        if ( (LOAD_LTP_FROM_NETWORK === \"complete\") || (controller.nodeList.length === 0) ) {\r",
									"            console.log(\"Device List: \");\r",
									"            console.log(nodeList);\r",
									"            pm.collectionVariables.set(\"nodeList\", nodeList);\r",
									"        } else if (LOAD_LTP_FROM_NETWORK === \"partial\") {\r",
									"            NewIdentifiedNodeList = compareNodeList(nodeList, controller.nodeList);\r",
									"            pm.environment.set(\"NumberOfNewIdentifiedNodes\", NewIdentifiedNodeList.length);\r",
									"            pm.environment.set(\"NewIdentifiedNodeList\", NewIdentifiedNodeList);\r",
									"            pm.collectionVariables.set(\"nodeList\", NewIdentifiedNodeList);\r",
									"            if ( (typeof NewIdentifiedNodeList === \"undefined\") || \r",
									"                 (NewIdentifiedNodeList === \"\") || (NewIdentifiedNodeList.length === 0) ) {\r",
									"                console.log(\"-----No new Nodes found in network discovery-----\");\r",
									"                postman.setNextRequest(\"End Of UserInput\");\r",
									"            } else {\r",
									"                console.log(\"New Identified Nodes length: \"+NewIdentifiedNodeList.length);\r",
									"                console.log(NewIdentifiedNodeList);\r",
									"            }\r",
									"        }\r",
									"        var nodeIndex = 0;\r",
									"        pm.collectionVariables.set(\"nodeIndex\", nodeIndex);\r",
									"\r",
									"        if( TEST_EXECUTION === \"serial\") {\r",
									"            console.log(\"========================== Fetch LTPs data - SERIAL ==========================\");\r",
									"        }\r",
									"    } catch (error) { \r",
									"        console.log(\"Exception: While cheking new Nodes discovery\");\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									" * Functions\r",
									" ****************************************************************************************/\r",
									"function compareNodeList (nodeList, nodeListController) {\r",
									"    try {\r",
									"        var newNodeList = [];\r",
									"        for (let aIndex = 0; aIndex < nodeList.length; aIndex++) {\r",
									"            let connectionFound = \"NOT_FOUND\";\r",
									"            for (let bIndex = 0; bIndex < nodeListController.length; bIndex++) {\r",
									"                if(nodeList[aIndex] === nodeListController[bIndex].nodeId) {\r",
									"                    connectionFound = \"FOUND\";\r",
									"                    break;\r",
									"                }\r",
									"            }\r",
									"            if (connectionFound === \"NOT_FOUND\") {\r",
									"                newNodeList.push(nodeList[aIndex]);\r",
									"                console.log(\"New Node found, Node ID : \"+nodeList[aIndex]);\r",
									"            }\r",
									"        }\r",
									"\r",
									"        //Remove Nodes which is not present in given Device list\r",
									"        var tempnodeList = nodeListController.length;\r",
									"        for (let k = 0; k < tempnodeList; k++) {\r",
									"            for (let i = 0; i < nodeListController.length; i++) {\r",
									"                let connectionFound = \"NOT_FOUND\";\r",
									"                for (let j = 0; j < nodeList.length; j++) {                \r",
									"                    if(nodeListController[i].nodeId === nodeList[j]) {\r",
									"                        connectionFound = \"FOUND\";\r",
									"                        break;\r",
									"                    }\r",
									"                }\r",
									"                if (connectionFound === \"NOT_FOUND\") {\r",
									"                    console.log(\"Removed Node ID : \"+nodeListController[i].nodeId);\r",
									"                    nodeListController.splice(i, 1);\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"\r",
									"        controller.nodeList = nodeListController;\r",
									"        pm.environment.set(\"controller\", controller);\r",
									"        return newNodeList;\r",
									"    } catch (error) { \r",
									"        console.log(\"Exception: in compareNodeList()\");\r",
									"    }\r",
									"}\r",
									"\r",
									"function ChecknotRequiredDevicesList(notRequiredDevices, nodeId)\r",
									"{\r",
									"    try {\r",
									"        var connectionFound = false;\r",
									"        //Remove Node which is not present in current Device list\r",
									"        for (let i = 0; i < notRequiredDevices.length; i++) {\r",
									"            if(nodeId.includes(notRequiredDevices[i]) ||\r",
									"                nodeId.includes(\"NTS\") || nodeId.includes(\"nts\") ) {\r",
									"                connectionFound = true;\r",
									"                //console.log(nodeId + \" found \"+connectionFound);\r",
									"                break;\r",
									"            }\r",
									"        }\r",
									"        return connectionFound;\r",
									"    } catch (error) { \r",
									"        console.log(\"Exception: in ChecknotRequiredDevicesList()\");\r",
									"    }\r",
									"}\r",
									"\r",
									"/****************************************************************************************\r",
									" * Self Testing Functions\r",
									" ****************************************************************************************/\r",
									"function CouldTheDeviceListUnderTestInputBeValid(deviceListUnderTest) {\r",
									"    pm.test(\"CouldTheDeviceListUnderTestInputBeValid\", function () {\r",
									"        pm.expect(deviceListUnderTest).to.be.an(\"array\");\r",
									"    });\r",
									"}\r",
									"\r",
									"function CouldTheResponseBeProcessed(responseCode) {\r",
									"    pm.test(\"CouldTheResponseBeProcessed\", function () {\r",
									"        pm.expect(responseCode).to.equal(200);\r",
									"    });\r",
									"}\r",
									"\r",
									"function CouldTheNodeBeProcessed(nodeList, faultyNodeList) {\r",
									"    pm.test(\"CouldTheNodeBeProcessed\", function () {\r",
									"        pm.expect(nodeList).to.be.an(\"array\");\r",
									"        pm.expect(faultyNodeList).to.be.an(\"array\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "PRSe08",
									"type": "string"
								},
								{
									"key": "username",
									"value": "senthilvel.s",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ParallelRetrievalOfLTPs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/****************************************************************************************\r",
									"* \r",
									"* FetchFromNetwork\r",
									"* \r",
									"* Used to fetch the Interface Ltp uuid and local-id from network \r",
									"* \r",
									"****************************************************************************************/\r",
									"console.log(\"========================== Fetch LTPs data - Parallel +==========================\");\r",
									"\r",
									"/****************************************************************************************\r",
									"* Required Input Parameters\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    var controller = pm.environment.get(\"controller\");\r",
									"    var sourceOfInputParameters = pm.collectionVariables.get(\"sourceOfInputParameters\");\r",
									"    //IsValueOfInputParametersCorrect(controller, sourceOfInputParameters);\r",
									"\r",
									"    if (sourceOfInputParameters === \"network\") {\r",
									"        var EXTENSION = \"/yang-ext:mount/core-model-1-4:control-construct?content=config&fields=logical-termination-point(uuid;layer-protocol(local-id;layer-protocol-name))\";\r",
									"        var controllConstructLink = pm.collectionVariables.get(\"controllConstructLink\");\r",
									"        var nodeList = pm.collectionVariables.get(\"nodeList\");\r",
									"        //CouldRequiredInputBeRead(controllConstructLink, nodeList);\r",
									"\r",
									"        for(let nodeIndex = 0; nodeIndex < nodeList.length;  nodeIndex++)\r",
									"        {\r",
									"            var nodeId = nodeList[nodeIndex];\r",
									"            console.log(\"\\n--------------Fetching LTPs for \"+nodeId+ \" Index is \"+nodeIndex+\" out of \"+ (nodeList.length-1) +\"--------------\");\r",
									"            var uri = controllConstructLink + \"/node=\" + nodeId + EXTENSION;\r",
									"  \r",
									"            const PREPARE_GET_REQUEST = {\r",
									"                url: uri,\r",
									"                method: 'GET',\r",
									"                header: {\r",
									"                        'Authorization': controller.authorizationCode,\r",
									"                        'Accept': \"application/json\",\r",
									"                        'Content-Type': \"application/json\"\r",
									"                },\r",
									"                data: { 'Node': nodeId }\r",
									"            }\r",
									"\r",
									"            pm.sendRequest(PREPARE_GET_REQUEST, function (error, res) {\r",
									"                nodeId = PREPARE_GET_REQUEST.data.Node;\r",
									"                IsTheLTPResponseCodeValid(res.code, nodeId);             \r",
									"                if(res.code === 200) {\r",
									"                    var response = res.json();\r",
									"                    PrepareControllerData(response, nodeId);\r",
									"                }\r",
									"                else if(res.code !== 200) {\r",
									"                    console.log(\"ERROR: LTP retrival failed for Device: \" +nodeId+ \", Response Code: \" + res.code);\r",
									"                    var FailedLTPNodes = pm.environment.get(\"FailedLTPNodes\");\r",
									"                    FailedLTPNodes.push(nodeId);\r",
									"                    pm.environment.set(\"FailedLTPNodes\", FailedLTPNodes)\r",
									"                }\r",
									"            });\r",
									"        }\r",
									"    }\r",
									"    postman.setNextRequest(\"End Of UserInput\");\r",
									"} catch (error) {\r",
									"    console.log(\"Exception: Parallel LTP Execution\");\r",
									"    //CouldRequiredInputBeRead();\r",
									"}\r",
									"\r",
									"var dummyUri = pm.environment.get(\"dummyUri\");\r",
									"pm.variables.set(\"uri\", dummyUri);\r",
									"pm.request.headers.upsert({ key: \"Authorization\", value: controller.authorizationCode });\r",
									"pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
									"pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
									"\r",
									"\r",
									"//Preparing controller data from the response\r",
									"function PrepareControllerData(response, nodeId) {\r",
									"    try {\r",
									"        var controller = pm.environment.get(\"controller\");\r",
									"        var multiplicityOfinterfaceIterations = pm.environment.get(\"multiplicityOfinterfaceIterations\");\r",
									"        var interfaceListUnderTest = pm.environment.get(\"interfaceListUnderTest\");\r",
									"        \r",
									"        console.log(\"LTP retrieval of Device: \"+nodeId+\" is Successfull\");\r",
									"\r",
									"        if (response) {\r",
									"            var ltpList = response[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
									"            var nodeObject = {\r",
									"                            nodeId: nodeId,\r",
									"                            airInterfaceList: [],\r",
									"                            ethernetContainerList: [],\r",
									"                            hybridMwStructureList: [],\r",
									"                            ipInterfaceList: [],\r",
									"                            macInterfaceList:[],\r",
									"                            pureEthernetStructureList: [],\r",
									"                            tdmContainerList: [],\r",
									"                            vlanInterfaceList: [],\r",
									"                            wireInterfaceList: []\r",
									"                        };\r",
									"\r",
									"            for (let i = 0; i < ltpList.length; i++) {\r",
									"                var ltpId = ltpList[i].uuid;\r",
									"                var layerProtocol = ltpList[i][\"layer-protocol\"][0];\r",
									"                var lpId = layerProtocol[\"local-id\"];\r",
									"                var ltpName = layerProtocol[\"layer-protocol-name\"];\r",
									"                if (ltpName) {\r",
									"                    var interfaceName = GetInterfaceNane(interfaceListUnderTest, ltpName);\r",
									"                    if (interfaceName) \r",
									"                    {\r",
									"                        var interfaceObject = {\r",
									"                            ltpUuid: ltpId,\r",
									"                            lpLid: lpId,\r",
									"                            ltpName:interfaceName\r",
									"                        };\r",
									"\r",
									"                        //IsInterfaceObjectDefined(interfaceObject);\r",
									"                        \r",
									"                        nodeObject = PrepareNodeData(interfaceName, interfaceObject, nodeObject, multiplicityOfinterfaceIterations);\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"            controller = SetControllerData(nodeObject, controller);\r",
									"            //console.log(controller);\r",
									"\r",
									"            //Set the output into controller data\r",
									"            pm.environment.set(\"controller\", controller);\r",
									"            //CouldTheControllerDataProccessed(ltpList, controller);\r",
									"        }\r",
									"        \r",
									"    } catch (error) {\r",
									"        console.log(\"Exception: in PrepareControllerData()\");\r",
									"        //CouldTheControllerDataProccessed();\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"//---------------------------------\r",
									"/****************************************************************************************\r",
									" * Functions\r",
									" ****************************************************************************************/\r",
									"function GetInterfaceNane(interfaceListUnderTest, ltpName) {\r",
									"    try {\r",
									"        var interfaceName = \"\";\r",
									"        if (interfaceListUnderTest[0] === \"all\") {\r",
									"            if (ltpName) {\r",
									"                interfaceName = TechnologyOf(ltpName);\r",
									"            }\r",
									"        } else {\r",
									"            for (let j = 0; j < interfaceListUnderTest.length; j++) {\r",
									"                if (ltpName) {\r",
									"                    var mappedName = TechnologyOf(ltpName);\r",
									"                    if (mappedName === interfaceListUnderTest[j]) {\r",
									"                        interfaceName = mappedName;\r",
									"                        break;\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (error) { \r",
									"        console.log(\"Exception: in GetInterfaceNane()\");\r",
									"    }\r",
									"    return interfaceName;\r",
									"}\r",
									"\r",
									"function PrepareNodeData(interfaceName, interfaceObject, nodeObject, multiplicityOfinterfaceIterations) {\r",
									"    try {\r",
									"        switch (interfaceName) {\r",
									"            case \"air-interface\":\r",
									"                if (multiplicityOfinterfaceIterations === \"one\") {\r",
									"                    if (nodeObject.airInterfaceList.length === 0) {\r",
									"                        nodeObject.airInterfaceList.push(interfaceObject);\r",
									"                    }\r",
									"                } else {\r",
									"                    nodeObject.airInterfaceList.push(interfaceObject);\r",
									"                }\r",
									"                break;\r",
									"            case \"ethernet-container\":\r",
									"                if (multiplicityOfinterfaceIterations === \"one\") {\r",
									"                    if (nodeObject.ethernetContainerList.length === 0) {\r",
									"                        nodeObject.ethernetContainerList.push(interfaceObject);\r",
									"                    }\r",
									"                } else {\r",
									"                    nodeObject.ethernetContainerList.push(interfaceObject);\r",
									"                }\r",
									"                break;\r",
									"            case \"hybrid-mw-structure\":\r",
									"                if (multiplicityOfinterfaceIterations === \"one\") {\r",
									"                    if (nodeObject.hybridMwStructureList.length === 0) {\r",
									"                        nodeObject.hybridMwStructureList.push(interfaceObject);\r",
									"                    }\r",
									"                } else {\r",
									"                    nodeObject.hybridMwStructureList.push(interfaceObject);\r",
									"                }\r",
									"                break;\r",
									"            case \"ip-interface\":\r",
									"                if (multiplicityOfinterfaceIterations === \"one\") {\r",
									"                    if (nodeObject.ipInterfaceList.length === 0) {\r",
									"                        nodeObject.ipInterfaceList.push(interfaceObject);\r",
									"                    }\r",
									"                } else {\r",
									"                    nodeObject.ipInterfaceList.push(interfaceObject);\r",
									"                }\r",
									"                break;\r",
									"            case \"mac-interface\":\r",
									"                if (multiplicityOfinterfaceIterations === \"one\") {\r",
									"                    if (nodeObject.macInterfaceList.length === 0) {\r",
									"                        nodeObject.macInterfaceList.push(interfaceObject);\r",
									"                    }\r",
									"                } else {\r",
									"                    nodeObject.macInterfaceList.push(interfaceObject);\r",
									"                }\r",
									"                break;\r",
									"            case \"pure-ethernet-structure\":\r",
									"                if (multiplicityOfinterfaceIterations === \"one\") {\r",
									"                    if (nodeObject.pureEthernetStructureList.length === 0) {\r",
									"                        nodeObject.pureEthernetStructureList.push(interfaceObject);\r",
									"                    }\r",
									"                } else {\r",
									"                    nodeObject.pureEthernetStructureList.push(interfaceObject);\r",
									"                }\r",
									"                break;\r",
									"            case \"tdm-container\":\r",
									"                if (multiplicityOfinterfaceIterations === \"one\") {\r",
									"                    if (nodeObject.tdmContainerList.length === 0) {\r",
									"                        nodeObject.tdmContainerList.push(interfaceObject);\r",
									"                    }\r",
									"                } else {\r",
									"                    nodeObject.tdmContainerList.push(interfaceObject);\r",
									"                }\r",
									"                break;\r",
									"            case \"vlan-interface\":\r",
									"                if (multiplicityOfinterfaceIterations === \"one\") {\r",
									"                    if (nodeObject.vlanInterfaceList.length === 0) {\r",
									"                        nodeObject.vlanInterfaceList.push(interfaceObject);\r",
									"                    }\r",
									"                } else {\r",
									"                    nodeObject.vlanInterfaceList.push(interfaceObject);\r",
									"                }\r",
									"                break;\r",
									"            case \"wire-interface\":\r",
									"                if (multiplicityOfinterfaceIterations === \"one\") {\r",
									"                    if (nodeObject.wireInterfaceList.length === 0) {\r",
									"                        nodeObject.wireInterfaceList.push(interfaceObject);\r",
									"                    }\r",
									"                } else {\r",
									"                    nodeObject.wireInterfaceList.push(interfaceObject);\r",
									"                }\r",
									"                break;\r",
									"        }\r",
									"        //IsNodeUnderTestDefined(nodeObject);\r",
									"    } catch (error) {\r",
									"        console.log(\"Exception: in PrepareNodeData()\");\r",
									"        IsNodeUnderTestDefined();\r",
									"    }\r",
									"    return nodeObject;\r",
									"}\r",
									"\r",
									"function SetControllerData(nodeObject, controller) {\r",
									"    try {      \r",
									"        controller.nodeList.push(nodeObject);\r",
									"        //IsControllerUnderTestDefined(controller)\r",
									"    } catch (error) {\r",
									"        console.log(\"Exception: in SetControllerData()\");\r",
									"        IsControllerUnderTestDefined();\r",
									"    }\r",
									"    return controller;\r",
									"}\r",
									"\r",
									"function TechnologyOf(pacUnderTest) {\r",
									"    try {\r",
									"        if (pacUnderTest) {\r",
									"            let indexOfColon = pacUnderTest.indexOf(\":\");\r",
									"            //let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");\r",
									"            return pacUnderTest.slice(0, indexOfColon - 4);\r",
									"        }\r",
									"     } catch (error) {\r",
									"        console.log(\"Exception: in TechnologyOf()\");\r",
									"     }\r",
									"}\r",
									"\r",
									"/****************************************************************************************\r",
									" * Self Testing Functions\r",
									" ****************************************************************************************/\r",
									"function IsValueOfInputParametersCorrect(controller, sourceOfInputParameters) {\r",
									"    pm.test(\"IsValueOfInputParametersCorrect\", function () {\r",
									"        pm.expect(controller).to.be.an(\"object\");\r",
									"        pm.expect(sourceOfInputParameters).to.be.oneOf([\"manual\", \"file\", \"network\"]);\r",
									"    });\r",
									"}\r",
									"\r",
									"function CouldInputForFetchingDataFromNetworkBeLoaded(controller, nodeUnderTest, interfaceListUnderTest,\r",
									"    multiplicityOfinterfaceIterations,\r",
									"    nodeList, nodeIndex) {\r",
									"    pm.test(\"CouldInputForFetchingDataFromNetworkBeLoaded\", function () {\r",
									"        pm.expect(controller).to.be.an(\"object\");\r",
									"        pm.expect(nodeUnderTest).to.be.an(\"object\");\r",
									"        pm.expect(interfaceListUnderTest).to.be.an(\"array\");\r",
									"        pm.expect(multiplicityOfinterfaceIterations).to.be.a(\"string\");\r",
									"        pm.expect(multiplicityOfinterfaceIterations).to.not.have.lengthOf(0);\r",
									"        pm.expect(nodeList).to.be.an(\"array\");\r",
									"        pm.expect(nodeIndex).to.be.a(\"number\");\r",
									"    });\r",
									"}\r",
									"function CouldTheLtpDataValid(ltpId, layerProtocol, lpId, ltpName) {\r",
									"    pm.test(\"CouldTheLtpDataValid\", function () {\r",
									"        pm.expect(ltpId).to.be.a(\"string\");\r",
									"        pm.expect(ltpId).to.not.have.lengthOf(0);\r",
									"        pm.expect(layerProtocol).to.be.an(\"object\");\r",
									"        pm.expect(lpId).to.be.a(\"string\");\r",
									"        pm.expect(lpId).to.not.have.lengthOf(0);\r",
									"        pm.expect(ltpName).to.be.a(\"string\");\r",
									"        pm.expect(ltpName).to.not.have.lengthOf(0);\r",
									"    });\r",
									"}\r",
									"\r",
									"function IsInterfaceObjectDefined(interfaceObject) {\r",
									"    pm.test(\"IsInterfaceObjectDefined\", function () {\r",
									"        pm.expect(interfaceObject.ltpUuid).to.be.a(\"string\");\r",
									"        pm.expect(interfaceObject.ltpUuid).to.not.have.lengthOf(0);\r",
									"        pm.expect(interfaceObject.lpLid).to.be.a(\"string\");\r",
									"        pm.expect(interfaceObject.lpLid).to.not.have.lengthOf(0);\r",
									"    });\r",
									"}\r",
									"\r",
									"function CouldTheControllerDataProccessed(ltpList, controller) {\r",
									"    pm.test(\"CouldTheControllerDataProccessed\", function () {\r",
									"        pm.expect(ltpList).to.be.an(\"array\");\r",
									"        pm.expect(controller).to.be.an(\"object\");\r",
									"    });\r",
									"}\r",
									"\r",
									"function IsTheLTPResponseCodeValid(responseCode, nodeId) {\r",
									"    pm.test(\"Is the LTP Response Code Valid for \"+nodeId, function () {\r",
									"        pm.expect(responseCode).to.equal(200);\r",
									"    });\r",
									"}\r",
									"\r",
									"function IsNodeUnderTestDefined(nodeObject) {\r",
									"    pm.test(\"IsNodeUnderTestDefined\", function () {\r",
									"        pm.expect(nodeObject.nodeId).to.be.a(\"string\");\r",
									"        pm.expect(nodeObject.nodeId).to.not.have.lengthOf(0);\r",
									"    });\r",
									"}\r",
									"\r",
									"function IsControllerUnderTestDefined(controllerUnderTest) {\r",
									"    pm.test(\"IsControllerUnderTestDefined\", function () {\r",
									"        pm.expect(controllerUnderTest.controllerAddress).to.be.a(\"string\");\r",
									"        pm.expect(controllerUnderTest.controllerAddress).to.not.have.lengthOf(0);\r",
									"        pm.expect(controllerUnderTest.authorizationCode).to.be.a(\"string\");\r",
									"        pm.expect(controllerUnderTest.authorizationCode).to.not.have.lengthOf(0);\r",
									"        pm.expect(controllerUnderTest.pathToDbAndMountPoint).to.be.a(\"string\");\r",
									"        pm.expect(controllerUnderTest.pathToDbAndMountPoint).to.not.have.lengthOf(0);\r",
									"    });\r",
									"}\r",
									"\r",
									"function CouldRequiredInputBeRead(controllConstructLink, nodeList, nodeIndex, nodeId) {\r",
									"    pm.test(\"CouldRequiredInputBeRead\", function () {\r",
									"        pm.expect(controllConstructLink).to.be.a(\"string\");\r",
									"        pm.expect(controllConstructLink).to.not.have.lengthOf(0);\r",
									"        pm.expect(nodeList).to.be.an(\"array\");\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    console.log(\"****************** End of LTPs execution - Parallel ******************\");\r",
									"\r",
									"    var FailedLTPNodes = pm.environment.get(\"FailedLTPNodes\");\r",
									"    pm.environment.set(\"NumberOfFailedLTPNodes\",FailedLTPNodes.length);\r",
									"    if(FailedLTPNodes.length > 0) {\r",
									"        console.log(\"Numberof Nodes Failed for fetching LTPs is : \" +FailedLTPNodes.length);\r",
									"        console.log(FailedLTPNodes);\r",
									"    }\r",
									"} catch (error) {\r",
									"    console.log(\"Exception: in test execution of Parallel LTP\");\r",
									"    CouldTheControllerDataProccessed();\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "PRSe08",
									"type": "string"
								},
								{
									"key": "username",
									"value": "senthilvel.s",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SerialRetrievalOfLTPs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/****************************************************************************************\r",
									"* \r",
									"* FetchFromNetwork\r",
									"* \r",
									"* Serial - Used to fetch the Interface Ltp uuid and local-id from network sequentially  \r",
									"* \r",
									"****************************************************************************************/\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Required Input Parameters\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    var controller = pm.environment.get(\"controller\");\r",
									"    var sourceOfInputParameters = pm.collectionVariables.get(\"sourceOfInputParameters\");    \r",
									"    //IsValueOfInputParametersCorrect(controller, sourceOfInputParameters);\r",
									"\r",
									"    if (sourceOfInputParameters === \"network\") {\r",
									"        EXTENSION = \"/yang-ext:mount/core-model-1-4:control-construct?content=config&fields=logical-termination-point(uuid;layer-protocol(local-id;layer-protocol-name))\";\r",
									"        var controllConstructLink = pm.collectionVariables.get(\"controllConstructLink\");\r",
									"        var nodeList = pm.collectionVariables.get(\"nodeList\");\r",
									"        var nodeIndex = pm.collectionVariables.get(\"nodeIndex\");\r",
									"        var nodeId = nodeList[nodeIndex];\r",
									"        //CouldRequiredInputBeRead(controllConstructLink, nodeList, nodeIndex, nodeId);\r",
									"\r",
									"        console.log(\"\\n--------------Fetching LTPs for \"+nodeId+ \" Index is \"+nodeIndex+\" out of \"+ (nodeList.length-1) +\"--------------\");\r",
									"\r",
									"        var uri = controllConstructLink + \"/node=\" + nodeId + EXTENSION;\r",
									"        pm.variables.set(\"uri\", uri);\r",
									"        //CouldTheRequestUriBePrepared();\r",
									"    }\r",
									"    else {\r",
									"        var dummyUri = pm.environment.get(\"dummyUri\");\r",
									"        pm.variables.set(\"uri\", dummyUri);\r",
									"    }\r",
									"    pm.request.headers.upsert({ key: \"Authorization\", value: controller.authorizationCode });\r",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"Exception: In Reading Input and preparing Request URL\")\r",
									"    CouldRequiredInputBeRead();\r",
									"    CouldTheRequestUriBePrepared();\r",
									"}\r",
									"\r",
									"/****************************************************************************************\r",
									" * Self Testing Functions\r",
									" ****************************************************************************************/\r",
									"function IsValueOfInputParametersCorrect(controller, sourceOfInputParameters) {\r",
									"    pm.test(\"IsValueOfSourceOfInputParametersCorrect\", function () {\r",
									"        pm.expect(controller).to.be.an(\"object\");\r",
									"        pm.expect(sourceOfInputParameters).to.be.oneOf([\"manual\", \"file\", \"network\"]);\r",
									"    });\r",
									"}\r",
									"\r",
									"function CouldRequiredInputBeRead(controllConstructLink, nodeList, nodeIndex, nodeId) {\r",
									"    pm.test(\"CouldRequiredInputBeRead\", function () {\r",
									"        pm.expect(controllConstructLink).to.be.a(\"string\");\r",
									"        pm.expect(controllConstructLink).to.not.have.lengthOf(0);\r",
									"        pm.expect(nodeList).to.be.an(\"array\");\r",
									"        pm.expect(nodeIndex).to.be.a(\"number\");\r",
									"        pm.expect(nodeId).to.be.a(\"string\");\r",
									"        pm.expect(nodeId).to.not.have.lengthOf(0);\r",
									"    });\r",
									"}\r",
									"\r",
									"function CouldTheRequestUriBePrepared() {\r",
									"    pm.test(\"CouldTheRequestUriBePrepared\", function () {\r",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var sourceOfInputParameters = pm.collectionVariables.get(\"sourceOfInputParameters\");\r",
									"//IsValueOfSourceOfInputParametersCorrect(sourceOfInputParameters);\r",
									"\r",
									"if (sourceOfInputParameters === \"network\") {\r",
									"    try {\r",
									"        var controller = pm.environment.get(\"controller\");\r",
									"        //var nodeUnderTest = pm.collectionVariables.get(\"nodeUnderTest\");\r",
									"        var interfaceListUnderTest = pm.environment.get(\"interfaceListUnderTest\");\r",
									"        var multiplicityOfinterfaceIterations = pm.environment.get(\"multiplicityOfinterfaceIterations\");\r",
									"        var nodeList = pm.collectionVariables.get(\"nodeList\");\r",
									"        var nodeIndex = pm.collectionVariables.get(\"nodeIndex\");\r",
									"        var nodeId = nodeList[nodeIndex];\r",
									"        //CouldInputForFetchingDataFromNetworkBeLoaded(controller, multiplicityOfinterfaceIterations, nodeList, nodeIndex);\r",
									"    } catch (error) {\r",
									"        console.log(\"Exception: While Reading and setting input\");\r",
									"        CouldInputForFetchingDataFromNetworkBeLoaded();\r",
									"    }\r",
									"\r",
									"    //Preparing controller data from the response\r",
									"    try {\r",
									"        var responseCode = pm.response.code;\r",
									"        IsTheResponseCodeValid(responseCode);\r",
									"\r",
									"        if (Math.floor(responseCode / 100) === 2) {\r",
									"            response = pm.response.json();\r",
									"            if (response) {\r",
									"                var nodeUnderTest = {\r",
									"                            nodeId: nodeId,\r",
									"                            airInterfaceList: [],\r",
									"                            ethernetContainerList: [],\r",
									"                            hybridMwStructureList: [],\r",
									"                            ipInterfaceList: [],\r",
									"                            macInterfaceList:[],\r",
									"                            pureEthernetStructureList: [],\r",
									"                            tdmContainerList: [],\r",
									"                            vlanInterfaceList: [],\r",
									"                            wireInterfaceList: []\r",
									"                        };\r",
									"\r",
									"                var ltpList = response[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
									"                for (let i = 0; i < ltpList.length; i++) {\r",
									"                    var ltpId = ltpList[i].uuid;\r",
									"                    var layerProtocol = ltpList[i][\"layer-protocol\"][0];\r",
									"                    var lpId = layerProtocol[\"local-id\"];\r",
									"                    var ltpName = layerProtocol[\"layer-protocol-name\"];\r",
									"\r",
									"                    if (ltpName) {\r",
									"                        var interfaceName = GetInterfaceName(interfaceListUnderTest, ltpName);\r",
									"                        if (interfaceName) {\r",
									"                            var interfaceObject = {\r",
									"                                ltpUuid: ltpId,\r",
									"                                lpLid: lpId,\r",
									"                                ltpName:interfaceName\r",
									"                            };\r",
									"                            //IsInterfaceObjectDefined(interfaceObject);\r",
									"\r",
									"                            nodeUnderTest = PrepareNodeData(interfaceName, interfaceObject, nodeId, nodeUnderTest);\r",
									"                        }\r",
									"                    }\r",
									"                }\r",
									"                controller = PrepareControllerData(nodeUnderTest, controller);\r",
									"\r",
									"                //Set the output data\r",
									"                pm.environment.set(\"controller\", controller);\r",
									"                //IsTheEnvironmentVariablesSet();\r",
									"\r",
									"                //CouldTheControllerDataProccessed(ltpList, controller);\r",
									"            }\r",
									"        } else {\r",
									"            console.log(\" ERROR: could not be retrieved Interface data for Device: \" + nodeId +\r",
									"                \". Response Code: \" + responseCode);\r",
									"        }\r",
									"\r",
									"    } catch (error) {\r",
									"        console.log(\"Exception: While preparing controller data\");\r",
									"        CouldTheControllerDataProccessed();\r",
									"    }\r",
									"\r",
									"    nodeIndex = nodeIndex + 1;\r",
									"    if (nodeIndex < nodeList.length) {\r",
									"        pm.collectionVariables.set(\"nodeIndex\", nodeIndex);\r",
									"        postman.setNextRequest(request.name);\r",
									"    } else {\r",
									"        console.log(controller);\r",
									"        postman.setNextRequest(\"End Of UserInput\");\r",
									"    }\r",
									"}\r",
									"\r",
									"/****************************************************************************************\r",
									" * Functions\r",
									" ****************************************************************************************/\r",
									"function GetInterfaceName(interfaceListUnderTest, ltpName) {\r",
									"    try {\r",
									"        var interfaceName = \"\";\r",
									"        if (interfaceListUnderTest[0] === \"all\") {\r",
									"            if (ltpName) {\r",
									"                interfaceName = TechnologyOf(ltpName);\r",
									"            }\r",
									"        } else {\r",
									"            for (let j = 0; j < interfaceListUnderTest.length; j++) {\r",
									"                if (ltpName) {\r",
									"                    var mappedName = TechnologyOf(ltpName);\r",
									"                    if (mappedName === interfaceListUnderTest[j]) {\r",
									"                        interfaceName = mappedName;\r",
									"                        break;\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"        return interfaceName;\r",
									"    } catch (error) {\r",
									"        console.log(\"Exception: in GetInterfaceName() function\");\r",
									"    }    \r",
									"}\r",
									"\r",
									"function PrepareNodeData(interfaceName, interfaceObject, nodeId, nodeUnderTest) {\r",
									"    try {\r",
									"        switch (interfaceName) {\r",
									"            case \"air-interface\":\r",
									"                if (multiplicityOfinterfaceIterations === \"one\") {\r",
									"                    if (nodeUnderTest.airInterfaceList.length === 0) {\r",
									"                        nodeUnderTest.airInterfaceList.push(interfaceObject);\r",
									"                    }\r",
									"                } else {\r",
									"                    nodeUnderTest.airInterfaceList.push(interfaceObject);\r",
									"                }\r",
									"                break;\r",
									"            case \"ethernet-container\":\r",
									"                if (multiplicityOfinterfaceIterations === \"one\") {\r",
									"                    if (nodeUnderTest.ethernetContainerList.length === 0) {\r",
									"                        nodeUnderTest.ethernetContainerList.push(interfaceObject);\r",
									"                    }\r",
									"                } else {\r",
									"                    nodeUnderTest.ethernetContainerList.push(interfaceObject);\r",
									"                }\r",
									"                break;\r",
									"            case \"hybrid-mw-structure\":\r",
									"                if (multiplicityOfinterfaceIterations === \"one\") {\r",
									"                    if (nodeUnderTest.hybridMwStructureList.length === 0) {\r",
									"                        nodeUnderTest.hybridMwStructureList.push(interfaceObject);\r",
									"                    }\r",
									"                } else {\r",
									"                    nodeUnderTest.hybridMwStructureList.push(interfaceObject);\r",
									"                }\r",
									"                break;\r",
									"            case \"ip-interface\":\r",
									"                if (multiplicityOfinterfaceIterations === \"one\") {\r",
									"                    if (nodeUnderTest.ipInterfaceList.length === 0) {\r",
									"                        nodeUnderTest.ipInterfaceList.push(interfaceObject);\r",
									"                    }\r",
									"                } else {\r",
									"                    nodeUnderTest.ipInterfaceList.push(interfaceObject);\r",
									"                }\r",
									"                break;\r",
									"            case \"mac-interface\":\r",
									"                if (multiplicityOfinterfaceIterations === \"one\") {\r",
									"                    if (nodeUnderTest.macInterfaceList.length === 0) {\r",
									"                        nodeUnderTest.macInterfaceList.push(interfaceObject);\r",
									"                    }\r",
									"                } else {\r",
									"                    nodeUnderTest.macInterfaceList.push(interfaceObject);\r",
									"                }\r",
									"                break;\r",
									"            case \"pure-ethernet-structure\":\r",
									"                if (multiplicityOfinterfaceIterations === \"one\") {\r",
									"                    if (nodeUnderTest.pureEthernetStructureList.length === 0) {\r",
									"                        nodeUnderTest.pureEthernetStructureList.push(interfaceObject);\r",
									"                    }\r",
									"                } else {\r",
									"                    nodeUnderTest.pureEthernetStructureList.push(interfaceObject);\r",
									"                }\r",
									"                break;\r",
									"            case \"tdm-container\":\r",
									"                if (multiplicityOfinterfaceIterations === \"one\") {\r",
									"                    if (nodeUnderTest.tdmContainerList.length === 0) {\r",
									"                        nodeUnderTest.tdmContainerList.push(interfaceObject);\r",
									"                    }\r",
									"                } else {\r",
									"                    nodeUnderTest.tdmContainerList.push(interfaceObject);\r",
									"                }\r",
									"                break;\r",
									"            case \"vlan-interface\":\r",
									"                if (multiplicityOfinterfaceIterations === \"one\") {\r",
									"                    if (nodeUnderTest.vlanInterfaceList.length === 0) {\r",
									"                        nodeUnderTest.vlanInterfaceList.push(interfaceObject);\r",
									"                    }\r",
									"                } else {\r",
									"                    nodeUnderTest.vlanInterfaceList.push(interfaceObject);\r",
									"                }\r",
									"                break;\r",
									"            case \"wire-interface\":\r",
									"                if (multiplicityOfinterfaceIterations === \"one\") {\r",
									"                    if (nodeUnderTest.wireInterfaceList.length === 0) {\r",
									"                        nodeUnderTest.wireInterfaceList.push(interfaceObject);\r",
									"                    }\r",
									"                } else {\r",
									"                    nodeUnderTest.wireInterfaceList.push(interfaceObject);\r",
									"                }\r",
									"                break;\r",
									"        }\r",
									"        nodeUnderTest.nodeId = nodeId;\r",
									"        //nodeUnderTest.vendor = VendorOf(nodeId);\r",
									"        //nodeUnderTest.deviceType = TypeOf(nodeId);\r",
									"        //nodeUnderTest.deviceNumber = NumberOf(nodeId);\r",
									"        //IsNodeUnderTestDefined(nodeUnderTest);\r",
									"    } catch (error) {\r",
									"        console.log(\"Exception: in PrepareNodeData() function\");\r",
									"        IsNodeUnderTestDefined();\r",
									"    }\r",
									"    return nodeUnderTest;\r",
									"}\r",
									"\r",
									"function PrepareControllerData(nodeUnderTest, controller) {\r",
									"    try {\r",
									"        controller.nodeList.push(nodeUnderTest);\r",
									"        //IsControllerUnderTestDefined(controller)\r",
									"    } catch (error) {\r",
									"        console.log(\"Exception: in PrepareControllerData() function\");\r",
									"        IsControllerUnderTestDefined();\r",
									"    }\r",
									"    return controller;\r",
									"}\r",
									"\r",
									"function VendorOf(deviceUnderTest) {\r",
									"    if (deviceUnderTest) {\r",
									"        let indexOfFirstUnderscore = deviceUnderTest.indexOf(\"_\");\r",
									"        return deviceUnderTest.slice(0, indexOfFirstUnderscore);\r",
									"    }\r",
									"}\r",
									"\r",
									"function TypeOf(deviceUnderTest) {\r",
									"    if (deviceUnderTest) {\r",
									"        let deviceNameSegements = deviceUnderTest.split(\"_\");\r",
									"        return deviceNameSegements[1];\r",
									"    }\r",
									"}\r",
									"\r",
									"function NumberOf(deviceUnderTest) {\r",
									"    if (deviceUnderTest) {\r",
									"        let indexOfSecondUnderscore = deviceUnderTest.indexOf(\"_\", deviceUnderTest.indexOf(\"_\") + 1);\r",
									"        return deviceUnderTest.slice(indexOfSecondUnderscore + 1);\r",
									"    }\r",
									"}\r",
									"\r",
									"function TechnologyOf(pacUnderTest) {\r",
									"    if (pacUnderTest) {\r",
									"        let indexOfColon = pacUnderTest.indexOf(\":\");\r",
									"        //let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");\r",
									"        return pacUnderTest.slice(0, indexOfColon - 4);\r",
									"    }\r",
									"}\r",
									"\r",
									"/****************************************************************************************\r",
									" * Self Testing Functions\r",
									" ****************************************************************************************/\r",
									"function IsValueOfSourceOfInputParametersCorrect(sourceOfInputParameters) {\r",
									"    pm.test(\"IsValueOfSourceOfInputParametersCorrect\", function () {\r",
									"        pm.expect(sourceOfInputParameters).to.be.oneOf([\"manual\", \"file\", \"network\"]);\r",
									"    });\r",
									"}\r",
									"\r",
									"function CouldInputForFetchingDataFromNetworkBeLoaded(controller, multiplicityOfinterfaceIterations, nodeList, nodeIndex) {\r",
									"    pm.test(\"CouldInputForFetchingDataFromNetworkBeLoaded\", function () {\r",
									"        pm.expect(controller).to.be.an(\"object\");\r",
									"        pm.expect(nodeUnderTest).to.be.an(\"object\");\r",
									"        pm.expect(interfaceListUnderTest).to.be.an(\"array\");\r",
									"        pm.expect(multiplicityOfinterfaceIterations).to.be.a(\"string\");\r",
									"        pm.expect(multiplicityOfinterfaceIterations).to.not.have.lengthOf(0);\r",
									"        pm.expect(nodeList).to.be.an(\"array\");\r",
									"        pm.expect(nodeIndex).to.be.a(\"number\");\r",
									"    });\r",
									"}\r",
									"function CouldTheLtpDataValid(ltpId, layerProtocol, lpId, ltpName) {\r",
									"    pm.test(\"CouldTheLtpDataValid\", function () {\r",
									"        pm.expect(ltpId).to.be.a(\"string\");\r",
									"        pm.expect(ltpId).to.not.have.lengthOf(0);\r",
									"        pm.expect(layerProtocol).to.be.an(\"object\");\r",
									"        pm.expect(lpId).to.be.a(\"string\");\r",
									"        pm.expect(lpId).to.not.have.lengthOf(0);\r",
									"        pm.expect(ltpName).to.be.a(\"string\");\r",
									"        pm.expect(ltpName).to.not.have.lengthOf(0);\r",
									"    });\r",
									"}\r",
									"\r",
									"function IsInterfaceObjectDefined(interfaceObject) {\r",
									"    pm.test(\"IsInterfaceObjectDefined\", function () {\r",
									"        pm.expect(interfaceObject.ltpUuid).to.be.a(\"string\");\r",
									"        pm.expect(interfaceObject.ltpUuid).to.not.have.lengthOf(0);\r",
									"        pm.expect(interfaceObject.lpLid).to.be.a(\"string\");\r",
									"        pm.expect(interfaceObject.lpLid).to.not.have.lengthOf(0);\r",
									"    });\r",
									"}\r",
									"\r",
									"function CouldTheControllerDataProccessed(ltpList, controller) {\r",
									"    pm.test(\"CouldTheControllerDataProccessed\", function () {\r",
									"        pm.expect(ltpList).to.be.an(\"array\");\r",
									"        pm.expect(controller).to.be.an(\"object\");\r",
									"    });\r",
									"}\r",
									"\r",
									"function IsTheResponseCodeValid(responseCode) {\r",
									"    pm.test(\"IsTheResponseCodeValid \", function () {\r",
									"        pm.expect(responseCode).to.equal(200);\r",
									"    });\r",
									"}\r",
									"\r",
									"function IsTheEnvironmentVariablesSet() {\r",
									"    pm.test(\"IsTheEnvironmentVariablesSet\", function () {\r",
									"        pm.expect(pm.environment.get(\"controller\")).to.be.an(\"object\");\r",
									"    });\r",
									"}\r",
									"\r",
									"function IsNodeUnderTestDefined(nodeUnderTest) {\r",
									"    pm.test(\"IsNodeUnderTestDefined\", function () {\r",
									"        pm.expect(nodeUnderTest.nodeId).to.be.a(\"string\");\r",
									"        pm.expect(nodeUnderTest.nodeId).to.not.have.lengthOf(0);\r",
									"        pm.expect(nodeUnderTest.vendor).to.be.a(\"string\");\r",
									"        pm.expect(nodeUnderTest.vendor).to.not.have.lengthOf(0);\r",
									"        pm.expect(nodeUnderTest.deviceType).to.be.a(\"string\");\r",
									"        pm.expect(nodeUnderTest.deviceType).to.not.have.lengthOf(0);\r",
									"        pm.expect(nodeUnderTest.deviceNumber).to.be.a(\"string\");\r",
									"        pm.expect(nodeUnderTest.deviceNumber).to.not.have.lengthOf(0);\r",
									"    });\r",
									"}\r",
									"\r",
									"function IsControllerUnderTestDefined(controllerUnderTest) {\r",
									"    pm.test(\"IsControllerUnderTestDefined\", function () {\r",
									"        pm.expect(controllerUnderTest.controllerAddress).to.be.a(\"string\");\r",
									"        pm.expect(controllerUnderTest.controllerAddress).to.not.have.lengthOf(0);\r",
									"        pm.expect(controllerUnderTest.authorizationCode).to.be.a(\"string\");\r",
									"        pm.expect(controllerUnderTest.authorizationCode).to.not.have.lengthOf(0);\r",
									"        pm.expect(controllerUnderTest.pathToDbAndMountPoint).to.be.a(\"string\");\r",
									"        pm.expect(controllerUnderTest.pathToDbAndMountPoint).to.not.have.lengthOf(0);\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "PRSe08",
									"type": "string"
								},
								{
									"key": "username",
									"value": "senthilvel.s",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserInput",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"\\n\\n\\n===========================================================================================\");",
									"console.log(\"================================= InterfaceValidator.3 ===================================\");",
									"console.log(\"==========================================================================================\");",
									"/****************************************************************************************",
									"* ",
									"* Request collection for validating the management interface of microwave devices",
									"* as it can be found on https://github.com/openBackhaul",
									"*  ",
									"* This RequestCollection is for perpetual complementation.",
									"* ",
									"*   !   Please, provide the following User Input   !",
									"* ",
									"****************************************************************************************/",
									"",
									"",
									"/****************************************************************************************",
									"* Manual Definition of Source of Environmental Parameters",
									"****************************************************************************************/",
									"SOURCE_OF_INPUT_PARAMETERS = \"file\";            // choose from \"manual\" or \"file\"",
									"MULTIPLICITY_OF_DEVICE_ITERATIONS = \"one\";      // \"none\", \"one\" or \"all\" devices to be validated",
									"MANTIS_INTERFACE_STATUS = \"off\";          // choose from \"off\", \"read-only\" or \"read-write\"",
									"",
									"AreMainInputParametersCorrect(SOURCE_OF_INPUT_PARAMETERS,",
									"    MULTIPLICITY_OF_DEVICE_ITERATIONS,",
									"    MANTIS_INTERFACE_STATUS",
									");",
									"",
									"",
									"/****************************************************************************************",
									"* Manual Definition of Controller and Device Information (required for \"manual\" only)",
									"****************************************************************************************/",
									"if (SOURCE_OF_INPUT_PARAMETERS === \"manual\") {",
									"    IP_ADDRESS_OF_THE_CONTROLLER = \"172.29.145.220\";     // laboratory: 172.29.145.220",
									"    RESTCONF_PORT_AT_THE_CONTROLLER = \"8181\";",
									"    AUTHORIZATION_CODE_AT_THE_CONTROLLER = \"c2VudGhpbHZlbC5zOlBSU2UwOA==\";",
									"    PATH_TO_DB_AND_MOUNT_POINT = \"/rests/data/network-topology:network-topology/topology=topology-netconf\";",
									"",
									"    NAME_OF_DEVICE_UNDER_TEST = \"siae_alcplus2e_12970\";",
									"    AUTHORIZATION_CODE_AT_THE_MANTIS = \"Ojy9tXKkPqLhfofIg-4Bv-q5EXJbpduE\";",
									"    UUID_UNDER_TEST = \"LTP-ETC-TTP-PORT-A\";",
									"    LID_UNDER_TEST = \"LP-ETC-TTP-PORT-A\";",
									"    PAC_UNDER_TEST = \"ethernet-container-2-0:ethernet-container-pac\"; // \"wred-profile-1-0:wred-profile-pac\";",
									"",
									"    IsControllerAndDeviceInformationComplete(IP_ADDRESS_OF_THE_CONTROLLER,",
									"        RESTCONF_PORT_AT_THE_CONTROLLER,",
									"        AUTHORIZATION_CODE_AT_THE_CONTROLLER,",
									"        PATH_TO_DB_AND_MOUNT_POINT,",
									"        NAME_OF_DEVICE_UNDER_TEST,",
									"        AUTHORIZATION_CODE_AT_THE_MANTIS,",
									"        UUID_UNDER_TEST,",
									"        LID_UNDER_TEST,",
									"        PAC_UNDER_TEST",
									"    );",
									"}",
									"",
									"class Instance {",
									"    constructor(newUuid, newLid) {",
									"        this.ltpUuid = newUuid;",
									"        this.lpLid = newLid;",
									"    }",
									"}",
									"if (SOURCE_OF_INPUT_PARAMETERS === \"manual\") {",
									"    var instanceUnderTest = new Instance(UUID_UNDER_TEST, LID_UNDER_TEST);",
									"    IsInstanceUnderTestDefined(instanceUnderTest);",
									"}",
									"",
									"class Node {",
									"    constructor(newNodeId,",
									"        newVendor,",
									"        newDeviceType,",
									"        newDeviceNumber,",
									"        newMantisAuthorizationCode) {",
									"        this.nodeId = newNodeId;",
									"        this.vendor = newVendor;",
									"        this.deviceType = newDeviceType;",
									"        this.deviceNumber = newDeviceNumber;",
									"        this.mantisAuthorizationCode = newMantisAuthorizationCode;",
									"        this.airInterfaceList = [];",
									"        this.ethernetContainerList = [];",
									"        this.hybridMwStructureList = [];",
									"        this.ipInterfaceList = [];",
									"        this.macInterfaceList = [];",
									"        this.pureEthernetStructureList = [];",
									"        this.tdmContainerList = [];",
									"        this.vlanInterfaceList = [];",
									"        this.wireInterfaceList = [];",
									"",
									"        this.ethernetContainerFdList = [];",
									"        this.macFdList = [];",
									"        this.tdmContainerFdList = [];",
									"        this.vlanFdList = [];",
									"",
									"        this.ethernetContainerFcList = [];",
									"        this.tdmContainerFcList = [];",
									"        this.vlanFcList = [];",
									"",
									"        this.coChannelProfileList = [];",
									"        this.l3vpnProfileList = [];",
									"        this.qosProfileList = [];",
									"        this.wredProfileList = [];",
									"    }",
									"}",
									"if (SOURCE_OF_INPUT_PARAMETERS === \"manual\") {",
									"    var nodeUnderTest = new Node(NAME_OF_DEVICE_UNDER_TEST,",
									"        VendorOf(NAME_OF_DEVICE_UNDER_TEST),",
									"        TypeOf(NAME_OF_DEVICE_UNDER_TEST),",
									"        NumberOf(NAME_OF_DEVICE_UNDER_TEST),",
									"        AUTHORIZATION_CODE_AT_THE_MANTIS",
									"    );",
									"    switch (TechnologyOf(PAC_UNDER_TEST)) {",
									"        case \"air-interface\":",
									"            nodeUnderTest.airInterfaceList.push(instanceUnderTest);",
									"            break;",
									"        case \"ethernet-container\":",
									"            nodeUnderTest.ethernetContainerList.push(instanceUnderTest);",
									"            break;",
									"        case \"hybrid-mw-structure\":",
									"            nodeUnderTest.hybridMwStructureList.push(instanceUnderTest);",
									"            break;",
									"        case \"ip-interface\":",
									"            nodeUnderTest.ipInterfaceList.push(instanceUnderTest);",
									"            break;",
									"        case \"mac-interface\":",
									"            nodeUnderTest.macInterfaceList.push(instanceUnderTest);",
									"            break;",
									"        case \"pure-ethernet-structure\":",
									"            nodeUnderTest.pureEthernetStructureList.push(instanceUnderTest);",
									"            break;",
									"        case \"tdm-container\":",
									"            nodeUnderTest.tdmContainerList.push(instanceUnderTest);",
									"            break;",
									"        case \"vlan-interface\":",
									"            nodeUnderTest.vlanInterfaceList.push(instanceUnderTest);",
									"            break;",
									"        case \"wire-interface\":",
									"            nodeUnderTest.wireInterfaceList.push(instanceUnderTest);",
									"            break;",
									"        case \"co-channel-profile\":",
									"            nodeUnderTest.coChannelProfileList.push(instanceUnderTest);",
									"            break;",
									"        case \"l3vpn-profile\":",
									"            nodeUnderTest.l3vpnProfileList.push(instanceUnderTest);",
									"            break;",
									"        case \"qos-profile\":",
									"            nodeUnderTest.qosProfileList.push(instanceUnderTest);",
									"            break;",
									"        case \"wred-profile\":",
									"            nodeUnderTest.wredProfileList.push(instanceUnderTest);",
									"            break;",
									"    }",
									"    IsNodeUnderTestDefined(nodeUnderTest);",
									"}",
									"",
									"class Controller {",
									"    constructor(newControllerAddress,",
									"        newAuthorizationCode,",
									"        newPathToDbAndMountPoint) {",
									"        this.controllerAddress = newControllerAddress;",
									"        this.authorizationCode = newAuthorizationCode;",
									"        this.pathToDbAndMountPoint = newPathToDbAndMountPoint;",
									"        this.nodeList = [];",
									"    }",
									"}",
									"if (SOURCE_OF_INPUT_PARAMETERS === \"manual\") {",
									"    var controller = new Controller(IP_ADDRESS_OF_THE_CONTROLLER + \":\" + RESTCONF_PORT_AT_THE_CONTROLLER,",
									"        AUTHORIZATION_CODE_AT_THE_CONTROLLER,",
									"        PATH_TO_DB_AND_MOUNT_POINT",
									"    );",
									"    controller.nodeList.push(nodeUnderTest);",
									"    IsControllerUnderTestDefined(controller);",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Automated Definition of Controller and Device Information by Loading Static Data File",
									"****************************************************************************************/",
									"if (SOURCE_OF_INPUT_PARAMETERS === \"file\") {",
									"    try {",
									"        var controller = data.CONTROLLER;",
									"        CouldControllerBeLoadedFromFile(controller);",
									"    } catch (error) {",
									"        CouldControllerBeLoadedFromFile();",
									"    }",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Automated Definition of Device Information from Controller Topology Information",
									" ****************************************************************************************/",
									"if (SOURCE_OF_INPUT_PARAMETERS === \"network\") {",
									"    /* public version supports only SOURCE_OF_INPUT_PARAMETERS === \"manual\" || \"file\" */",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Provided Environmental Variables ",
									" ****************************************************************************************/",
									"pm.environment.clear();",
									"",
									"//DUMMY_URI = \"ping.openBackhaul.com\";",
									"DUMMY_URI = \"http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf?content=nonconfig&fields=node(node-id;netconf-node-topology:connection-status)\";",
									"//\"ping.openBackhaul.com\";",
									"",
									"INITIAL_INDEX_OF_DEVICE_UNDER_TEST = 0;",
									"VALIDATION_ERROR_RESULTS = [];",
									"VALIDATION_REPORT = [];",
									"",
									"RESPONSE_CODE_FOR_CONFIGURATION_ERROR = 500;",
									"ERROR_MESSAGE_FOR_NOT_SUPPORTED = \"#[onf:Attribute/feature not supported by the hardware.]#\";",
									"ERROR_MESSAGE_FOR_OUT_OF_RANGE = \"#[onf:Configuration value out of range of hardware capabilities.]#\";",
									"ERROR_MESSAGE_FOR_AGAINST_EXISTING = \"#[onf:Wished change contradicts existing configuration.]#\";",
									"ERROR_MESSAGE_FOR_INCONSISTENT = \"#[onf:Wished changes are not consistent.]#\";",
									"",
									"pm.environment.set(\"multiplicityOfDeviceIterations\", MULTIPLICITY_OF_DEVICE_ITERATIONS);",
									"pm.environment.set(\"mantisInterfaceStatus\", MANTIS_INTERFACE_STATUS);",
									"pm.environment.set(\"dummyUri\", DUMMY_URI);",
									"",
									"pm.environment.set(\"controller\", controller);",
									"pm.environment.set(\"indexOfDeviceUnderTest\", INITIAL_INDEX_OF_DEVICE_UNDER_TEST);",
									"",
									"pm.environment.set(\"responseCodeForConfigurationError\", RESPONSE_CODE_FOR_CONFIGURATION_ERROR);",
									"pm.environment.set(\"errorMessageForNotSupported\", ERROR_MESSAGE_FOR_NOT_SUPPORTED);",
									"pm.environment.set(\"errorMessageForOutOfRange\", ERROR_MESSAGE_FOR_OUT_OF_RANGE);",
									"pm.environment.set(\"errorMessageForAgainstExisting\", ERROR_MESSAGE_FOR_AGAINST_EXISTING);",
									"pm.environment.set(\"errorMessageForInconsistent\", ERROR_MESSAGE_FOR_INCONSISTENT);",
									"pm.environment.set(\"validationErrorResults\", VALIDATION_ERROR_RESULTS);",
									"pm.environment.set(\"validationReport\", VALIDATION_REPORT);",
									"",
									"AreAllEnvironmentVariablesSet();",
									"",
									"",
									"/****************************************************************************************",
									" * Provided Collection Variables ",
									" ****************************************************************************************/",
									"pm.collectionVariables.clear();",
									"",
									"/****************************************************************************************",
									" * Setting up Local Variables and Preparing the Request",
									" ****************************************************************************************/",
									"pm.variables.clear();",
									"",
									"try {",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    pm.variables.set(\"uri\", dummyUri);",
									"    pm.request.headers.upsert({ key: \"Authorization\", value: \"\" });",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });",
									"} catch (error) { }",
									"CouldTheRequestBePrepared();",
									"",
									"/****************************************************************************************",
									" * Functions",
									" ****************************************************************************************/",
									"function TechnologyOf(pacUnderTest) {",
									"    let indexOfColon = pacUnderTest.indexOf(\":\");",
									"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
									"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
									"}",
									"",
									"function VendorOf(deviceUnderTest) {",
									"    let indexOfFirstUnderscore = deviceUnderTest.indexOf(\"_\");",
									"    return deviceUnderTest.slice(0, indexOfFirstUnderscore);",
									"}",
									"",
									"function TypeOf(deviceUnderTest) {",
									"    let deviceNameSegements = deviceUnderTest.split(\"_\");",
									"    return deviceNameSegements[1];",
									"}",
									"",
									"function NumberOf(deviceUnderTest) {",
									"    let indexOfSecondUnderscore = deviceUnderTest.indexOf(\"_\", deviceUnderTest.indexOf(\"_\") + 1);",
									"    return deviceUnderTest.slice(indexOfSecondUnderscore + 1);",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Self Testing Functions",
									" ****************************************************************************************/",
									"function AreMainInputParametersCorrect(sourceOfInputParameters,",
									"    multiplicityOfDeviceIterations,",
									"    mantisInterfaceStatus) {",
									"    pm.test(\"IsValueOfSourceOfInputParametersCorrect\", function () {",
									"        pm.expect(sourceOfInputParameters).to.be.oneOf([\"manual\", \"file\", \"network\"]);",
									"    });",
									"    pm.test(\"IsValueOfMultiplicityOfDeviceIterationsCorrect\", function () {",
									"        pm.expect(multiplicityOfDeviceIterations).to.be.oneOf([\"none\", \"one\", \"all\"]);",
									"    });",
									"    pm.test(\"IsValueOfMantisInterfaceStatusCorrect\", function () {",
									"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
									"    });",
									"}",
									"",
									"function IsControllerAndDeviceInformationComplete(ipAddressOfTheController,",
									"    restconfPortAtTheController,",
									"    authorizationCodeAtTheController,",
									"    pathToDbAndMountPoint,",
									"    nameOfDeviceUnderTest,",
									"    authorizationCodeAtTheMantis,",
									"    uuidOfLtpUnderTest,",
									"    lidOfLpUnderTest,",
									"    pacUnderTest) {",
									"    pm.test(\"IsControllerAndDeviceInformationComplete\", function () {",
									"        pm.expect(ipAddressOfTheController).to.be.a(\"string\");",
									"        pm.expect(ipAddressOfTheController).to.not.have.lengthOf(0);",
									"        pm.expect(restconfPortAtTheController).to.be.a(\"string\");",
									"        pm.expect(restconfPortAtTheController).to.not.have.lengthOf(0);",
									"        pm.expect(authorizationCodeAtTheController).to.be.a(\"string\");",
									"        pm.expect(authorizationCodeAtTheController).to.not.have.lengthOf(0);",
									"        pm.expect(pathToDbAndMountPoint).to.be.a(\"string\");",
									"        pm.expect(pathToDbAndMountPoint).to.not.have.lengthOf(0);",
									"        pm.expect(nameOfDeviceUnderTest).to.be.a(\"string\");",
									"        pm.expect(nameOfDeviceUnderTest).to.not.have.lengthOf(0);",
									"        pm.expect(authorizationCodeAtTheMantis).to.be.a(\"string\");",
									"        if (MANTIS_INTERFACE_STATUS !== \"off\") {",
									"            pm.expect(authorizationCodeAtTheMantis).to.not.have.lengthOf(0);",
									"        }",
									"        pm.expect(uuidOfLtpUnderTest).to.be.a(\"string\");",
									"        pm.expect(uuidOfLtpUnderTest).to.not.have.lengthOf(0);",
									"        pm.expect(lidOfLpUnderTest).to.be.a(\"string\");",
									"        pm.expect(pacUnderTest).to.be.a(\"string\");",
									"        pm.expect(pacUnderTest).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldControllerBeLoadedFromFile(controller) {",
									"    pm.test(\"CouldControllerBeLoadedFromFile\", function () {",
									"        pm.expect(controller).to.be.an(\"object\");",
									"    });",
									"}",
									"",
									"function IsInstanceUnderTestDefined(instanceUnderTest) {",
									"    pm.test(\"IsInstanceUnderTestDefined\", function () {",
									"        pm.expect(instanceUnderTest).to.be.an.instanceof(Instance);",
									"    });",
									"    pm.test(\"IsLtpUuidDefined\", function () {",
									"        pm.expect(instanceUnderTest.ltpUuid).to.be.a(\"string\");",
									"        pm.expect(instanceUnderTest.ltpUuid).to.not.have.lengthOf(0);",
									"    });",
									"    pm.test(\"IsLpLidDefined\", function () {",
									"        pm.expect(instanceUnderTest.lpLid).to.be.a(\"string\");",
									"    });",
									"}",
									"",
									"function IsNodeUnderTestDefined(nodeUnderTest) {",
									"    pm.test(\"IsNodeUnderTestDefined\", function () {",
									"        pm.expect(nodeUnderTest).to.be.an.instanceof(Node);",
									"        pm.expect(nodeUnderTest.nodeId).to.be.a(\"string\");",
									"        pm.expect(nodeUnderTest.nodeId).to.not.have.lengthOf(0);",
									"        pm.expect(nodeUnderTest.vendor).to.be.a(\"string\");",
									"        pm.expect(nodeUnderTest.vendor).to.not.have.lengthOf(0);",
									"        pm.expect(nodeUnderTest.deviceType).to.be.a(\"string\");",
									"        pm.expect(nodeUnderTest.deviceType).to.not.have.lengthOf(0);",
									"        pm.expect(nodeUnderTest.deviceNumber).to.be.a(\"string\");",
									"        pm.expect(nodeUnderTest.deviceNumber).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function IsControllerUnderTestDefined(controllerUnderTest) {",
									"    pm.test(\"IsControllerUnderTestDefined\", function () {",
									"        pm.expect(controllerUnderTest).to.be.an.instanceof(Controller);",
									"        pm.expect(controllerUnderTest.controllerAddress).to.be.a(\"string\");",
									"        pm.expect(controllerUnderTest.controllerAddress).to.not.have.lengthOf(0);",
									"        pm.expect(controllerUnderTest.authorizationCode).to.be.a(\"string\");",
									"        pm.expect(controllerUnderTest.authorizationCode).to.not.have.lengthOf(0);",
									"        pm.expect(controllerUnderTest.pathToDbAndMountPoint).to.be.a(\"string\");",
									"        pm.expect(controllerUnderTest.pathToDbAndMountPoint).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function AreAllEnvironmentVariablesSet() {",
									"    pm.test(\"AreAllEnvironmentVariablesSet\", function () {",
									"        pm.expect(pm.environment.get(\"multiplicityOfDeviceIterations\")).to.be.oneOf([\"none\", \"one\", \"all\"]);",
									"        pm.expect(pm.environment.get(\"mantisInterfaceStatus\")).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
									"        pm.expect(pm.environment.get(\"dummyUri\")).to.be.a(\"string\");",
									"        pm.expect(pm.environment.get(\"dummyUri\")).to.not.have.lengthOf(0);",
									"        pm.expect(pm.environment.get(\"controller\")).to.be.an(\"object\");",
									"        pm.expect(pm.environment.get(\"indexOfDeviceUnderTest\")).to.be.a(\"number\");",
									"        pm.expect(pm.environment.get(\"indexOfDeviceUnderTest\")).to.be.at.least(0);",
									"        pm.expect(pm.environment.get(\"responseCodeForConfigurationError\")).to.be.a(\"number\");",
									"        pm.expect(pm.environment.get(\"responseCodeForConfigurationError\")).to.be.at.least(300);",
									"        pm.expect(pm.environment.get(\"errorMessageForNotSupported\")).to.be.a(\"string\");",
									"        pm.expect(pm.environment.get(\"errorMessageForNotSupported\")).to.not.have.lengthOf(0);",
									"        pm.expect(pm.environment.get(\"errorMessageForOutOfRange\")).to.be.a(\"string\");",
									"        pm.expect(pm.environment.get(\"errorMessageForOutOfRange\")).to.not.have.lengthOf(0);",
									"        pm.expect(pm.environment.get(\"errorMessageForAgainstExisting\")).to.be.a(\"string\");",
									"        pm.expect(pm.environment.get(\"errorMessageForAgainstExisting\")).to.not.have.lengthOf(0);",
									"        pm.expect(pm.environment.get(\"errorMessageForInconsistent\")).to.be.a(\"string\");",
									"        pm.expect(pm.environment.get(\"errorMessageForInconsistent\")).to.not.have.lengthOf(0);",
									"        pm.expect(pm.environment.get(\"validationErrorResults\")).to.be.an(\"array\");",
									"        pm.expect(pm.environment.get(\"validationReport\")).to.be.an(\"array\");",
									"    });",
									"}",
									"",
									"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
									"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function () {",
									"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
									"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
									"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
									"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldTheRequestBePrepared() {",
									"    pm.test(\"CouldTheRequestBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "PRSe08",
									"type": "string"
								},
								{
									"key": "username",
									"value": "senthilvel.s",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "End Of UserInput",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"\\n--------------------------End Of User Input module------------------------------\");\r",
									"/****************************************************************************************\r",
									"* \r",
									"* EndPoint of the User input\r",
									"* \r",
									"****************************************************************************************/\r",
									" \r",
									" \r",
									"/****************************************************************************************\r",
									"* Required Input Parameters\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    var controller = pm.environment.get(\"controller\");\r",
									"    //console.log(controller);\r",
									"\r",
									"    var SuccessfulLTPNodes = []; \r",
									"    for(let i=0; i < controller.nodeList.length; i++) \r",
									"    {\r",
									"        SuccessfulLTPNodes.push(controller.nodeList[i].nodeId)\r",
									"    }\r",
									"    pm.environment.set(\"NumberOfSuccessfulLTPNodes\",SuccessfulLTPNodes.length);\r",
									"    pm.environment.set(\"SuccessfulLTPNodes\",SuccessfulLTPNodes);\r",
									"\r",
									"    console.log(\"Number Of Successfull LTP Nodes: \"+SuccessfulLTPNodes.length);\r",
									"    console.log(\"List of Nodes: \"+SuccessfulLTPNodes);\r",
									"\r",
									"    var dummyUri = pm.environment.get(\"dummyUri\");\r",
									"} catch (error) {\r",
									"    console.log(\"Exception: in reading input\");\r",
									"}\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting up Local Variables and Preparing the Request\r",
									"****************************************************************************************/\r",
									"pm.variables.clear();\r",
									"try {\r",
									"    pm.variables.set(\"uri\", dummyUri);\r",
									"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});\r",
									"} catch (error) {\r",
									"    console.log(\"Exception: Exception in preparing Request URI\");\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									" * Self Testing Functions\r",
									" ****************************************************************************************/\r",
									"function CouldTheInputBeLoaded(uri) {\r",
									"    pm.test(\"CouldTheInputBeLoaded\", function () {\r",
									"        pm.expect(uri).to.be.a(\"string\");\r",
									"        pm.expect(uri).to.not.have.lengthOf(0);\r",
									"    });\r",
									"}\r",
									"\r",
									"function CouldTheRequestBePrepared() {\r",
									"    pm.test(\"CouldTheRequestBePrepared\", function () {\r",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");\r",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);\r",
									"    });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "functions()",
			"item": [
				{
					"name": "General()",
					"item": [
						{
							"name": "PrintMantisIssuesForTechnologyAndClass()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"\\n-------------Uploading Function for Filtering and Listing of Mantis Issues----------------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of PrintMantisIssuesForTechnologyAndClass()",
											"* ",
											"* Function for filtering a list of Mantis issues for defined technology and class ",
											"* under test and console.log of the filtered issues.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Environment Variables ",
											"****************************************************************************************/",
											"const PRINT_MANTIS_ISSUES_FOR_TECHNOLOGY_AND_CLASS = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var mantisIssueList = pm.environment.get(\"mantisIssueList\");",
											"        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
											"        var classUnderTest = pm.variables.get(\"classUnderTest\");",
											"        var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");",
											"        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
											"        CouldInputForFilteringMantisIssuesBeLoaded(mantisIssueList, technologyUnderTest, ",
											"                                                        classUnderTest,",
											"                                                        attributeUnderTest",
											"                                                   );",
											"    } catch (error) {",
											"        CouldInputForFilteringMantisIssuesBeLoaded();",
											"    }",
											"",
											"    // Filtering the Mantis Issues for Technology and Class",
											"    try {",
											"        let technologyAndClassUnderTest = technologyUnderTest + \"-\" + classUnderTest;",
											"        var filteredIssueList = mantisIssueList;",
											"        for (let i=(filteredIssueList.length-1); i>=0; i--) {",
											"            let summary = filteredIssueList[i].summary;",
											"            let indexOfTwoColons = summary.indexOf(\"::\");",
											"            let technologyAndClass = summary.slice(0, indexOfTwoColons);",
											"            if (technologyAndClass!==technologyAndClassUnderTest){",
											"                filteredIssueList.splice(i,1);",
											"            } else {",
											"                if ( (datatypeUnderTest!==undefined) && (datatypeUnderTest!==\"\") ) {",
											"                    let indexOfSecondTwoColons = summary.indexOf(\"::\", indexOfTwoColons+1);",
											"                    let dataType = summary.slice(indexOfTwoColons+2, indexOfSecondTwoColons);",
											"                    if (dataType!==datatypeUnderTest){",
											"                        filteredIssueList.splice(i,1);",
											"                    } else {",
											"                        if ( (attributeUnderTest!==undefined) && (attributeUnderTest!==\"\") ) {",
											"                            let indexOfBlank = summary.indexOf(\" \");",
											"                            let attributeName = summary.slice(indexOfSecondTwoColons+2, indexOfBlank);",
											"                            if (attributeName!==attributeUnderTest){",
											"                                filteredIssueList.splice(i,1);",
											"                            }",
											"                        }",
											"                    }",
											"                } else {",
											"                    if ( (attributeUnderTest!==undefined) && (attributeUnderTest!==\"\") ) {",
											"                        let indexOfBlank = summary.indexOf(\" \");",
											"                        let attributeName = summary.slice(indexOfTwoColons+2, indexOfBlank);",
											"                        if (attributeName!==attributeUnderTest){",
											"                            filteredIssueList.splice(i,1);",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"        CouldMantisIssueListBeFiltered(filteredIssueList);",
											"    } catch (error) {",
											"        CouldMantisIssueListBeFiltered();",
											"    }",
											"    ",
											"    // Printing filtered Issues into the Console",
											"    try {",
											"        if ( filteredIssueList.length>0 ) {",
											"            console.log(\"Issues documented in Mantis:\");",
											"            for (let i=0; i<filteredIssueList.length; i++) {",
											"                let indexOfIssue = filteredIssueList[i].id;",
											"                let summary = filteredIssueList[i].summary;",
											"                let indexOfTwoColons = summary.indexOf(\"::\");",
											"                let attributeAndError = summary.slice(indexOfTwoColons+2);",
											"                let status = filteredIssueList[i].status;",
											"                console.log(\"#\" + indexOfIssue + \" : \" + attributeAndError + \" (\" + status + \")\");",
											"            }",
											"        }",
											"        CouldMantisIssueListBePrinted(true);",
											"    } catch (error) {",
											"        CouldMantisIssueListBePrinted(false);",
											"    }",
											"    ",
											"    // Provided Output Parameters",
											"    pm.variables.set(\"filteredIssueList\", filteredIssueList);",
											"    ",
											"    // Self Testing Functions",
											"    function CouldInputForFilteringMantisIssuesBeLoaded(mantisIssueList, technologyUnderTest, ",
											"                                                            classUnderTest,",
											"                                                            attributeUnderTest) {",
											"        pm.test(\"CouldInputForFilteringMantisIssuesBeLoaded\", function () {",
											"            pm.expect(mantisIssueList).to.be.an(\"array\");",
											"            pm.expect(technologyUnderTest).to.be.a(\"string\");",
											"            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(classUnderTest).to.be.a(\"string\");",
											"            pm.expect(classUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
											"        });",
											"    }",
											"    ",
											"    function CouldMantisIssueListBeFiltered(filteredIssueList) {",
											"        pm.test(\"CouldMantisIssueListBeFiltered\", function () {",
											"            pm.expect(filteredIssueList).to.be.an(\"array\");",
											"        });",
											"    }",
											"        ",
											"    function CouldMantisIssueListBePrinted(success) {",
											"        pm.test(\"CouldMantisIssueListBePrinted\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"};",
											"pm.environment.set( \"PrintMantisIssuesForTechnologyAndClass\", ",
											"                            PRINT_MANTIS_ISSUES_FOR_TECHNOLOGY_AND_CLASS.toString() );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											" * Self Testing Functions",
											" ****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SettingTheRequestVariables()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"\\n------------------Uploading Function for Setting the Request Variables--------------------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of SettingTheRequestVariables()",
											"* ",
											"* Function for composing and setting of the local variables for GET requests.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const SETTING_THE_REQUEST_VARIABLES = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
											"            ",
											"        var controller = pm.environment.get(\"controller\");",
											"        var dummyUri = pm.environment.get(\"dummyUri\");",
											"        var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
											"                    ",
											"        var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
											"        var pacUnderTest = pm.collectionVariables.get(\"pacUnderTest\");",
											"        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
											"        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
											"            ",
											"        var classUnderTest = pm.variables.get(\"classUnderTest\");",
											"        var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");",
											"        var keysOfDatatypeInstanceUnderTest = pm.variables.get(\"keysOfDatatypeInstanceUnderTest\");",
											"        var filteredContent = pm.variables.get(\"filteredContent\");",
											"        var filteredDepth = pm.variables.get(\"filteredDepth\");",
											"        var filteredFields = pm.variables.get(\"filteredFields\");",
											"        CouldInputForSettingTheRequestVariablesBeLoaded(attributeUnderTest,",
											"                                                            controller, ",
											"                                                            dummyUri,",
											"                                                            indexOfDeviceUnderTest, ",
											"                                                            indexOfLtpUnderTest,",
											"                                                            pacUnderTest,",
											"                                                            moduleUnderTest,",
											"                                                            technologyUnderTest,",
											"                                                            classUnderTest,",
											"                                                            datatypeUnderTest,",
											"                                                            keysOfDatatypeInstanceUnderTest,",
											"                                                            filteredContent,",
											"                                                            filteredDepth,",
											"                                                            filteredFields",
											"                                                        );",
											"    } catch (error) {",
											"        CouldInputForSettingTheRequestVariablesBeLoaded();",
											"    }",
											"        ",
											"    // Preparing the Request",
											"    try {",
											"        let nodeIds = controller.nodeList[indexOfDeviceUnderTest];",
											"        var idPair;",
											"        switch (technologyUnderTest) {",
											"            case \"air-interface\":",
											"                idPair = nodeIds.airInterfaceList[indexOfLtpUnderTest];",
											"                break;",
											"            case \"ethernet-container\":",
											"                idPair = nodeIds.ethernetContainerList[indexOfLtpUnderTest];",
											"                break;",
											"            case \"hybrid-mw-structure\":",
											"                idPair = nodeIds.hybridMwStructureList[indexOfLtpUnderTest];",
											"                break;",
											"            case \"ip-interface\":",
											"                idPair = nodeIds.ipInterfaceList[indexOfLtpUnderTest];",
											"                break;",
											"            case \"mac-interface\":",
											"                idPair = nodeIds.macInterfaceList[indexOfLtpUnderTest];",
											"                break;",
											"            case \"pure-ethernet-structure\":",
											"                idPair = nodeIds.pureEthernetStructureList[indexOfLtpUnderTest];",
											"                break;",
											"            case \"tdm-container\":",
											"                idPair = nodeIds.tdmContainerList[indexOfLtpUnderTest];",
											"                break;",
											"            case \"vlan-interface\":",
											"                idPair = nodeIds.vlanInterfaceList[indexOfLtpUnderTest];",
											"                break;",
											"            case \"wire-interface\":",
											"                idPair = nodeIds.wireInterfaceList[indexOfLtpUnderTest];",
											"                break;",
											"        }",
											"        CouldIdPairForSettingTheRequestVariablesBeRetrieved(attributeUnderTest, idPair);",
											"    } catch (error) {",
											"        CouldIdPairForSettingTheRequestVariablesBeRetrieved(attributeUnderTest);",
											"    }",
											"        ",
											"    try {",
											"        var objectUnderTest = \"/core-model-1-4:control-construct/logical-termination-point=\" ",
											"                                    + idPair.ltpUuid;",
											"        if (classUnderTest!==\"\") {",
											"            objectUnderTest = objectUnderTest",
											"                                    + \"/layer-protocol=\" ",
											"                                    + idPair.lpLid",
											"                                    + \"/\"",
											"                                    + pacUnderTest;",
											"        }",
											"        if ( (typeof technologyUnderTest!=\"undefined\") ",
											"                && (technologyUnderTest!==\"\")",
											"                && (classUnderTest!==\"\")",
											"                && (classUnderTest!==\"pac\") ) {",
											"            objectUnderTest = objectUnderTest",
											"                                    + \"/\"",
											"                                    + technologyUnderTest",
											"                                    + \"-\"",
											"                                    + classUnderTest;",
											"        }",
											"        if ( (typeof datatypeUnderTest!=\"undefined\") && (datatypeUnderTest !== \"\") ) {",
											"            objectUnderTest = objectUnderTest",
											"                                    + \"/\"",
											"                                    + datatypeUnderTest;",
											"        }",
											"        if ( (typeof keysOfDatatypeInstanceUnderTest[0].value!=\"undefined\") && (keysOfDatatypeInstanceUnderTest[0].value!==\"\") ) {",
											"            objectUnderTest = objectUnderTest",
											"                                    + \"=\"",
											"                                    + ReplaceColonsInside(keysOfDatatypeInstanceUnderTest[0].value);",
											"            for (let i=1; i<keysOfDatatypeInstanceUnderTest.length; i++) {",
											"                objectUnderTest = objectUnderTest",
											"                                    + \",\"",
											"                                    + ReplaceColonsInside(keysOfDatatypeInstanceUnderTest[i].value);",
											"            }",
											"        } ",
											"        if ( (typeof attributeUnderTest!=\"undefined\") && (attributeUnderTest !== \"\") ) {",
											"            objectUnderTest = objectUnderTest",
											"                                    + \"/\"",
											"                                    + attributeUnderTest;",
											"        }    ",
											"        let alreadySomeFilterAttached = false;",
											"        if ( (typeof filteredContent!=\"undefined\") ",
											"                && (typeof filteredDepth!=\"undefined\") ",
											"                && (typeof filteredFields!=\"undefined\") ) {",
											"            if (filteredContent !== \"\" || filteredDepth !== 0 || filteredFields !== \"\") {",
											"                objectUnderTest = objectUnderTest",
											"                                        + \"?\";",
											"            }",
											"            if (filteredContent !== \"\") {",
											"                objectUnderTest = objectUnderTest",
											"                                        + \"content=\"",
											"                                        + filteredContent;",
											"                alreadySomeFilterAttached = true;",
											"            }",
											"            if (filteredDepth !== 0) {",
											"                if (alreadySomeFilterAttached) {",
											"                     objectUnderTest = objectUnderTest",
											"                                        + \"&\";",
											"                }",
											"                objectUnderTest = objectUnderTest",
											"                                        + \"depth=\"",
											"                                        + filteredDepth;",
											"                alreadySomeFilterAttached = true;",
											"            }",
											"            if (filteredFields !== \"\") {",
											"                if (alreadySomeFilterAttached) {",
											"                     objectUnderTest = objectUnderTest",
											"                                        + \"&\";",
											"                }",
											"                objectUnderTest = objectUnderTest",
											"                                        + \"fields=\"",
											"                                        + filteredFields;",
											"                alreadySomeFilterAttached = true;",
											"            }",
											"        }",
											"        HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(attributeUnderTest, objectUnderTest);",
											"    } catch (error) {",
											"        HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(attributeUnderTest);",
											"    }",
											"        ",
											"    try {",
											"        var uri = \"http://\" ",
											"                    + controller.controllerAddress ",
											"                    + controller.pathToDbAndMountPoint ",
											"                    + \"/node=\" ",
											"                    + controller.nodeList[indexOfDeviceUnderTest].nodeId ",
											"                    + \"/yang-ext:mount\" ",
											"                    + objectUnderTest;",
											"        HasUriBeenDefinedForSettingTheRequestVariables(attributeUnderTest, uri);",
											"    } catch (error) {",
											"",
											"    console.log(\"Jetzt kriegt er die Adrese nich hin\")",
											"        uri = dummyUri;",
											"        HasUriBeenDefinedForSettingTheRequestVariables(attributeUnderTest);",
											"    }",
											"        ",
											"    pm.variables.set(\"uri\", uri);",
											"    pm.request.headers.upsert({key:\"Authorization\", value:controller.authorizationCode});",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"    pm.request.headers.upsert({key:\"Content-Type\", value:\"application/json\"});    ",
											"    //pm.collectionVariables.set(\"requestUri\", uri);",
											"    pm.variables.set(\"requestUri\", uri);",
											"",
											"    // Functions",
											"    function ReplaceColonsInside(keyAttributeValue) {",
											"        return encodeURIComponent(keyAttributeValue);",
											"    }",
											"",
											"    // Self Testing Functions",
											"    function CouldInputForSettingTheRequestVariablesBeLoaded(attributeUnderTest,",
											"                                                                controller, ",
											"                                                                uri,",
											"                                                                indexOfDeviceUnderTest, ",
											"                                                                indexOfLtpUnderTest,",
											"                                                                pacUnderTest,",
											"                                                                moduleUnderTest,",
											"                                                                technologyUnderTest,",
											"                                                                classUnderTest,",
											"                                                                datatypeUnderTest,",
											"                                                                keysOfDatatypeInstanceUnderTest,",
											"                                                                filteredContent,",
											"                                                                filteredDepth,",
											"                                                                filteredFields) {",
											"        pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
											"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldControllerBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(controller).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldUriBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(uri).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldIndexOfDeviceUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"CouldIndexOfLtpUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"CouldPacUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(pacUnderTest).to.be.a(\"string\");",
											"            pm.expect(pacUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldModuleUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(moduleUnderTest).to.be.a(\"string\");",
											"            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldTechnologyUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(technologyUnderTest).to.be.a(\"string\");",
											"            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldClassUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(classUnderTest).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldDatatypeUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(datatypeUnderTest).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldKeysOfDatatypeInstanceUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(keysOfDatatypeInstanceUnderTest).to.be.an(\"array\");",
											"        });",
											"        pm.test(\"CouldFilteredContentBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(filteredContent).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldFilteredDepthBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(filteredDepth).to.be.a(\"number\");",
											"            pm.expect(filteredFields).to.be.a(\"string\");",
											"        });",
											"    }",
											"        ",
											"    function CouldIdPairForSettingTheRequestVariablesBeRetrieved(location, idPair) {",
											"        pm.test(\"CouldIdPairForSettingTheRequestVariablesBeRetrieved (\" + location + \")\", function () {",
											"            pm.expect(idPair.ltpUuid).to.be.a(\"string\");",
											"            pm.expect(idPair.ltpUuid).to.not.have.lengthOf(0);",
											"            pm.expect(idPair.lpLid).to.be.an(\"string\");",
											"            pm.expect(idPair.lpLid).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"    ",
											"    function HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(location, objectUnderTest) {",
											"        pm.test(\"HasObjectUnderTestBeenDefinedForSettingTheRequestVariables (\" + location + \")\", function () {",
											"            pm.expect(objectUnderTest).to.be.a(\"string\");",
											"            pm.expect(objectUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"    ",
											"    function HasUriBeenDefinedForSettingTheRequestVariables(location, uri) {",
											"        pm.test(\"HasUriBeenDefinedForSettingTheRequestVariables (\" + location + \")\", function () {",
											"            pm.expect(uri).to.be.a(\"string\");",
											"            pm.expect(uri).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"};",
											"pm.environment.set( \"SettingTheRequestVariables\", SETTING_THE_REQUEST_VARIABLES.toString() );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											" ",
											"/****************************************************************************************",
											" * Self Testing Functions",
											" ****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SettingTheFdRequestVariables()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"\\n----------------Uploading Function for Setting the FD Request Variables-------------------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of SettingTheFdRequestVariables()",
											"* ",
											"* Function for composing and setting of the local variables for GET requests.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const SETTING_THE_FD_REQUEST_VARIABLES = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
											"            ",
											"        var controller = pm.environment.get(\"controller\");",
											"        var dummyUri = pm.environment.get(\"dummyUri\");",
											"        var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
											"            ",
											"        var indexOfFdUnderTest = pm.collectionVariables.get(\"indexOfFdUnderTest\");",
											"        var pacUnderTest = pm.collectionVariables.get(\"pacUnderTest\");",
											"        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
											"        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
											"            ",
											"        var classUnderTest = pm.variables.get(\"classUnderTest\");",
											"        var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");",
											"        var keysOfDatatypeInstanceUnderTest = pm.variables.get(\"keysOfDatatypeInstanceUnderTest\");",
											"        var filteredContent = pm.variables.get(\"filteredContent\");",
											"        var filteredDepth = pm.variables.get(\"filteredDepth\");",
											"        var filteredFields = pm.variables.get(\"filteredFields\");",
											"        CouldInputForSettingTheRequestVariablesBeLoaded(attributeUnderTest,",
											"                                                            controller, ",
											"                                                            dummyUri,",
											"                                                            indexOfDeviceUnderTest, ",
											"                                                            indexOfFdUnderTest,",
											"                                                            pacUnderTest,",
											"                                                            moduleUnderTest,",
											"                                                            technologyUnderTest,",
											"                                                            classUnderTest,",
											"                                                            datatypeUnderTest,",
											"                                                            keysOfDatatypeInstanceUnderTest,",
											"                                                            filteredContent,",
											"                                                            filteredDepth,",
											"                                                            filteredFields",
											"                                                        );",
											"    } catch (error) {",
											"        CouldInputForSettingTheRequestVariablesBeLoaded();",
											"    }",
											"",
											"    // Preparing the Request",
											"    try {",
											"        let nodeIds = controller.nodeList[indexOfDeviceUnderTest];",
											"        var idPair;",
											"        switch (technologyUnderTest) {",
											"            case \"ethernet-container-fd\":",
											"                idPair = nodeIds.ethernetContainerFdList[indexOfFdUnderTest];",
											"                break;",
											"            case \"mac-fd\":",
											"                idPair = nodeIds.macFdList[indexOfFdUnderTest];",
											"                break;",
											"            case \"tdm-container-fd\":",
											"                idPair = nodeIds.tdmContainerFdList[indexOfFdUnderTest];",
											"                break;",
											"            case \"vlan-fd\":",
											"                idPair = nodeIds.vlanFdList[indexOfFdUnderTest];",
											"                break;",
											"        }",
											"        CouldIdPairForSettingTheRequestVariablesBeRetrieved(attributeUnderTest, idPair);",
											"    } catch (error) {",
											"        CouldIdPairForSettingTheRequestVariablesBeRetrieved(attributeUnderTest);",
											"    }",
											"        ",
											"    try {",
											"        var objectUnderTest = \"/core-model-1-4:control-construct/forwarding-domain=\" ",
											"                                    + idPair.ltpUuid;",
											"        if (classUnderTest!==\"\") {",
											"            objectUnderTest = objectUnderTest",
											"                                    + \"/\"",
											"                                    + pacUnderTest;",
											"        }",
											"        if ( (typeof technologyUnderTest!=\"undefined\") ",
											"                && (technologyUnderTest!==\"\")",
											"                && (classUnderTest!==\"\")",
											"                && (classUnderTest!==\"pac\") ) {",
											"            objectUnderTest = objectUnderTest",
											"                                    + \"/\"",
											"                                    + technologyUnderTest",
											"                                    + \"-\"",
											"                                    + classUnderTest;",
											"        }",
											"        if ( (typeof datatypeUnderTest!=\"undefined\") && (datatypeUnderTest !== \"\") ) {",
											"            objectUnderTest = objectUnderTest",
											"                                    + \"/\"",
											"                                    + datatypeUnderTest;",
											"        }",
											"        if ( (typeof keysOfDatatypeInstanceUnderTest[0].value!=\"undefined\") && (keysOfDatatypeInstanceUnderTest[0].value!==\"\") ) {",
											"            objectUnderTest = objectUnderTest",
											"                                    + \"=\"",
											"                                    + ReplaceColonsInside(keysOfDatatypeInstanceUnderTest[0].value);",
											"            for (let i=1; i<keysOfDatatypeInstanceUnderTest.length; i++) {",
											"                objectUnderTest = objectUnderTest",
											"                                    + \",\"",
											"                                    + ReplaceColonsInside(keysOfDatatypeInstanceUnderTest[i].value);",
											"            }",
											"        } ",
											"        if ( (typeof attributeUnderTest!=\"undefined\") && (attributeUnderTest !== \"\") ) {",
											"            objectUnderTest = objectUnderTest",
											"                                    + \"/\"",
											"                                    + attributeUnderTest;",
											"        }    ",
											"        let alreadySomeFilterAttached = false;",
											"        if ( (typeof filteredContent!=\"undefined\") ",
											"                && (typeof filteredDepth!=\"undefined\") ",
											"                && (typeof filteredFields!=\"undefined\") ) {",
											"            if (filteredContent !== \"\" || filteredDepth !== 0 || filteredFields !== \"\") {",
											"                objectUnderTest = objectUnderTest",
											"                                        + \"?\";",
											"            }",
											"            if (filteredContent !== \"\") {",
											"                objectUnderTest = objectUnderTest",
											"                                        + \"content=\"",
											"                                        + filteredContent;",
											"                alreadySomeFilterAttached = true;",
											"            }",
											"            if (filteredDepth !== 0) {",
											"                if (alreadySomeFilterAttached) {",
											"                     objectUnderTest = objectUnderTest",
											"                                        + \"&\";",
											"                }",
											"                objectUnderTest = objectUnderTest",
											"                                        + \"depth=\"",
											"                                        + filteredDepth;",
											"                alreadySomeFilterAttached = true;",
											"            }",
											"            if (filteredFields !== \"\") {",
											"                if (alreadySomeFilterAttached) {",
											"                     objectUnderTest = objectUnderTest",
											"                                        + \"&\";",
											"                }",
											"                objectUnderTest = objectUnderTest",
											"                                        + \"fields=\"",
											"                                        + filteredFields;",
											"                alreadySomeFilterAttached = true;",
											"            }",
											"        }",
											"        HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(attributeUnderTest, objectUnderTest);",
											"    } catch (error) {",
											"        HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(attributeUnderTest);",
											"    }",
											"        ",
											"    try {",
											"        var uri = \"http://\" ",
											"                    + controller.controllerAddress ",
											"                    + controller.pathToDbAndMountPoint ",
											"                    + \"/node=\" ",
											"                    + controller.nodeList[indexOfDeviceUnderTest].nodeId ",
											"                    + \"/yang-ext:mount\" ",
											"                    + objectUnderTest;",
											"        HasUriBeenDefinedForSettingTheRequestVariables(attributeUnderTest, uri);",
											"    } catch (error) {",
											"        uri = dummyUri;",
											"        HasUriBeenDefinedForSettingTheRequestVariables(attributeUnderTest);",
											"    }",
											"        ",
											"    pm.variables.set(\"uri\", uri);",
											"    pm.request.headers.upsert({key:\"Authorization\", value:controller.authorizationCode});",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"    pm.request.headers.upsert({key:\"Content-Type\", value:\"application/json\"});",
											"        ",
											"    // Functions",
											"    function ReplaceColonsInside(keyAttributeValue) {",
											"        return encodeURIComponent(keyAttributeValue);",
											"    }",
											"",
											"    // Self Testing Functions",
											"    function CouldInputForSettingTheRequestVariablesBeLoaded(attributeUnderTest,",
											"                                                                controller, ",
											"                                                                uri,",
											"                                                                indexOfDeviceUnderTest, ",
											"                                                                indexOfFdUnderTest,",
											"                                                                pacUnderTest,",
											"                                                                moduleUnderTest,",
											"                                                                technologyUnderTest,",
											"                                                                classUnderTest,",
											"                                                                datatypeUnderTest,",
											"                                                                keysOfDatatypeInstanceUnderTest,",
											"                                                                filteredContent,",
											"                                                                filteredDepth,",
											"                                                                filteredFields) {",
											"        pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
											"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldInputForSettingTheRequestVariablesBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(controller).to.be.an(\"object\");",
											"            pm.expect(uri).to.be.a(\"string\");",
											"            pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
											"            pm.expect(indexOfFdUnderTest).to.be.a(\"number\");",
											"            pm.expect(pacUnderTest).to.be.a(\"string\");",
											"            pm.expect(pacUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(moduleUnderTest).to.be.a(\"string\");",
											"            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(technologyUnderTest).to.be.a(\"string\");",
											"            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(classUnderTest).to.be.a(\"string\");",
											"            pm.expect(datatypeUnderTest).to.be.a(\"string\");",
											"            pm.expect(keysOfDatatypeInstanceUnderTest).to.be.an(\"array\");",
											"            pm.expect(filteredContent).to.be.a(\"string\");",
											"            pm.expect(filteredDepth).to.be.a(\"number\");",
											"            pm.expect(filteredFields).to.be.a(\"string\");",
											"        });",
											"    }",
											"        ",
											"    function CouldIdPairForSettingTheRequestVariablesBeRetrieved(location, idPair) {",
											"        pm.test(\"CouldIdPairForSettingTheRequestVariablesBeRetrieved (\" + location + \")\", function () {",
											"            pm.expect(idPair.ltpUuid).to.be.a(\"string\");",
											"            pm.expect(idPair.ltpUuid).to.not.have.lengthOf(0);",
											"            pm.expect(idPair.lpLid).to.be.an(\"string\");",
											"        });",
											"    }",
											"    ",
											"    function HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(location, objectUnderTest) {",
											"        pm.test(\"HasObjectUnderTestBeenDefinedForSettingTheRequestVariables (\" + location + \")\", function () {",
											"            pm.expect(objectUnderTest).to.be.a(\"string\");",
											"            pm.expect(objectUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"    ",
											"    function HasUriBeenDefinedForSettingTheRequestVariables(location, uri) {",
											"        pm.test(\"HasUriBeenDefinedForSettingTheRequestVariables (\" + location + \")\", function () {",
											"            pm.expect(uri).to.be.a(\"string\");",
											"            pm.expect(uri).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"};",
											"pm.environment.set( \"SettingTheFdRequestVariables\", SETTING_THE_FD_REQUEST_VARIABLES.toString() );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											" ",
											"/****************************************************************************************",
											" * Self Testing Functions",
											" ****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SettingTheFcRequestVariables()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"\\n----------------Uploading Function for Setting the FC Request Variables-------------------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of SettingTheFcRequestVariables()",
											"* ",
											"* Function for composing and setting of the local variables for GET requests.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const SETTING_THE_FC_REQUEST_VARIABLES = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
											"            ",
											"        var controller = pm.environment.get(\"controller\");",
											"        var dummyUri = pm.environment.get(\"dummyUri\");",
											"        var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
											"            ",
											"        var indexOfFcUnderTest = pm.collectionVariables.get(\"indexOfFcUnderTest\");",
											"        var pacUnderTest = pm.collectionVariables.get(\"pacUnderTest\");",
											"        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
											"        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
											"            ",
											"        var classUnderTest = pm.variables.get(\"classUnderTest\");",
											"        var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");",
											"        var keysOfDatatypeInstanceUnderTest = pm.variables.get(\"keysOfDatatypeInstanceUnderTest\");",
											"        var filteredContent = pm.variables.get(\"filteredContent\");",
											"        var filteredDepth = pm.variables.get(\"filteredDepth\");",
											"        var filteredFields = pm.variables.get(\"filteredFields\");",
											"        CouldInputForSettingTheRequestVariablesBeLoaded(attributeUnderTest,",
											"                                                            controller, ",
											"                                                            dummyUri,",
											"                                                            indexOfDeviceUnderTest, ",
											"                                                            indexOfFcUnderTest,",
											"                                                            pacUnderTest,",
											"                                                            moduleUnderTest,",
											"                                                            technologyUnderTest,",
											"                                                            classUnderTest,",
											"                                                            datatypeUnderTest,",
											"                                                            keysOfDatatypeInstanceUnderTest,",
											"                                                            filteredContent,",
											"                                                            filteredDepth,",
											"                                                            filteredFields",
											"                                                        );",
											"    } catch (error) {",
											"        CouldInputForSettingTheRequestVariablesBeLoaded();",
											"    }",
											"",
											"    // Preparing the Request",
											"    try {",
											"        let nodeIds = controller.nodeList[indexOfDeviceUnderTest];",
											"        var idPair;",
											"        switch (technologyUnderTest) {",
											"            case \"ethernet-container-fc\":",
											"                idPair = nodeIds.ethernetContainerFcList[indexOfFcUnderTest];",
											"                break;",
											"            case \"tdm-container-fc\":",
											"                idPair = nodeIds.tdmContainerFcList[indexOfFcUnderTest];",
											"                break;",
											"            case \"vlan-fc\":",
											"                idPair = nodeIds.vlanFcList[indexOfFcUnderTest];",
											"                break;",
											"        }",
											"        CouldIdPairForSettingTheRequestVariablesBeRetrieved(attributeUnderTest, idPair);",
											"    } catch (error) {",
											"        CouldIdPairForSettingTheRequestVariablesBeRetrieved(attributeUnderTest);",
											"    }",
											"        ",
											"    try {",
											"        var objectUnderTest = \"/core-model-1-4:control-construct/forwarding-domain=\" ",
											"                                    + idPair.ltpUuid",
											"                                    + \"/fc=\" ",
											"                                    + idPair.lpLid",
											"        if (classUnderTest!==\"\") {",
											"            objectUnderTest = objectUnderTest",
											"                                    + \"/\"",
											"                                    + pacUnderTest;",
											"        }",
											"        if ( (typeof technologyUnderTest!=\"undefined\") ",
											"                && (technologyUnderTest!==\"\")",
											"                && (classUnderTest!==\"\")",
											"                && (classUnderTest!==\"pac\") ) {",
											"            objectUnderTest = objectUnderTest",
											"                                    + \"/\"",
											"                                    + technologyUnderTest",
											"                                    + \"-\"",
											"                                    + classUnderTest;",
											"        }",
											"        if ( (typeof datatypeUnderTest!=\"undefined\") && (datatypeUnderTest !== \"\") ) {",
											"            objectUnderTest = objectUnderTest",
											"                                    + \"/\"",
											"                                    + datatypeUnderTest;",
											"        }",
											"        if ( (typeof keysOfDatatypeInstanceUnderTest[0].value!=\"undefined\") && (keysOfDatatypeInstanceUnderTest[0].value!==\"\") ) {",
											"            objectUnderTest = objectUnderTest",
											"                                    + \"=\"",
											"                                    + ReplaceColonsInside(keysOfDatatypeInstanceUnderTest[0].value);",
											"            for (let i=1; i<keysOfDatatypeInstanceUnderTest.length; i++) {",
											"                objectUnderTest = objectUnderTest",
											"                                    + \",\"",
											"                                    + ReplaceColonsInside(keysOfDatatypeInstanceUnderTest[i].value);",
											"            }",
											"        } ",
											"        if ( (typeof attributeUnderTest!=\"undefined\") && (attributeUnderTest !== \"\") ) {",
											"            objectUnderTest = objectUnderTest",
											"                                    + \"/\"",
											"                                    + attributeUnderTest;",
											"        }    ",
											"        let alreadySomeFilterAttached = false;",
											"        if ( (typeof filteredContent!=\"undefined\") ",
											"                && (typeof filteredDepth!=\"undefined\") ",
											"                && (typeof filteredFields!=\"undefined\") ) {",
											"            if (filteredContent !== \"\" || filteredDepth !== 0 || filteredFields !== \"\") {",
											"                objectUnderTest = objectUnderTest",
											"                                        + \"?\";",
											"            }",
											"            if (filteredContent !== \"\") {",
											"                objectUnderTest = objectUnderTest",
											"                                        + \"content=\"",
											"                                        + filteredContent;",
											"                alreadySomeFilterAttached = true;",
											"            }",
											"            if (filteredDepth !== 0) {",
											"                if (alreadySomeFilterAttached) {",
											"                     objectUnderTest = objectUnderTest",
											"                                        + \"&\";",
											"                }",
											"                objectUnderTest = objectUnderTest",
											"                                        + \"depth=\"",
											"                                        + filteredDepth;",
											"                alreadySomeFilterAttached = true;",
											"            }",
											"            if (filteredFields !== \"\") {",
											"                if (alreadySomeFilterAttached) {",
											"                     objectUnderTest = objectUnderTest",
											"                                        + \"&\";",
											"                }",
											"                objectUnderTest = objectUnderTest",
											"                                        + \"fields=\"",
											"                                        + filteredFields;",
											"                alreadySomeFilterAttached = true;",
											"            }",
											"        }",
											"        HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(attributeUnderTest, objectUnderTest);",
											"    } catch (error) {",
											"        HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(attributeUnderTest);",
											"    }",
											"        ",
											"    try {",
											"        var uri = \"http://\" ",
											"                    + controller.controllerAddress ",
											"                    + controller.pathToDbAndMountPoint ",
											"                    + \"/node=\" ",
											"                    + controller.nodeList[indexOfDeviceUnderTest].nodeId ",
											"                    + \"/yang-ext:mount\" ",
											"                    + objectUnderTest;",
											"        HasUriBeenDefinedForSettingTheRequestVariables(attributeUnderTest, uri);",
											"    } catch (error) {",
											"        uri = dummyUri;",
											"        HasUriBeenDefinedForSettingTheRequestVariables(attributeUnderTest);",
											"    }",
											"",
											"    pm.variables.set(\"uri\", uri);",
											"    pm.request.headers.upsert({key:\"Authorization\", value:controller.authorizationCode});",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"    pm.request.headers.upsert({key:\"Content-Type\", value:\"application/json\"});",
											"        ",
											"    // Functions",
											"    function ReplaceColonsInside(keyAttributeValue) {",
											"        return encodeURIComponent(keyAttributeValue);",
											"    }",
											"",
											"    // Self Testing Functions",
											"    function CouldInputForSettingTheRequestVariablesBeLoaded(attributeUnderTest,",
											"                                                                controller, ",
											"                                                                uri,",
											"                                                                indexOfDeviceUnderTest, ",
											"                                                                indexOfFcUnderTest,",
											"                                                                pacUnderTest,",
											"                                                                moduleUnderTest,",
											"                                                                technologyUnderTest,",
											"                                                                classUnderTest,",
											"                                                                datatypeUnderTest,",
											"                                                                keysOfDatatypeInstanceUnderTest,",
											"                                                                filteredContent,",
											"                                                                filteredDepth,",
											"                                                                filteredFields) {",
											"        pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
											"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldInputForSettingTheRequestVariablesBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(controller).to.be.an(\"object\");",
											"            pm.expect(uri).to.be.a(\"string\");",
											"            pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
											"            pm.expect(indexOfFcUnderTest).to.be.a(\"number\");",
											"            pm.expect(pacUnderTest).to.be.a(\"string\");",
											"            pm.expect(pacUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(moduleUnderTest).to.be.a(\"string\");",
											"            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(technologyUnderTest).to.be.a(\"string\");",
											"            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(classUnderTest).to.be.a(\"string\");",
											"            pm.expect(datatypeUnderTest).to.be.a(\"string\");",
											"            pm.expect(keysOfDatatypeInstanceUnderTest).to.be.an(\"array\");",
											"            pm.expect(filteredContent).to.be.a(\"string\");",
											"            pm.expect(filteredDepth).to.be.a(\"number\");",
											"            pm.expect(filteredFields).to.be.a(\"string\");",
											"        });",
											"    }",
											"        ",
											"    function CouldIdPairForSettingTheRequestVariablesBeRetrieved(location, idPair) {",
											"        pm.test(\"CouldIdPairForSettingTheRequestVariablesBeRetrieved (\" + location + \")\", function () {",
											"            pm.expect(idPair.ltpUuid).to.be.a(\"string\");",
											"            pm.expect(idPair.ltpUuid).to.not.have.lengthOf(0);",
											"            pm.expect(idPair.lpLid).to.be.an(\"string\");",
											"            pm.expect(idPair.lpLid).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"    ",
											"    function HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(location, objectUnderTest) {",
											"        pm.test(\"HasObjectUnderTestBeenDefinedForSettingTheRequestVariables (\" + location + \")\", function () {",
											"            pm.expect(objectUnderTest).to.be.a(\"string\");",
											"            pm.expect(objectUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"    ",
											"    function HasUriBeenDefinedForSettingTheRequestVariables(location, uri) {",
											"        pm.test(\"HasUriBeenDefinedForSettingTheRequestVariables (\" + location + \")\", function () {",
											"            pm.expect(uri).to.be.a(\"string\");",
											"            pm.expect(uri).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"};",
											"pm.environment.set( \"SettingTheFcRequestVariables\", SETTING_THE_FC_REQUEST_VARIABLES.toString() );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											" ",
											"/****************************************************************************************",
											" * Self Testing Functions",
											" ****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SettingTheProfileRequestVariables()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"\\n--------------Uploading Function for Setting the Profile Request Variables----------------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of SettingTheProfileRequestVariables()",
											"* ",
											"* Function for composing and setting of the local variables for GET requests.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const SETTING_THE_PROFILE_REQUEST_VARIABLES = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
											"            ",
											"        var controller = pm.environment.get(\"controller\");",
											"        var dummyUri = pm.environment.get(\"dummyUri\");",
											"        var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
											"            ",
											"        var indexOfProfileUnderTest = pm.collectionVariables.get(\"indexOfProfileUnderTest\");",
											"        var pacUnderTest = pm.collectionVariables.get(\"pacUnderTest\");",
											"        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
											"        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
											"            ",
											"        var classUnderTest = pm.variables.get(\"classUnderTest\");",
											"        var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");",
											"        var keysOfDatatypeInstanceUnderTest = pm.variables.get(\"keysOfDatatypeInstanceUnderTest\");",
											"        var filteredContent = pm.variables.get(\"filteredContent\");",
											"        var filteredDepth = pm.variables.get(\"filteredDepth\");",
											"        var filteredFields = pm.variables.get(\"filteredFields\");",
											"        CouldInputForSettingTheRequestVariablesBeLoaded(attributeUnderTest,",
											"                                                            controller, ",
											"                                                            dummyUri,",
											"                                                            indexOfDeviceUnderTest, ",
											"                                                            indexOfProfileUnderTest,",
											"                                                            pacUnderTest,",
											"                                                            moduleUnderTest,",
											"                                                            technologyUnderTest,",
											"                                                            classUnderTest,",
											"                                                            datatypeUnderTest,",
											"                                                            keysOfDatatypeInstanceUnderTest,",
											"                                                            filteredContent,",
											"                                                            filteredDepth,",
											"                                                            filteredFields",
											"                                                        );",
											"    } catch (error) {",
											"        CouldInputForSettingTheRequestVariablesBeLoaded();",
											"    }",
											"        ",
											"    // Preparing the Request",
											"    try {",
											"        let nodeIds = controller.nodeList[indexOfDeviceUnderTest];",
											"        var idPair;",
											"        switch (technologyUnderTest) {",
											"            case \"co-channel-profile\":",
											"                idPair = nodeIds.coChannelProfileList[indexOfProfileUnderTest];",
											"                break;",
											"            case \"l3vpn-profile\":",
											"                idPair = nodeIds.l3vpnProfileList[indexOfProfileUnderTest];",
											"                break;",
											"            case \"qos-profile\":",
											"                idPair = nodeIds.qosProfileList[indexOfProfileUnderTest];",
											"                break;",
											"            case \"wred-profile\":",
											"                idPair = nodeIds.wredProfileList[indexOfProfileUnderTest];",
											"                break;",
											"        }",
											"        CouldIdPairForSettingTheRequestVariablesBeRetrieved(attributeUnderTest, idPair);",
											"    } catch (error) {",
											"        CouldIdPairForSettingTheRequestVariablesBeRetrieved(attributeUnderTest);",
											"    }",
											"        ",
											"    try {",
											"        var objectUnderTest = \"/core-model-1-4:control-construct/profile-collection/profile=\" ",
											"                                    + idPair.ltpUuid",
											"                                    + \"/\"",
											"                                    + pacUnderTest;",
											"        if ( (typeof technologyUnderTest!=\"undefined\") ",
											"                && (technologyUnderTest!==\"\")",
											"                && (classUnderTest!==\"pac\") ) {",
											"            objectUnderTest = objectUnderTest",
											"                                    + \"/\"",
											"                                    + technologyUnderTest",
											"                                    + \"-\"",
											"                                    + classUnderTest;",
											"        }",
											"        if ( (typeof datatypeUnderTest!=\"undefined\") && (datatypeUnderTest !== \"\") ) {",
											"            objectUnderTest = objectUnderTest",
											"                                    + \"/\"",
											"                                    + datatypeUnderTest;",
											"        }",
											"        if ( (typeof keysOfDatatypeInstanceUnderTest[0].value!=\"undefined\") && (keysOfDatatypeInstanceUnderTest[0].value!==\"\") ) {",
											"            objectUnderTest = objectUnderTest",
											"                                    + \"=\"",
											"                                    + ReplaceColonsInside(keysOfDatatypeInstanceUnderTest[0].value);",
											"            for (let i=1; i<keysOfDatatypeInstanceUnderTest.length; i++) {",
											"                objectUnderTest = objectUnderTest",
											"                                    + \",\"",
											"                                    + ReplaceColonsInside(keysOfDatatypeInstanceUnderTest[i].value);",
											"            }",
											"        } ",
											"        if ( (typeof attributeUnderTest!=\"undefined\") && (attributeUnderTest !== \"\") ) {",
											"            objectUnderTest = objectUnderTest",
											"                                    + \"/\"",
											"                                    + attributeUnderTest;",
											"        }    ",
											"        let alreadySomeFilterAttached = false;",
											"        if ( (typeof filteredContent!=\"undefined\") ",
											"                && (typeof filteredDepth!=\"undefined\") ",
											"                && (typeof filteredFields!=\"undefined\") ) {",
											"            if (filteredContent !== \"\" || filteredDepth !== 0 || filteredFields !== \"\") {",
											"                objectUnderTest = objectUnderTest",
											"                                        + \"?\";",
											"            }",
											"            if (filteredContent !== \"\") {",
											"                objectUnderTest = objectUnderTest",
											"                                        + \"content=\"",
											"                                        + filteredContent;",
											"                alreadySomeFilterAttached = true;",
											"            }",
											"            if (filteredDepth !== 0) {",
											"                if (alreadySomeFilterAttached) {",
											"                     objectUnderTest = objectUnderTest",
											"                                        + \"&\";",
											"                }",
											"                objectUnderTest = objectUnderTest",
											"                                        + \"depth=\"",
											"                                        + filteredDepth;",
											"                alreadySomeFilterAttached = true;",
											"            }",
											"            if (filteredFields !== \"\") {",
											"                if (alreadySomeFilterAttached) {",
											"                     objectUnderTest = objectUnderTest",
											"                                        + \"&\";",
											"                }",
											"                objectUnderTest = objectUnderTest",
											"                                        + \"fields=\"",
											"                                        + filteredFields;",
											"                alreadySomeFilterAttached = true;",
											"            }",
											"        }",
											"        HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(attributeUnderTest, objectUnderTest);",
											"    } catch (error) {",
											"        HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(attributeUnderTest);",
											"    }",
											"        ",
											"    try {",
											"        var uri = \"http://\" ",
											"                    + controller.controllerAddress ",
											"                    + controller.pathToDbAndMountPoint ",
											"                    + \"/node=\" ",
											"                    + controller.nodeList[indexOfDeviceUnderTest].nodeId ",
											"                    + \"/yang-ext:mount\" ",
											"                    + objectUnderTest;",
											"        HasUriBeenDefinedForSettingTheRequestVariables(attributeUnderTest, uri);",
											"    } catch (error) {",
											"        uri = dummyUri;",
											"        HasUriBeenDefinedForSettingTheRequestVariables(attributeUnderTest);",
											"    }",
											"        ",
											"    pm.variables.set(\"uri\", uri);",
											"    pm.request.headers.upsert({key:\"Authorization\", value:controller.authorizationCode});",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"    pm.request.headers.upsert({key:\"Content-Type\", value:\"application/json\"});",
											"        ",
											"    // Functions",
											"    function ReplaceColonsInside(keyAttributeValue) {",
											"        return encodeURIComponent(keyAttributeValue);",
											"    }",
											"",
											"    // Self Testing Functions",
											"    function CouldInputForSettingTheRequestVariablesBeLoaded(attributeUnderTest,",
											"                                                                controller, ",
											"                                                                uri,",
											"                                                                indexOfDeviceUnderTest, ",
											"                                                                indexOfProfileUnderTest,",
											"                                                                pacUnderTest,",
											"                                                                moduleUnderTest,",
											"                                                                technologyUnderTest,",
											"                                                                classUnderTest,",
											"                                                                datatypeUnderTest,",
											"                                                                keysOfDatatypeInstanceUnderTest,",
											"                                                                filteredContent,",
											"                                                                filteredDepth,",
											"                                                                filteredFields) {",
											"        pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
											"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldWRONGInputForSettingTheRequestVariablesBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(controller).to.be.an(\"object\");",
											"            pm.expect(uri).to.be.a(\"string\");",
											"            pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
											"            pm.expect(indexOfProfileUnderTest).to.be.a(\"number\");",
											"            pm.expect(pacUnderTest).to.be.a(\"string\");",
											"            pm.expect(pacUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(moduleUnderTest).to.be.a(\"string\");",
											"            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(technologyUnderTest).to.be.a(\"string\");",
											"            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(classUnderTest).to.be.a(\"string\");",
											"            pm.expect(classUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(datatypeUnderTest).to.be.a(\"string\");",
											"            pm.expect(keysOfDatatypeInstanceUnderTest).to.be.an(\"array\");",
											"            pm.expect(filteredContent).to.be.a(\"string\");",
											"            pm.expect(filteredDepth).to.be.a(\"number\");",
											"            pm.expect(filteredFields).to.be.a(\"string\");",
											"        });",
											"    }",
											"        ",
											"    function CouldIdPairForSettingTheRequestVariablesBeRetrieved(location, idPair) {",
											"        pm.test(\"CouldIdPairForSettingTheRequestVariablesBeRetrieved (\" + location + \")\", function () {",
											"            pm.expect(idPair.ltpUuid).to.be.a(\"string\");",
											"            pm.expect(idPair.ltpUuid).to.not.have.lengthOf(0);",
											"            pm.expect(idPair.lpLid).to.be.an(\"string\");",
											"        });",
											"    }",
											"    ",
											"    function HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(location, objectUnderTest) {",
											"        pm.test(\"HasObjectUnderTestBeenDefinedForSettingTheRequestVariables (\" + location + \")\", function () {",
											"            pm.expect(objectUnderTest).to.be.a(\"string\");",
											"            pm.expect(objectUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"    ",
											"    function HasUriBeenDefinedForSettingTheRequestVariables(location, uri) {",
											"        pm.test(\"HasUriBeenDefinedForSettingTheRequestVariables (\" + location + \")\", function () {",
											"            pm.expect(uri).to.be.a(\"string\");",
											"            pm.expect(uri).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"};",
											"pm.environment.set( \"SettingTheProfileRequestVariables\", SETTING_THE_PROFILE_REQUEST_VARIABLES.toString() );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											" ",
											"/****************************************************************************************",
											" * Self Testing Functions",
											" ****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateErrorRersults",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"\\n----------------Function for Updating Error Results--------------------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of UpdateErrorRersults()",
											"* ",
											"* Function to update error results from the list of test cases",
											"* ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"/****************************************************************************************",
											"* Provided Variables ",
											"****************************************************************************************/",
											"const UPDATE_ERROR_RESULTS = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var validationErrorResults = pm.environment.get(\"validationErrorResults\");",
											"        var validationReport = pm.environment.get(\"validationReport\");",
											"        var controller = pm.environment.get(\"controller\");",
											"        var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
											"        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
											"        var classUnderTest = pm.variables.get(\"classUnderTest\");",
											"        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
											"        var requestBody = pm.variables.get(\"requestBod\");",
											"        var requestUri = pm.variables.get(\"requestUri\");",
											"        var responseCode = pm.variables.get(\"responseCode\");",
											"        var errorMessage = pm.variables.get(\"errorMessage\");",
											"        var errorDescription = pm.variables.get(\"errorDescription\");",
											"        var response = pm.variables.get(\"response\");",
											"        if (attributeUnderTest) {",
											"            var attributeUnderTest = pm.variables.get(\"NameOfAttributeUnderTest\");",
											"        }",
											"        CouldTheInputValuesBeLoaded(validationErrorResults, controller, indexOfDeviceUnderTest,",
											"                                    technologyUnderTest, classUnderTest, attributeUnderTest,",
											"                                    requestUri, responseCode, errorMessage, errorDescription,",
											"                                    requestBody, response",
											"                                   );",
											"    } catch (error) {",
											"        CouldTheInputValuesBeLoaded();",
											"    }",
											"",
											"    // Prepare DeviceUnderTest and objectUnderTest",
											"    try {",
											"        var nameOfTheDeviceUnderTest = controller.nodeList[indexOfDeviceUnderTest].nodeId;",
											"        var objectUnderTest = technologyUnderTest + \"-\" + classUnderTest;",
											"        CouldLocalVariablesBeRetrieved(nameOfTheDeviceUnderTest, objectUnderTest);",
											"    } catch (error) {",
											"        CouldLocalVariablesBeRetrieved();",
											"    }",
											"",
											"    //Prepare Error object",
											"    try {",
											"        if ((errorMessage.includes(\"Not configurable\")) ||",
											"            ((errorMessage.includes(\"Missing\") && (responseCode/100) === 2))) {",
											"                let errorObject = {",
											"                    objectUnderTest:        objectUnderTest,",
											"                    attributeUnderTest:     attributeUnderTest,",
											"                    nameOfTheDeviceUnderTest: nameOfTheDeviceUnderTest,",
											"                    responseCode:           responseCode,",
											"                    message:                errorMessage,",
											"                    description:            errorDescription,",
											"                    requestUri:             requestUri,",
											"                    requestBody:            requestBody,",
											"                    response:               response",
											"                };",
											"                validationErrorResults.push(errorObject);",
											"                CouldErrorResultBeUpdated(errorObject, validationErrorResults);",
											"                pm.environment.set(\"validationErrorResults\", validationErrorResults);",
											"",
											"                let testValidErrorResults = { \"Valid-ErrorResults\": validationErrorResults };",
											"                console.log(testValidErrorResults);",
											"        }",
											"    } catch (error) {",
											"        CouldErrorResultBeUpdated();",
											"    }",
											"",
											"    if ((errorMessage.includes(\"Not configurable\")) ||",
											"        ((errorMessage.includes(\"Missing\") && (responseCode/100) === 2))) {",
											"        var testResult = \"Fail\";",
											"    } else {",
											"        var testResult = \"Pass\";",
											"    }",
											"",
											"    //Prepare Validation Report",
											"    try {",
											"            let reportObject = {",
											"                objectUnderTest:          objectUnderTest,",
											"                attributeUnderTest:       attributeUnderTest,",
											"                nameOfTheDeviceUnderTest: nameOfTheDeviceUnderTest,",
											"                testResult:               testResult,",
											"                responseCode:             responseCode,",
											"                message:                  errorMessage,",
											"                description:              errorDescription,",
											"                requestUri:               requestUri",
											"            };",
											"            validationReport.push(reportObject);",
											"            console.log(reportObject);",
											"            let testValidationResults = { \"testValidationResults\": validationReport };",
											"            console.log(testValidationResults);",
											"            pm.environment.set(\"validationReport\", validationReport);",
											"            CouldErrorResultBeUpdated(reportObject, validationReport);",
											"    } catch (error) {",
											"        CouldErrorResultBeUpdated();",
											"    }",
											"",
											"    // Self Testing Functions",
											"    function CouldTheInputValuesBeLoaded(validationErrorResults, controller, indexOfDeviceUnderTest,",
											"                                            technologyUnderTest, classUnderTest, attributeUnderTest,",
											"                                            requestUri, responseCode, errorMessage, errorDescription,",
											"                                            requestBody, response",
											"                                        ) {",
											"        pm.test(\"CouldTheInputValuesBeLoaded\", function () {",
											"            pm.expect(validationErrorResults).to.be.an(\"array\");",
											"            pm.expect(controller).to.be.an(\"object\");",
											"            pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
											"            pm.expect(technologyUnderTest).to.be.a(\"string\");",
											"            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(classUnderTest).to.be.a(\"string\");",
											"            pm.expect(classUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
											"            pm.expect(requestUri).to.be.a(\"string\");",
											"            pm.expect(requestUri).to.not.have.lengthOf(0);",
											"            pm.expect(responseCode).to.be.a(\"number\");",
											"            pm.expect(errorMessage).to.be.a(\"string\");",
											"            pm.expect(errorMessage).to.not.have.lengthOf(0);",
											"            pm.expect(errorDescription).to.be.a(\"string\");",
											"            pm.expect(errorDescription).to.not.have.lengthOf(0);",
											"            pm.expect(requestBody).to.be.a(\"string\");",
											"            pm.expect(response).to.be.an(\"object\");",
											"        });",
											"    }",
											"",
											"    function CouldLocalVariablesBeRetrieved(nameOfTheDeviceUnderTest, objectUnderTest) {",
											"        pm.test(\"CouldLocalVariablesBeRetrieved\", function () {",
											"            pm.expect(nameOfTheDeviceUnderTest).to.be.a(\"string\");",
											"            pm.expect(nameOfTheDeviceUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(objectUnderTest).to.be.a(\"string\");",
											"            pm.expect(objectUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"",
											"    function CouldErrorResultBeUpdated(errorObject, validationErrorResults) {",
											"        pm.test(\"CouldErrorResultBeUpdated\", function () {",
											"            pm.expect(errorObject).to.be.an(\"object\");",
											"            pm.expect(validationErrorResults).to.be.an(\"array\");",
											"        });",
											"    }",
											"}",
											"",
											"pm.environment.set(\"UpdateErrorResults\", UPDATE_ERROR_RESULTS.toString());",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											" * Self Testing Functions",
											" ****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CommentingResponse()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"\\n--------------------Uploading Function for Commenting GET Responses-----------------------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of CommentingGetResponse()",
											"* ",
											"* Function for creating a result statement on the console.log based on the Response ",
											"* Code of a GET Request.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const COMMENTING_RESPONSE = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var controller = pm.environment.get(\"controller\");",
											"        var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
											"            ",
											"        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
											"            ",
											"        var classUnderTest = pm.variables.get(\"classUnderTest\");",
											"        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
											"        var positiveOutcome = pm.variables.get(\"positiveOutcome\");",
											"        var negativeOutcome = pm.variables.get(\"negativeOutcome\");",
											"        var response = pm.variables.get(\"response\");",
											"        CouldInputForCommentingResponseBeLoaded(controller, indexOfDeviceUnderTest,",
											"                                                            technologyUnderTest,",
											"                                                            classUnderTest,",
											"                                                            attributeUnderTest,",
											"                                                            positiveOutcome,",
											"                                                            negativeOutcome,",
											"                                                            response",
											"                                                );",
											"    } catch (error) {",
											"        CouldInputForCommentingResponseBeLoaded();",
											"    }",
											"        ",
											"    // Typing the comment",
											"    try {",
											"        let nameOfTheDeviceUnderTest = controller.nodeList[indexOfDeviceUnderTest].nodeId;",
											"        let objectUnderTest = technologyUnderTest + \"-\" + classUnderTest;",
											"        let responseCode = parseInt(response.code);",
											"        if (attributeUnderTest!==\"\") {",
											"            objectUnderTest = objectUnderTest",
											"                                + \"::\"",
											"                                + attributeUnderTest;",
											"        }",
											"        ",
											"        if (Math.floor(responseCode/100) === 2) {",
											"            console.log(objectUnderTest + \" at \" + nameOfTheDeviceUnderTest + positiveOutcome);",
											"        } else {",
											"            console.log(\" ERROR: \" + objectUnderTest + \" at \" + nameOfTheDeviceUnderTest ",
											"                                + negativeOutcome + \" Response Code: \" + pm.response.code);",
											"        }",
											"        CouldCommentBeComposedandPrinted(nameOfTheDeviceUnderTest, objectUnderTest);",
											"    } catch (error) {",
											"        CouldCommentBeComposedandPrinted();",
											"    }",
											"        ",
											"    // Self Testing Functions",
											"    function CouldInputForCommentingResponseBeLoaded(controller, indexOfDeviceUnderTest,",
											"                                                            technologyUnderTest,",
											"                                                            classUnderTest,",
											"                                                            attributeUnderTest,",
											"                                                            positiveOutcome,",
											"                                                            negativeOutcome,",
											"                                                            response) {",
											"        pm.test(\"CouldEnvironmentForCommentingResponseBeLoaded\", function () {",
											"            pm.expect(controller).to.be.a(\"object\");",
											"        });",
											"        pm.test(\"CouldIndexOfDeviceForCommentingResponseBeLoaded\", function () {",
											"            pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"CouldTechnologyUnderTestForCommentingResponseBeLoaded\", function () {",
											"            pm.expect(technologyUnderTest).to.be.a(\"string\");",
											"            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldClassUnderTestForCommentingResponseBeLoaded\", function () {",
											"            pm.expect(classUnderTest).to.be.a(\"string\");",
											"            pm.expect(classUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldAttributeUnderTestForCommentingResponseBeLoaded\", function () {",
											"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldPositiveOutcomeForCommentingResponseBeLoaded\", function () {",
											"            pm.expect(positiveOutcome).to.be.a(\"string\");",
											"            pm.expect(positiveOutcome).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldNegativeOutcomeForCommentingResponseBeLoaded\", function () {",
											"            pm.expect(negativeOutcome).to.be.a(\"string\");",
											"            pm.expect(negativeOutcome).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldResponseForCommentingResponseBeLoaded\", function () {",
											"            pm.expect(response).to.be.a(\"object\");",
											"        });",
											"    }",
											"    function CouldCommentBeComposedandPrinted(nameOfTheDeviceUnderTest, objectUnderTest) {",
											"        pm.test(\"CouldCommentBeComposedandPrinted\", function () {",
											"            pm.expect(nameOfTheDeviceUnderTest).to.be.a(\"string\");",
											"            pm.expect(nameOfTheDeviceUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(objectUnderTest).to.be.a(\"string\");",
											"            pm.expect(objectUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"};",
											"pm.environment.set( \"CommentingResponse\", COMMENTING_RESPONSE.toString() );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											" * Self Testing Functions",
											" ****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UploadingInterfaceInformation()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"\\n-----------------Uploading Function for Uploading Interface Information-------------------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of UploadingInterfaceInformation()",
											"* ",
											"* Defines code that is shared by UploadingInterfaceCapability and ",
											"* UploadingInterfaceConfiguration in the Tests script.",
											"*",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const UPLOADING_INTERFACE_INFORMATION = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
											"        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
											"        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
											"        var classUnderTest = pm.variables.get(\"classUnderTest\");",
											"        var response = pm.variables.get(\"response\");",
											"        CouldInputForUploadingInterfaceInformationBeLoaded(moduleUnderTest, ",
											"                                                                technologyUnderTest, ",
											"                                                                CommentingResponse, ",
											"                                                                classUnderTest,",
											"                                                                response",
											"                                                            );",
											"    } catch (error) {",
											"        CouldInputForUploadingInterfaceInformationBeLoaded();",
											"    }",
											"    ",
											"    // Commenting the ResponseCode",
											"    pm.variables.set(\"positiveOutcome\", \" successfully uploaded.\");",
											"    pm.variables.set(\"negativeOutcome\", \" could not be retrieved.\");",
											"    try {",
											"        eval(CommentingResponse)();",
											"        CouldCommentingResponseBeSuccessfullyCalled(true);",
											"    } catch (error) {",
											"        CouldCommentingResponseBeSuccessfullyCalled(false);",
											"    }",
											"    ",
											"    // Extracting Uploaded Information",
											"    try {",
											"        var objectWithoutHeadline;",
											"        if (response.code == 200) {",
											"            let objectInclHeadline;",
											"            objectInclHeadline = response.json();",
											"            objectWithoutHeadline = objectInclHeadline[moduleUnderTest ",
											"                                                            + \":\" ",
											"                                                            + technologyUnderTest ",
											"                                                            + \"-\" ",
											"                                                            + classUnderTest",
											"                                                        ];",
											"        } else {",
											"            objectWithoutHeadline = {};",
											"        }",
											"        CouldInformationObjectBeSuccessfullyExtracted(objectWithoutHeadline);",
											"    } catch (error) {",
											"        CouldInformationObjectBeSuccessfullyExtracted();",
											"    }",
											"    ",
											"    // Provided Output Parameters",
											"    pm.collectionVariables.set(classUnderTest, objectWithoutHeadline);",
											"        ",
											"    // Self Testing Functions",
											"    function CouldInputForUploadingInterfaceInformationBeLoaded(moduleUnderTest, ",
											"                                                                technologyUnderTest, ",
											"                                                                CommentingResponse, ",
											"                                                                classUnderTest,",
											"                                                                response) {",
											"        pm.test(\"CouldModuleUnderTestForUploadingInterfaceInformationBeLoaded\", function () {",
											"            pm.expect(moduleUnderTest).to.be.a(\"string\");",
											"            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldTechnologyUnderTestForUploadingInterfaceInformationBeLoaded\", function () {",
											"            pm.expect(technologyUnderTest).to.be.a(\"string\");",
											"            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldCommentingResponseForUploadingInterfaceInformationBeLoaded\", function () {",
											"            pm.expect(CommentingResponse).to.be.a(\"string\");",
											"            pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldClassUnderTestForUploadingInterfaceInformationBeLoaded\", function () {",
											"            pm.expect(classUnderTest).to.be.a(\"string\");",
											"            pm.expect(classUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldResponseForUploadingInterfaceInformationBeLoaded\", function () {",
											"            pm.expect(response).to.be.a(\"object\");",
											"        });",
											"    }",
											"        ",
											"    function CouldCommentingResponseBeSuccessfullyCalled(success) {",
											"        pm.test(\"CouldCommentingResponseBeSuccessfullyCalled\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"    ",
											"    function CouldInformationObjectBeSuccessfullyExtracted(objectWithoutHeadline) {",
											"        pm.test(\"CouldInformationObjectBeSuccessfullyExtracted\", function () {",
											"            pm.expect(objectWithoutHeadline).to.be.a(\"object\");",
											"        });",
											"    }    ",
											"};",
											"pm.environment.set( \"UploadingInterfaceInformation\", UPLOADING_INTERFACE_INFORMATION.toString() );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											" * Self Testing Functions",
											" ****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Completeness()",
					"item": [
						{
							"name": "RemoveAttributeFromRequired()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"\\n----------------Uploading Function for Shortening the Reference Schema--------------------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of RemoveAttributeFromRequired()",
											"* ",
											"* Function for removing some attribute from the list of required attributes in the ",
											"* reference schema.",
											"* ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const REMOVE_ATTRIBUTE_FROM_REQUIRED = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var schemaToBeShortened = pm.variables.get(\"schemaToBeShortened\");",
											"        var unRequiredAttribute = pm.variables.get(\"unRequiredAttribute\");",
											"        CouldInputForRemoveAttributeFromRequiredBeLoaded(schemaToBeShortened, unRequiredAttribute);",
											"    } catch (error) {",
											"        CouldInputForRemoveAttributeFromRequiredBeLoaded();",
											"    }",
											"        ",
											"    // Removing the Attribute from Required",
											"    try {",
											"        unRequiredAttribute = '\"' + unRequiredAttribute + '\"';",
											"        let schemaString = JSON.stringify(schemaToBeShortened);",
											"        let indexOfStartOfSubStringToBeDeleted = schemaString.lastIndexOf(unRequiredAttribute);",
											"        let precedingSubString = schemaString.slice(0, indexOfStartOfSubStringToBeDeleted);",
											"        const COMMA = 1;",
											"        let indexOfEndOfSubStringToBeDeleted = indexOfStartOfSubStringToBeDeleted + unRequiredAttribute.length + COMMA;",
											"        let subsequentSubString = schemaString.slice(indexOfEndOfSubStringToBeDeleted);",
											"        schemaString = precedingSubString + subsequentSubString;",
											"        var shortenedSchema = JSON.parse(schemaString);",
											"        CouldTheAttributeBeRemovedFromRequired(shortenedSchema);",
											"    } catch (error) {",
											"        CouldTheAttributeBeRemovedFromRequired();",
											"    }    ",
											"        ",
											"    // Provided Output Parameters",
											"    pm.variables.set(\"shortenedSchema\", shortenedSchema);",
											"    ",
											"    // Self Testing Functions",
											"    function CouldInputForRemoveAttributeFromRequiredBeLoaded(schemaToBeShortened, unRequiredAttribute) {",
											"        pm.test(\"CouldInputForRemoveAttributeFromRequiredBeLoaded\", function () {",
											"            pm.expect(schemaToBeShortened).to.be.a(\"object\");",
											"            pm.expect(unRequiredAttribute).to.be.a(\"string\");",
											"            pm.expect(unRequiredAttribute).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"    ",
											"    function CouldTheAttributeBeRemovedFromRequired(shortenedSchema) {",
											"        pm.test(\"CouldTheAttributeBeRemovedFromRequired\", function () {",
											"            pm.expect(shortenedSchema).to.be.an(\"object\");",
											"        });",
											"    }    ",
											"};",
											"pm.environment.set( \"RemoveAttributeFromRequired\", REMOVE_ATTRIBUTE_FROM_REQUIRED.toString() );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											" * Self Testing Functions",
											" ****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ValidatingCompleteness()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"\\n---------------------Uploading Function for Validating Completeness-----------------------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of ValidatingCompleteness()",
											"* ",
											"* Function for Validating the uploaded device response against a reference schema.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const VALIDATING_COMPLETENESS = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var controller = pm.environment.get(\"controller\");",
											"        var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
											"        var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
											"        var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
											"        var UpdateErrorResults = pm.environment.get(\"UpdateErrorResults\");",
											"        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
											"        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
											"",
											"        var classUnderTest = pm.variables.get(\"classUnderTest\");",
											"        var reference = pm.variables.get(\"schema\");",
											"        var response = pm.variables.get(\"response\");",
											"        CouldInputForValidatingCompletenessBeLoaded(controller, mantisInterfaceStatus, ",
											"                                                        indexOfDeviceUnderTest, ",
											"                                                        moduleUnderTest, ",
											"                                                        technologyUnderTest, ",
											"                                                        PrintMantisIssuesForTechnologyAndClass, ",
											"                                                        classUnderTest, ",
											"                                                        reference,",
											"                                                        response);",
											"    } catch (error) {",
											"        CouldInputForValidatingCompletenessBeLoaded();",
											"    }",
											"",
											"    // Validating Completeness",
											"    try {",
											"        var nameOfTheDeviceUnderTest = controller.nodeList[indexOfDeviceUnderTest].nodeId;",
											"        var objectUnderTest = technologyUnderTest + \"-\" + classUnderTest;",
											"        CouldLocalVariablesBeRetrieved(nameOfTheDeviceUnderTest, objectUnderTest);",
											"    } catch (error) {",
											"        CouldLocalVariablesBeRetrieved();",
											"    }",
											"        ",
											"    try {",
											"        if (response.code == 200) {",
											"",
											"            var objectInclHeadline = response.json();",
											"            var object;",
											"            if (classUnderTest===\"\") {",
											"                object = objectInclHeadline;",
											"            } else {",
											"                object = objectInclHeadline[moduleUnderTest + \":\" + technologyUnderTest + \"-\" + classUnderTest];",
											"            }               ",
											"",
											"            console.log(objectUnderTest + \" at \" + nameOfTheDeviceUnderTest + \" could be retrieved:\");",
											"            console.log(object);",
											"            ",
											"            console.log(objectUnderTest + \" Reference:\");               ",
											"            console.log(reference);                                     ",
											"            ",
											"            console.log(objectUnderTest + \" at \" + nameOfTheDeviceUnderTest + \" Validation Result: \");",
											"",
											"            let testResult = tv4.validateMultiple(object, reference, true, true);",
											"\t\t\tconsole.log(testResult);",
											"\t\t\tvar errorMessage = \"\";",
											"            var errorDescription = \"\";",
											"            if (testResult.valid === false) {",
											"\t\t\t\tfor(let eIndex=0; eIndex < testResult.errors.length; eIndex++) {",
											"                    if( (eIndex+1) < testResult.errors.length) //Removing duplicate error messages",
											"                    {",
											"                        if(testResult.errors[eIndex].message === testResult.errors[eIndex+1].message) {",
											"                            continue;",
											"                        }",
											"                    }",
											"                    if(testResult.errors[eIndex].message.includes(\"Missing required property\")) {",
											"                        if(errorMessage == \"\") {",
											"                            errorMessage = testResult.errors[eIndex].message;",
											"                        } else {",
											"                            errorMessage = errorMessage+\",\"+testResult.errors[eIndex].message.replace(\"Missing required property:\", \"\");",
											"                        }",
											"                    }",
											"                    errorDescription = testResult.errors[eIndex].name;",
											"\t\t\t\t}",
											"            }",
											"            pm.variables.set(\"responseCode\", response.code);",
											"            pm.variables.set(\"response\", objectInclHeadline);",
											"            pm.variables.set(\"requestBod\", \"\");",
											"",
											"            pm.variables.set(\"errorMessage\", errorMessage);",
											"            pm.variables.set(\"errorDescription\", errorDescription);",
											"            eval(UpdateErrorResults)();",
											"            CouldValidationBeExecuted(true);",
											"        } else {",
											"            console.log(\" ERROR: \" + objectUnderTest + \" at \" + nameOfTheDeviceUnderTest ",
											"                            + \" could not be retrieved. Response Code: \" + response.code);",
											"        }",
											"",
											"        CouldValidationBeExecuted(true);",
											"    } catch (error) {",
											"        CouldValidationBeExecuted(false);",
											"    }",
											"        ",
											"    try {",
											"        if (mantisInterfaceStatus===\"read-only\") {",
											"            eval(PrintMantisIssuesForTechnologyAndClass)();",
											"            CouldMantisIssuesBeListed(true);",
											"        }",
											"    } catch (error) {",
											"        CouldMantisIssuesBeListed(false);",
											"    }",
											"",
											"    // Self Testing Functions",
											"    function CouldInputForValidatingCompletenessBeLoaded(controller, mantisInterfaceStatus, ",
											"                                                            indexOfDeviceUnderTest, ",
											"                                                            moduleUnderTest, ",
											"                                                            technologyUnderTest, ",
											"                                                            PrintMantisIssuesForTechnologyAndClass, ",
											"                                                            classUnderTest, ",
											"                                                            reference,",
											"                                                            response) {",
											"        pm.test(\"CouldControllerBeLoaded\", function () {",
											"            pm.expect(controller).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldMantisInterfaceStatusBeLoaded\", function () {",
											"            pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
											"        });",
											"        pm.test(\"CouldIndexOfDeviceUnderTestBeLoaded\", function () {            ",
											"            pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"CouldModuleUnderTestBeLoaded\", function () {            ",
											"            pm.expect(moduleUnderTest).to.be.a(\"string\");",
											"            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
											"            pm.expect(technologyUnderTest).to.be.a(\"string\");",
											"            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldPrintMantisIssuesForTechnologyAndClassBeLoaded\", function () {",
											"            pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
											"            pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
											"            pm.expect(classUnderTest).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldReferenceBeLoaded\", function () {",
											"            pm.expect(reference).to.be.a(\"object\");",
											"            pm.expect(response).to.be.a(\"object\");",
											"        });",
											"    }",
											"        ",
											"    function CouldLocalVariablesBeRetrieved(nameOfTheDeviceUnderTest, objectUnderTest) {",
											"        pm.test(\"CouldLocalVariablesBeRetrieved\", function () {",
											"            pm.expect(nameOfTheDeviceUnderTest).to.be.a(\"string\");",
											"            pm.expect(nameOfTheDeviceUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(objectUnderTest).to.be.a(\"string\");",
											"            pm.expect(objectUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"        ",
											"    function CouldValidationBeExecuted(success) {",
											"        pm.test(\"CouldValidationBeExecuted\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"        ",
											"    function CouldMantisIssuesBeListed(success) {",
											"        pm.test(\"CouldMantisIssuesBeListed\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"};",
											"pm.environment.set( \"ValidatingCompleteness\", VALIDATING_COMPLETENESS.toString() );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											" * Self Testing Functions",
											" ****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Configuration()",
					"item": [
						{
							"name": "PreRequestOfWriting()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"\\n-----------Defining standard Pre-Request for Writing in Configuration Validation----------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of PreRequestOfWriting()",
											"* ",
											"* Entire Pre-Request Script of the Writing Request in all Configuration Validations.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"        ",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const PRE_REQUEST_OF_WRITING = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        pm.variables.clear();",
											"            ",
											"        var indexOfAttributeUnderTest =  pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
											"",
											"        var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
											"        var SettingTheFdRequestVariables = pm.environment.get(\"SettingTheFdRequestVariables\");",
											"        var SettingTheFcRequestVariables = pm.environment.get(\"SettingTheFcRequestVariables\");",
											"        var SettingTheProfileRequestVariables = pm.environment.get(\"SettingTheProfileRequestVariables\");",
											"            ",
											"        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
											"        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");        ",
											"        var capability = pm.collectionVariables.get(\"capability\");",
											"        var configuration = pm.collectionVariables.get(\"configuration\");",
											"        var status = pm.collectionVariables.get(\"status\");",
											"        var attributes = pm.collectionVariables.get(\"attributes\");",
											"            ",
											"        CouldInputBeLoaded(indexOfAttributeUnderTest,",
											"                                SettingTheRequestVariables,",
											"                                SettingTheFdRequestVariables,",
											"                                SettingTheFcRequestVariables,",
											"                                SettingTheProfileRequestVariables,",
											"                                moduleUnderTest,",
											"                                technologyUnderTest,",
											"                                capability, ",
											"                                configuration, ",
											"                                status,",
											"                                attributes",
											"                           );",
											"    } catch (error) {",
											"        CouldInputBeLoaded(indexOfAttributeUnderTest);",
											"    }",
											"        ",
											"    // CASE SPECIFIC Parameters",
											"    try {",
											"        eval(attributes[indexOfAttributeUnderTest].CreatingDummyValueAsaString);",
											"        CouldCreatingDummyValueBeExecuted(indexOfAttributeUnderTest, true);",
											"    } catch (error) {",
											"        CouldCreatingDummyValueBeExecuted(indexOfAttributeUnderTest, false);",
											"    }",
											"        ",
											"    // Determining the Request Body",
											"    try {",
											"        var CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
											"                                                    // \"status\", \"current-problems\", \"current-performance\" ",
											"                                                    // or \"historical-performances\"",
											"            ",
											"        var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
											"        var FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
											"        var FILTERED_FIELDS = \"\";",
											"        var requestBody = '{ \"'",
											"                            + moduleUnderTest",
											"                            + ':'",
											"                            + ATTRIBUTE_UNDER_TEST",
											"                            + '\": ';",
											"        if (typeof dummyValue === \"string\") {",
											"            requestBody = requestBody",
											"                            + '\"'",
											"                            + dummyValue",
											"                            + '\" }';",
											"        } else {",
											"            requestBody = requestBody",
											"                            + dummyValue",
											"                            + ' }'; ",
											"        }",
											"        AreValuesOfInputParametersCorrect(ATTRIBUTE_UNDER_TEST, ",
											"                                            CLASS_UNDER_TEST, ",
											"                                            DATATYPE_UNDER_TEST, ",
											"                                            KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST,",
											"                                            CONTENT_TYPE, ",
											"                                            FILTER_DEPTH, ",
											"                                            FILTERED_FIELDS, ",
											"                                            requestBody",
											"                                          );",
											"    } catch (error) {",
											"        AreValuesOfInputParametersCorrect(ATTRIBUTE_UNDER_TEST);",
											"    }",
											"        ",
											"    // Setting Local Variables and Calling for Preparation of the Request",
											"    pm.variables.clear();",
											"        ",
											"    let dummyValueString = JSON.stringify(dummyValue);",
											"    console.log(\"DummyValue: \" + dummyValueString);",
											"        ",
											"    pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
											"    pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
											"    pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
											"    pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
											"    pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
											"    pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
											"    pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
											"    pm.variables.set(\"requestBody\", requestBody);",
											"    pm.variables.set(\"dummyValueString\", dummyValueString);",
											"        ",
											"    try {",
											"        switch (ObjectTypeOf(technologyUnderTest)) {",
											"            case \"interface\":",
											"            case \"container\":",
											"            case \"structure\":",
											"                eval(SettingTheRequestVariables)();",
											"                break;",
											"            case \"fd\":",
											"                eval(SettingTheFdRequestVariables)();",
											"                break;",
											"            case \"fc\":",
											"                eval(SettingTheFcRequestVariables)();",
											"                break;",
											"            case \"profile\":",
											"                eval(SettingTheProfileRequestVariables)();",
											"                break;",
											"        }",
											"        CouldFunctionForSettingTheRequestVariablesBeCalled(ATTRIBUTE_UNDER_TEST, true);",
											"    } catch (error) {",
											"        CouldFunctionForSettingTheRequestVariablesBeCalled(ATTRIBUTE_UNDER_TEST, false);",
											"    }",
											"",
											"    pm.variables.set(\"requestBod\", requestBody);",
											"    pm.variables.set(\"requestUri\", pm.variables.get(\"uri\"));",
											"    CouldTheDataBeStored();",
											"",
											"    // Functions",
											"    function ObjectTypeOf(technologyUnderTest) {",
											"        let indexOfLastMinus = technologyUnderTest.lastIndexOf(\"-\");",
											"        return technologyUnderTest.slice(indexOfLastMinus+1);",
											"    }",
											"",
											"    //Self Testing Functions",
											"    function CouldInputBeLoaded(indexOfAttributeUnderTest,",
											"                                    SettingTheRequestVariables,",
											"                                    SettingTheFdRequestVariables,",
											"                                    SettingTheFcRequestVariables,",
											"                                    SettingTheProfileRequestVariables,",
											"                                    moduleUnderTest,",
											"                                    technologyUnderTest,",
											"                                    capability,",
											"                                    configuration,",
											"                                    status,",
											"                                    attributes) {",
											"        pm.test(\"CouldIndexOfAttributeUnderTestBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {",
											"            pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
											"        });   ",
											"        pm.test(\"CouldSettingTheRequestVariablesBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {",
											"            pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
											"            pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldSettingTheFdRequestVariablesBeLoaded(\" + indexOfAttributeUnderTest + \")\", function () {",
											"            pm.expect(SettingTheFdRequestVariables).to.be.a(\"string\");",
											"            pm.expect(SettingTheFdRequestVariables).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldSettingFcTheRequestVariablesBeLoaded(\" + indexOfAttributeUnderTest + \")\", function () {",
											"            pm.expect(SettingTheFcRequestVariables).to.be.a(\"string\");",
											"            pm.expect(SettingTheFcRequestVariables).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldSettingTheProfileRequestVariablesBeLoaded\", function () {",
											"            pm.expect(SettingTheProfileRequestVariables).to.be.a(\"string\");",
											"            pm.expect(SettingTheProfileRequestVariables).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldModuleUnderTestBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {",
											"            pm.expect(moduleUnderTest).to.be.a(\"string\");",
											"            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
											"            pm.expect(technologyUnderTest).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldCapabilityBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {",
											"            pm.expect(capability).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldConfigurationBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {",
											"            pm.expect(configuration).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldStatusBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {",
											"            pm.expect(status).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldAttributesBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {",
											"            pm.expect(attributes).to.be.an(\"array\");",
											"        });        ",
											"    }",
											"        ",
											"    function CouldCreatingDummyValueBeExecuted(location, success) {",
											"        pm.test(\"CouldCreatingDummyValueBeExecuted (\" + location + \")\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"        ",
											"    function AreValuesOfInputParametersCorrect(attributeUnderTest, ",
											"                                                classUnderTest, ",
											"                                                datatypeUnderTest, ",
											"                                                keysOfDatatypeInstanceUnderTest, ",
											"                                                contentType, ",
											"                                                filteredDepth, ",
											"                                                filteredFields, ",
											"                                                requestBody) {",
											"        pm.test(\"IsValueOfAttributeUnderTestCorrect (\" + attributeUnderTest + \")\", function() {",
											"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
											"            pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"IsValueOfClassUnderTestCorrect (\" + attributeUnderTest + \")\", function() {",
											"            pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
											"                                                    \"current-problems\", \"current-performance\",",
											"                                                    \"historical-performances\"]);",
											"        });",
											"        pm.test(\"IsValueOfDatatypeUnderTestCorrect (\" + attributeUnderTest + \")\", function() {",
											"            pm.expect(datatypeUnderTest).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect (\" + attributeUnderTest + \")\", function() {",
											"            pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
											"        });",
											"        pm.test(\"IsValueOfContentTypeCorrect (\" + attributeUnderTest + \")\", function() {",
											"            pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
											"        });",
											"        pm.test(\"IsValueOfFilteredDepthCorrect (\" + attributeUnderTest + \")\", function() {",
											"            pm.expect(filteredDepth).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"IsValueOfFilteredFieldsCorrect (\" + attributeUnderTest + \")\", function() {",
											"            pm.expect(filteredFields).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"IsValueOfRequestBodyCorrect (\" + attributeUnderTest + \")\", function() {",
											"            pm.expect(requestBody).to.be.a(\"string\");",
											"            pm.expect(requestBody).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"        ",
											"    function CouldFunctionForSettingTheRequestVariablesBeCalled(location, success) {",
											"        pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled (\" + location + \")\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"",
											"    function CouldTheDataBeStored() {",
											"        pm.test(\"CouldTheDataBeStored\", function () {",
											"            pm.expect(pm.variables.get(\"requestBody\")).to.be.a(\"string\");",
											"            pm.expect(pm.variables.get(\"requestBody\")).to.not.have.lengthOf(0);",
											"            pm.expect(pm.variables.get(\"requestUri\")).to.be.a(\"string\");",
											"            pm.expect(pm.variables.get(\"requestUri\")).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"};",
											"pm.environment.set( \"PreRequestOfWritingAsaString\", ConvertingThisFunctionToString(PRE_REQUEST_OF_WRITING) );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											"* Functions",
											"****************************************************************************************/",
											"function ConvertingThisFunctionToString(functionToBeConverted) {",
											"    let functionAsAString = String(functionToBeConverted);",
											"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
											"    return functionAsAString.slice(indexOfFirstCurly);",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Self Testing Functions",
											"****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PreRequestOfReading()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"\\n-----------Defining standard Pre-Request for Reading in Configuration Validation----------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of PreRequestOfReading()",
											"* ",
											"* Entire Pre-Request Script of the Reading Request in all Configuration Validations.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"        ",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const PRE_REQUEST_OF_READING = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
											"        var SettingTheFdRequestVariables = pm.environment.get(\"SettingTheFdRequestVariables\");",
											"        var SettingTheFcRequestVariables = pm.environment.get(\"SettingTheFcRequestVariables\");",
											"        var SettingTheProfileRequestVariables = pm.environment.get(\"SettingTheProfileRequestVariables\");",
											"",
											"        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\"); ",
											"",
											"        CouldInputBeLoaded(SettingTheRequestVariables, SettingTheFdRequestVariables,",
											"                                SettingTheFcRequestVariables,",
											"                                SettingTheProfileRequestVariables,",
											"                                technologyUnderTest",
											"                            );",
											"    } catch (error) {",
											"        CouldInputBeLoaded();",
											"    }",
											"        ",
											"    // Setting Local Variables and Calling for Preparation of the Request",
											"    const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
											"    const REQUEST_BODY = \"\";",
											"        ",
											"    AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
											"        ",
											"    pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
											"    pm.variables.set(\"requestBody\", REQUEST_BODY);",
											"        ",
											"    try {",
											"        switch (ObjectTypeOf(technologyUnderTest)) {",
											"            case \"interface\":",
											"            case \"container\":",
											"            case \"structure\":",
											"                eval(SettingTheRequestVariables)();",
											"                break;",
											"            case \"fd\":",
											"                eval(SettingTheFdRequestVariables)();",
											"                break;",
											"            case \"fc\":",
											"                eval(SettingTheFcRequestVariables)();",
											"                break;",
											"            case \"profile\":",
											"                eval(SettingTheProfileRequestVariables)();",
											"                break;",
											"        }",
											"",
											"        CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
											"    } catch (error) {",
											"        CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
											"    }",
											"   ",
											"    // Functions",
											"    function ObjectTypeOf(technologyUnderTest) {",
											"        let indexOfLastMinus = technologyUnderTest.lastIndexOf(\"-\");",
											"        return technologyUnderTest.slice(indexOfLastMinus+1);",
											"    }",
											"",
											"    // Self Testing Functions",
											"    function CouldInputBeLoaded(SettingTheRequestVariables, SettingTheFdRequestVariables,",
											"                                SettingTheFcRequestVariables,",
											"                                SettingTheProfileRequestVariables,",
											"                                technologyUnderTest) {",
											"        pm.test(\"CouldInputBeLoaded\", function () {",
											"            pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
											"            pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldInputBeLoaded\", function () {",
											"            pm.expect(SettingTheFdRequestVariables).to.be.a(\"string\");",
											"            pm.expect(SettingTheFdRequestVariables).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldInputBeLoaded\", function () {",
											"            pm.expect(SettingTheFcRequestVariables).to.be.a(\"string\");",
											"            pm.expect(SettingTheFcRequestVariables).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldInputBeLoaded\", function () {",
											"            pm.expect(SettingTheProfileRequestVariables).to.be.a(\"string\");",
											"            pm.expect(SettingTheProfileRequestVariables).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
											"            pm.expect(technologyUnderTest).to.be.a(\"string\");",
											"        });",
											"    }",
											"        ",
											"    function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
											"        pm.test(\"IsValueOfContentTypeCorrect\", function() {",
											"            pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
											"        });",
											"        pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
											"            pm.expect(requestBody).to.be.a(\"string\");",
											"        });",
											"    }",
											"        ",
											"    function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
											"        pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"};",
											"pm.environment.set( \"PreRequestOfReadingAsaString\", ConvertingThisFunctionToString(PRE_REQUEST_OF_READING) );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											"* Functions",
											"****************************************************************************************/",
											"function ConvertingThisFunctionToString(functionToBeConverted) {",
											"    let functionAsAString = String(functionToBeConverted);",
											"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
											"    return functionAsAString.slice(indexOfFirstCurly);",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Self Testing Functions",
											"****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PostRequestOfReading()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"\\n----------Defining standard Post-Request for Reading in Configuration Validation----------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of PostRequestOfReading()",
											"* ",
											"* Entire Post-Request Script of the Reading Request in all Configuration Validations.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"        ",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const POST_REQUEST_OF_READING = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
											"        ",
											"        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
											"        var capability = pm.collectionVariables.get(\"capability\");",
											"        var configuration = pm.collectionVariables.get(\"configuration\");        ",
											"        var attributes = pm.collectionVariables.get(\"attributes\");",
											"        var indexOfAttributeUnderTest =  pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
											"        ",
											"        CouldInputForGetResultValueBeLoaded(attributeUnderTest, moduleUnderTest,",
											"                                                capability,",
											"                                                configuration,",
											"                                                attributes,",
											"                                                indexOfAttributeUnderTest",
											"        );",
											"    } catch (error) {",
											"        CouldInputForGetResultValueBeLoaded();",
											"    }",
											"        ",
											"    // Retrieving ResultValue",
											"    try {",
											"        let response = pm.response;",
											"            ",
											"        var responseCode = parseInt(response.code);",
											"            ",
											"        let responseBody = JSON.parse(response.stream);",
											"        let completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
											"        let responseValue = responseBody[completeAttributeName];",
											"",
											"        var responseValueString;",
											"        eval(attributes[indexOfAttributeUnderTest].EvaluatingFeatureSupportAsaString); ",
											"        // ->capabilitiesAreIndicatingThatFeatureNotSupported",
											"        if ( (capabilitiesAreIndicatingThatFeatureNotSupported) && (Math.floor(responseCode/100) === 4) ) {",
											"            responseValueString = \"-1\";",
											"        } else {",
											"            responseValueString = JSON.stringify(responseValue);",
											"        }",
											"        console.log(\"ResultValue: \" + responseValueString);",
											"            ",
											"        CouldResponseBeRetrieved(attributeUnderTest, responseValueString, responseCode);",
											"    } catch (error) {",
											"        CouldResponseBeRetrieved(attributeUnderTest, responseValueString, responseCode);",
											"    }",
											"        ",
											"    // Setting Local Variables",
											"    pm.variables.set(\"resultValueString\", responseValueString);",
											"    pm.variables.set(\"resultCode\", responseCode);",
											"        ",
											"    // Self Testing Functions",
											"    function CouldInputForGetResultValueBeLoaded(attributeUnderTest, moduleUnderTest,",
											"                                                capability,",
											"                                                configuration,",
											"                                                attributes,",
											"                                                indexOfAttributeUnderTest) {",
											"        pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
											"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
											"            pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldModuleUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(moduleUnderTest).to.be.a(\"string\");",
											"            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldTheCapabilityBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(capability).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldConfigurationBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {",
											"            pm.expect(configuration).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldAttributesBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(attributes).to.be.an(\"array\");",
											"        });",
											"        pm.test(\"CouldIndexOfAttributeUnderTestBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
											"        });",
											"    }",
											"        ",
											"    function CouldResponseBeRetrieved(location, responseValueString, responseCode) {",
											"        pm.test(\"CouldResponseValueStringBeRetrieved (\" + location + \")\", function () {",
											"            pm.expect(responseValueString).to.be.a(\"string\");",
											"            pm.expect(responseValueString).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldResponseCodeBeRetrieved (\" + location + \")\", function () {",
											"            pm.expect(responseCode).to.be.a(\"number\");",
											"        });",
											"    }   ",
											"};",
											"pm.environment.set( \"PostRequestOfReadingAsaString\", ConvertingThisFunctionToString(POST_REQUEST_OF_READING) );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											"* Functions",
											"****************************************************************************************/",
											"function ConvertingThisFunctionToString(functionToBeConverted) {",
											"    let functionAsAString = String(functionToBeConverted);",
											"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
											"    return functionAsAString.slice(indexOfFirstCurly);",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Self Testing Functions",
											"****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PreRequestOfEvaluating()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"\\n---------Defining standard Pre-Request for Evaluating in Configuration Validation---------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of PreRequestOfEvaluating()",
											"* ",
											"* Entire Pre-Request Script of the Evaluating Request in all Configuration Validations.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"        ",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const PRE_REQUEST_OF_EVALUATING = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
											"            ",
											"        var dummyUri = pm.environment.get(\"dummyUri\");",
											"        var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
											"        var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
											"            ",
											"        var responseCodeForConfigurationError = pm.environment.get(\"responseCodeForConfigurationError\");",
											"        var errorMessageForNotSupported = pm.environment.get(\"errorMessageForNotSupported\");",
											"        var errorMessageForOutOfRange = pm.environment.get(\"errorMessageForOutOfRange\");",
											"        var errorMessageForAgainstExisting = pm.environment.get(\"errorMessageForAgainstExisting\");",
											"        var errorMessageForInconsistent = pm.environment.get(\"errorMessageForInconsistent\");",
											"        var UpdateErrorResults = pm.environment.get(\"UpdateErrorResults\");",
											"        ",
											"        var capability = pm.collectionVariables.get(\"capability\");",
											"        var configuration = pm.collectionVariables.get(\"configuration\");",
											"        var status = pm.collectionVariables.get(\"status\");",
											"        var attributes = pm.collectionVariables.get(\"attributes\");",
											"        var indexOfAttributeUnderTest =  pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
											"        var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
											"            ",
											"        var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");",
											"        var keysOfDatatypeInstanceUnderTest = pm.variables.get(\"keysOfDatatypeInstanceUnderTest\");",
											"            ",
											"        var dummyValueString = pm.variables.get(\"dummyValueString\");",
											"        var dummyCode = pm.variables.get(\"dummyCode\");",
											"        var dummyErrorMessage = pm.variables.get(\"dummyErrorMessage\"); ",
											"        var resultValueString = pm.variables.get(\"resultValueString\");",
											"        var resultCode = pm.variables.get(\"resultCode\");",
											"            ",
											"        if ( (datatypeUnderTest===undefined) || (datatypeUnderTest===\"\") ) {",
											"            var NameOfAttributeUnderTest = attributeUnderTest;",
											"        } else {",
											"            var NameOfAttributeUnderTest = datatypeUnderTest + \"/\" + attributeUnderTest;",
											"        }",
											"    } catch (error) { }",
											"    CouldTheInputBeLoaded(attributeUnderTest,",
											"                            dummyUri, ",
											"                            mantisInterfaceStatus, ",
											"                            PrintMantisIssuesForTechnologyAndClass,",
											"                            responseCodeForConfigurationError,",
											"                            errorMessageForNotSupported,",
											"                            errorMessageForOutOfRange,",
											"                            errorMessageForAgainstExisting,",
											"                            errorMessageForInconsistent,",
											"                            capability,",
											"                            configuration,",
											"                            status,",
											"                            attributes,",
											"                            indexOfAttributeUnderTest,",
											"                            configurationValidationResults,",
											"                            datatypeUnderTest,",
											"                            keysOfDatatypeInstanceUnderTest,",
											"                            dummyValueString,",
											"                            dummyCode,",
											"                            dummyErrorMessage,",
											"                            resultValueString,",
											"                            resultCode,",
											"                            NameOfAttributeUnderTest",
											"                         );",
											"",
											"    // CASE SPECIFIC Parameters",
											"    try {",
											"        eval(attributes[indexOfAttributeUnderTest].EvaluatingFeatureSupportAsaString); ",
											"        // ->capabilitiesAreIndicatingThatFeatureNotSupported",
											"",
											"        var defaultValueString = \"\";",
											"        try {",
											"            defaultValueString ",
											"                = JSON.stringify(attributes[indexOfAttributeUnderTest].defaultValueForStandardEvaluation);",
											"        } catch (error) { }",
											"",
											"        var aCaseSpecificEvaluationHasBeenDefined;",
											"        if ( attributes[indexOfAttributeUnderTest].EvaluatingResultAsaString === \"{}\" ) {",
											"            aCaseSpecificEvaluationHasBeenDefined = false;",
											"        } else {",
											"            aCaseSpecificEvaluationHasBeenDefined = true;",
											"        }",
											"        if ( aCaseSpecificEvaluationHasBeenDefined === true ) {",
											"            eval(attributes[indexOfAttributeUnderTest].EvaluatingResultAsaString);",
											"",
											"        } else {",
											"",
											"            if ( Math.floor(resultCode/100) === 2 ) {",
											"                if ( (Math.floor(dummyCode/100)===2) && (resultValueString===dummyValueString) ) {",
											"                    configurationValidationResults[NameOfAttributeUnderTest] = \"OK\";",
											"",
											"                } else if ( dummyCode === responseCodeForConfigurationError ) {",
											"                    let onfErrorMessage = DistillingOnfErrorMessageFrom(dummyErrorMessage);",
											"                    console.log(\"ONF message for not supported feature received:\");",
											"                    console.log(onfErrorMessage===errorMessageForNotSupported);",
											"                    console.log(\"Capabilities etc. indicate missing support:\");",
											"                    console.log(capabilitiesAreIndicatingThatFeatureNotSupported===true);",
											"                    console.log(\"Configuration attribute is representing the default value:\");",
											"                    console.log(resultValueString===defaultValueString);",
											"                    if ( (onfErrorMessage===errorMessageForNotSupported)",
											"                            && (capabilitiesAreIndicatingThatFeatureNotSupported===true)",
											"                            && (resultValueString===defaultValueString) ) {",
											"                        configurationValidationResults[NameOfAttributeUnderTest] = \"OK (not supported by hardware)\";",
											"                        ",
											"                    } else if ( onfErrorMessage === errorMessageForOutOfRange ) {",
											"                        configurationValidationResults[NameOfAttributeUnderTest] = \"dummyValue out of hardware range\";",
											"                        ",
											"                    } else if ( onfErrorMessage === errorMessageForAgainstExisting ) {",
											"                        configurationValidationResults[NameOfAttributeUnderTest] = \"dummyValue contradicts existing configuration\";",
											"                        ",
											"                    } else if ( onfErrorMessage === errorMessageForInconsistent ) {",
											"                        configurationValidationResults[NameOfAttributeUnderTest] = \"dummyValue is inconsistent\";",
											"                        ",
											"                    } else {",
											"                        configurationValidationResults[NameOfAttributeUnderTest] = \"Not configurable on application layer\";",
											"                    }",
											"                    ",
											"                } else {",
											"                    configurationValidationResults[NameOfAttributeUnderTest] = \"Not configurable on server layer\";",
											"                }",
											"                ",
											"            } else {",
											"                if ( capabilitiesAreIndicatingThatFeatureNotSupported===true ) {",
											"                    configurationValidationResults[NameOfAttributeUnderTest] = \"OK (not existing, because not supported)\";",
											"                } else {",
											"                    configurationValidationResults[NameOfAttributeUnderTest] = \"Not existing\";",
											"                }",
											"            }",
											"        }",
											"           ",
											"        CouldResultEvaluationBeExecuted(attributeUnderTest, ",
											"                                            resultCode, ",
											"                                            dummyCode, ",
											"                                            resultValueString, ",
											"                                            dummyValueString,",
											"                                            dummyErrorMessage,",
											"                                            defaultValueString, ",
											"                                            configurationValidationResults[NameOfAttributeUnderTest]",
											"                                        );",
											"    } catch (error) {",
											"        CouldResultEvaluationBeExecuted(attributeUnderTest);",
											"    }    ",
											"",
											"    try {",
											"        //Storing data for Mantis purpose",
											"        pm.variables.set(\"NameOfAttributeUnderTest\", NameOfAttributeUnderTest);",
											"        pm.variables.set(\"responseCode\", dummyCode);",
											"        pm.variables.set(\"response\", dummyErrorMessage);",
											"        pm.variables.set(\"errorMessage\", configurationValidationResults[NameOfAttributeUnderTest]);",
											"        pm.variables.set(\"errorDescription\", \"Error in Configuration of \" + NameOfAttributeUnderTest);",
											"        eval(UpdateErrorResults)();",
											"        CouldUpdateErrorResultsBeSuccessfullyCalled(true);",
											"    } catch (error) {",
											"        CouldUpdateErrorResultsBeSuccessfullyCalled(false);",
											"    }",
											"    ",
											"    // console.log",
											"    console.log(\"EvaluationResult: \" + configurationValidationResults[NameOfAttributeUnderTest]);",
											"        ",
											"    try {",
											"        if (mantisInterfaceStatus===\"read-only\") {",
											"            eval(PrintMantisIssuesForTechnologyAndClass)();",
											"            CouldMantisIssuesBeListed(attributeUnderTest, true);",
											"        }",
											"    } catch (error) {",
											"        CouldMantisIssuesBeListed(attributeUnderTest, false);",
											"    }",
											"        ",
											"    // Output provided to the Collection Variables",
											"    pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
											"        ",
											"    // Setting up Local Variables and Preparing the Request",
											"    try {",
											"        pm.variables.set(\"uri\", dummyUri);",
											"        pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"        CouldTheRequestBePrepared(attributeUnderTest, true);",
											"    } catch (error) {",
											"        CouldTheRequestBePrepared(attributeUnderTest, false);",
											"    }",
											"    ",
											"    // Functions",
											"    function DistillingOnfErrorMessageFrom(dummyErrorMessage) {",
											"        let indexOfStartTag = dummyErrorMessage.indexOf(\"#[onf:\");",
											"        let indexOfEndTag = dummyErrorMessage.indexOf(\"]#\");",
											"        return dummyErrorMessage.slice(indexOfStartTag, indexOfEndTag+2);",
											"    }",
											"        ",
											"    // Self Testing Functions",
											"    function CouldTheInputBeLoaded(attributeUnderTest,",
											"                                        dummyUri, ",
											"                                        mantisInterfaceStatus, ",
											"                                        PrintMantisIssuesForTechnologyAndClass,",
											"                                        responseCodeForConfigurationError,",
											"                                        errorMessageForNotSupported,",
											"                                        errorMessageForOutOfRange,",
											"                                        errorMessageForAgainstExisting,",
											"                                        errorMessageForInconsistent,",
											"                                        capability,",
											"                                        configuration,",
											"                                        status,",
											"                                        attributes,",
											"                                        indexOfAttributeUnderTest,",
											"                                        configurationValidationResults,",
											"                                        datatypeUnderTest,",
											"                                        keysOfDatatypeInstanceUnderTest,",
											"                                        dummyValueString,",
											"                                        dummyCode,",
											"                                        dummyErrorMessage,",
											"                                        resultValueString,",
											"                                        resultCode,",
											"                                        NameOfAttributeUnderTest) {",
											"        pm.test(\"CouldTheAttributeUnderTestBeLoaded\", function () {",
											"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
											"            pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldTheDummyUriBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(dummyUri).to.be.a(\"string\");",
											"            pm.expect(dummyUri).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldTheMantisInterfaceStatusBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
											"        });",
											"        pm.test(\"CouldPrintMantisIssuesForTechnologyAndClassBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
											"            pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldTheresponseCodeForConfigurationErrorBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(responseCodeForConfigurationError).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"CouldTheErrorMessageForNotSupportedBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(errorMessageForNotSupported).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldTheErrorMessageForOutOfRangeBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(errorMessageForOutOfRange).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldTheErrorMessageForAgainstExistingBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(errorMessageForAgainstExisting).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldTheErrorMessageForInconsistentBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(errorMessageForInconsistent).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldTheCapabilityBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(capability).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldTheConfigurationBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(configuration).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldTheStatusBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(status).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldAttributesBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(attributes).to.be.an(\"array\");",
											"        }); ",
											"        pm.test(\"CouldIndexOfAttributeUnderTestBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
											"        });    ",
											"        pm.test(\"CouldTheConfigurationValidationResultsBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(configurationValidationResults).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldTheDatatypeUnderTestBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(datatypeUnderTest).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldTheKeysOfDatatypeInstanceUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(keysOfDatatypeInstanceUnderTest).to.be.an(\"array\");",
											"        });",
											"        pm.test(\"CouldTheDummyValueStringBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(dummyValueString).to.be.a(\"string\");",
											"            pm.expect(dummyValueString).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldTheDummyCodeBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(dummyCode).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"CouldTheDummyErrorMessageBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(dummyErrorMessage).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldTheResultValueStringBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(resultValueString).to.be.a(\"string\");",
											"            pm.expect(resultValueString).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldTheResultCodeBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(resultCode).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"CouldTheNameOfAttributeUnderTestBeCombined (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(NameOfAttributeUnderTest).to.be.a(\"string\");",
											"            pm.expect(NameOfAttributeUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"        ",
											"    function CouldResultEvaluationBeExecuted(location,",
											"                                                resultCode, ",
											"                                                dummyCode, ",
											"                                                resultValueString, ",
											"                                                dummyValueString, ",
											"                                                dummyErrorMessage,",
											"                                                defaultValueString, ",
											"                                                configurationValidationResult",
											"                                            ) {",
											"        pm.test(\"WasResultCodeAvailable (\" + location + \")\", function () {",
											"            pm.expect(resultCode).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"WasDummyCodeAvailable (\" + location + \")\", function () {",
											"            pm.expect(dummyCode).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"WasResultValueStringAvailable (\" + location + \")\", function () {",
											"            pm.expect(resultValueString).to.be.a(\"string\");",
											"            pm.expect(resultValueString).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"WasDummyValueStringAvailable (\" + location + \")\", function () {",
											"            pm.expect(dummyValueString).to.be.a(\"string\");",
											"            pm.expect(dummyValueString).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"WasDummyErrorMessageAvailable (\" + location + \")\", function () {            ",
											"            pm.expect(dummyErrorMessage).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"WasDefaultValueStringAvailable (\" + location + \")\", function () {            ",
											"            pm.expect(defaultValueString).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldConfigurationValidationResultBeCalculated (\" + location + \")\", function () {            ",
											"            pm.expect(configurationValidationResult).to.be.a(\"string\");",
											"            pm.expect(configurationValidationResult).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"        ",
											"    function CouldMantisIssuesBeListed(location, success) {",
											"        pm.test(\"CouldMantisIssuesBeListed (\" + location + \")\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"        ",
											"    function CouldTheRequestBePrepared(location, success) {",
											"        pm.test(\"CouldTheRequestBePrepared (\" + location + \")\", function () {",
											"            pm.expect(success).to.be.true;",
											"            pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"            pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"",
											"    function CouldUpdateErrorResultsBeSuccessfullyCalled(success) {",
											"        pm.test(\"CouldUpdateErrorResultsBeSuccessfullyCalled \", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"};",
											"pm.environment.set( \"PreRequestOfEvaluatingAsaString\", ConvertingThisFunctionToString(PRE_REQUEST_OF_EVALUATING) );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											"* Functions",
											"****************************************************************************************/",
											"function ConvertingThisFunctionToString(functionToBeConverted) {",
											"    let functionAsAString = String(functionToBeConverted);",
											"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
											"    return functionAsAString.slice(indexOfFirstCurly);",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Self Testing Functions",
											"****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PreRequestOfRestoring()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"\\n----------Defining standard Pre-Request for Restoring in Configuration Validation---------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of PreRequestOfRestoring()",
											"* ",
											"* Entire Pre-Request Script of the Restoring Request in all Configuration Validations.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"        ",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const PRE_REQUEST_OF_RESTORING = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
											"            ",
											"        var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
											"        var SettingTheFdRequestVariables = pm.environment.get(\"SettingTheFdRequestVariables\");",
											"        var SettingTheFcRequestVariables = pm.environment.get(\"SettingTheFcRequestVariables\");",
											"        var SettingTheProfileRequestVariables = pm.environment.get(\"SettingTheProfileRequestVariables\");",
											"",
											"        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
											"        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
											"        var configuration = pm.collectionVariables.get(\"configuration\");",
											"            ",
											"        var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");",
											"        var keysOfDatatypeInstanceUnderTest = pm.variables.get(\"keysOfDatatypeInstanceUnderTest\");",
											"",
											"        CouldInputBeLoaded(attributeUnderTest,",
											"                                SettingTheRequestVariables,",
											"                                SettingTheFdRequestVariables,",
											"                                SettingTheFcRequestVariables,",
											"                                SettingTheProfileRequestVariables,",
											"                                moduleUnderTest,",
											"                                technologyUnderTest,",
											"                                configuration,",
											"                                datatypeUnderTest,",
											"                                keysOfDatatypeInstanceUnderTest",
											"                           );",
											"    } catch (error) {",
											"        CouldInputBeLoaded(attributeUnderTest);",
											"    }",
											"",
											"    // Determining the Request Body",
											"    try {",
											"        var originalValue;",
											"        if ( (typeof datatypeUnderTest==\"undefined\") || (datatypeUnderTest===\"\") ) {",
											"            originalValue = configuration[attributeUnderTest];",
											"        } else {",
											"            if ( JSON.stringify(keysOfDatatypeInstanceUnderTest[0]) === \"{}\" ) {",
											"                originalValue = configuration[datatypeUnderTest][attributeUnderTest];",
											"            } else {",
											"                let instanceIndexUnderTest;",
											"                instanceIndexUnderTest ",
											"                    = InstanceIndexOf(keysOfDatatypeInstanceUnderTest[0], datatypeUnderTest, configuration);",
											"                originalValue = configuration[datatypeUnderTest][instanceIndexUnderTest][attributeUnderTest];",
											"            }",
											"        }",
											"            ",
											"        var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
											"        var requestBody = '{ \"'",
											"                            + moduleUnderTest",
											"                            + ':'",
											"                            + attributeUnderTest",
											"                            + '\": ';",
											"        if (typeof originalValue === \"string\") {",
											"            requestBody = requestBody",
											"                            + '\"'",
											"                            + originalValue",
											"                            + '\" }';",
											"        } else {",
											"            requestBody = requestBody",
											"                            + originalValue",
											"                            + ' }'; ",
											"        }",
											"        AreValuesOfTheRequestBodyCorrect(attributeUnderTest, originalValue, CONTENT_TYPE, requestBody);",
											"    } catch (error) {",
											"        AreValuesOfTheRequestBodyCorrect(attributeUnderTest);",
											"    }",
											"",
											"    // Setting Local Variables and Calling for Preparation of the Request",
											"    pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
											"    pm.variables.set(\"requestBody\", requestBody);",
											"",
											"    try {",
											"        switch (ObjectTypeOf(technologyUnderTest)) {",
											"            case \"interface\":",
											"            case \"container\":",
											"            case \"structure\":",
											"                eval(SettingTheRequestVariables)();",
											"                break;",
											"            case \"fd\":",
											"                eval(SettingTheFdRequestVariables)();",
											"                break;",
											"            case \"fc\":",
											"                eval(SettingTheFcRequestVariables)();",
											"                break;",
											"            case \"profile\":",
											"                eval(SettingTheProfileRequestVariables)();",
											"                break;",
											"        }",
											"        CouldFunctionForSettingTheRequestVariablesBeCalled(attributeUnderTest, true);",
											"    } catch (error) {",
											"        CouldFunctionForSettingTheRequestVariablesBeCalled(attributeUnderTest, false);",
											"    }",
											"",
											"    // Functions",
											"    function InstanceIndexOf(keyValueOfInstanceUnderTest, datatypeUnderTest, configuration) {",
											"        for (let i=0; i<(configuration[datatypeUnderTest].length); i++) {",
											"            let sampleName = configuration[datatypeUnderTest][i][keyValueOfInstanceUnderTest.key];",
											"            if ( sampleName === keyValueOfInstanceUnderTest.value ) {",
											"                return i;",
											"            }",
											"        }",
											"    }",
											"    ",
											"    function ObjectTypeOf(technologyUnderTest) {",
											"        let indexOfLastMinus = technologyUnderTest.lastIndexOf(\"-\");",
											"        return technologyUnderTest.slice(indexOfLastMinus+1);",
											"    }",
											"    ",
											"    //Self Testing Functions",
											"    function CouldInputBeLoaded(attributeUnderTest,",
											"                                    SettingTheRequestVariables,",
											"                                    SettingTheFdRequestVariables,",
											"                                    SettingTheFcRequestVariables,",
											"                                    SettingTheProfileRequestVariables,",
											"                                    moduleUnderTest,",
											"                                    technologyUnderTest,",
											"                                    configuration, ",
											"                                    datatypeUnderTest,",
											"                                    keysOfDatatypeInstanceUnderTest) {",
											"        pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
											"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
											"            pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldSettingTheRequestVariablesBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
											"            pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldSettingTheFdRequestVariablesBeLoaded(\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(SettingTheFdRequestVariables).to.be.a(\"string\");",
											"            pm.expect(SettingTheFdRequestVariables).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldSettingFcTheRequestVariablesBeLoaded(\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(SettingTheFcRequestVariables).to.be.a(\"string\");",
											"            pm.expect(SettingTheFcRequestVariables).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldSettingTheProfileRequestVariablesBeLoaded(\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(SettingTheProfileRequestVariables).to.be.a(\"string\");",
											"            pm.expect(SettingTheProfileRequestVariables).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldModuleUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(moduleUnderTest).to.be.a(\"string\");",
											"            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldTechnologyUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(technologyUnderTest).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldConfigurationBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(configuration).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldDatatypeUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(datatypeUnderTest).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldKeysOfDatatypeInstanceUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(keysOfDatatypeInstanceUnderTest[0]).to.be.an(\"object\");",
											"        });",
											"    }",
											"        ",
											"    function AreValuesOfTheRequestBodyCorrect(location, originalValue, contentType, requestBody) {",
											"        pm.test(\"CouldTheOriginalValueBeRead (\" + location + \")\", function() {",
											"            pm.expect(originalValue).to.not.be.undefined;",
											"        });",
											"        pm.test(\"IsValueOfContentTypeCorrect (\" + location + \")\", function() {",
											"            pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
											"        });",
											"        pm.test(\"IsValueOfRequestBodyCorrect (\" + location + \")\", function() {",
											"            pm.expect(requestBody).to.be.a(\"string\");",
											"            pm.expect(requestBody).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"        ",
											"    function CouldFunctionForSettingTheRequestVariablesBeCalled(location, success) {",
											"        pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled (\" + location + \")\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"};",
											"pm.environment.set( \"PreRequestOfRestoringAsaString\", ConvertingThisFunctionToString(PRE_REQUEST_OF_RESTORING) );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											"* Functions",
											"****************************************************************************************/",
											"function ConvertingThisFunctionToString(functionToBeConverted) {",
											"    let functionAsAString = String(functionToBeConverted);",
											"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
											"    return functionAsAString.slice(indexOfFirstCurly);",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Self Testing Functions",
											"****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "EnvironmentInformationLoading",
			"item": [
				{
					"name": "StartPointDeviceTesting",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"\\n######################## StartingPoint of Validation of a Device #########################\");",
									"/****************************************************************************************",
									"* ",
									"* StartPoint",
									"* ",
									"* Manages the number of iterations over several devices in the environment",
									"* ",
									"****************************************************************************************/",
									"",
									"",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var multiplicityOfDeviceIterations = pm.environment.get(\"multiplicityOfDeviceIterations\");",
									"    var controller = pm.environment.get(\"controller\");",
									"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, multiplicityOfDeviceIterations, dummyUri);",
									"} catch (error) {",
									"    CouldTheInputBeLoaded();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Displaying ",
									"****************************************************************************************/",
									"try {",
									"    var numberOfExistingDevices = controller.nodeList.length;",
									"    var maximumIndexOfDeviceUnderTest;",
									"    switch (multiplicityOfDeviceIterations) {",
									"        case \"none\":",
									"            maximumIndexOfDeviceUnderTest = -1;",
									"            break;",
									"        case \"one\":",
									"            maximumIndexOfDeviceUnderTest = Math.min( 0, (numberOfExistingDevices-1) );",
									"            break;",
									"        case \"all\":",
									"            maximumIndexOfDeviceUnderTest = (numberOfExistingDevices-1);",
									"            break;",
									"    }",
									"    CouldMaximumIndexOfDeviceUnderTestBeDetermined(maximumIndexOfDeviceUnderTest);",
									"} catch (error) {",
									"    CouldMaximumIndexOfDeviceUnderTestBeDetermined();",
									"}    ",
									"try {",
									"    if (indexOfDeviceUnderTest<=maximumIndexOfDeviceUnderTest) {",
									"        postman.setNextRequest();",
									"        console.log(\"Testing of the \" + (indexOfDeviceUnderTest+1) + \". out of \" ",
									"                        + (maximumIndexOfDeviceUnderTest+1) ",
									"                        + \" Devices will be started.\");",
									"    } else {",
									"        postman.setNextRequest(\"EndPointInterfaceValidator\");",
									"        console.log(\"Proceeding with terminating the Interface Validator.\");",
									"    }",
									"    CouldFurtherProceedingBeDetermined(true);",
									"} catch (error) {",
									"    CouldFurtherProceedingBeDetermined(false);",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    pm.variables.set(\"uri\", dummyUri);",
									"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
									"} catch (error) { }",
									"CouldTheRequestBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									" * Self Testing Functions",
									" ****************************************************************************************/",
									"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, ",
									"                                multiplicityOfDeviceIterations, uri) {",
									"    pm.test(\"CouldTheInputBeLoaded\", function () {",
									"        pm.expect(controller).to.be.an(\"object\");",
									"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
									"        pm.expect(multiplicityOfDeviceIterations).to.be.a(\"string\");",
									"        pm.expect(multiplicityOfDeviceIterations).to.not.have.lengthOf(0);",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldMaximumIndexOfDeviceUnderTestBeDetermined(maximumIndexOfDeviceUnderTest) {",
									"    pm.test(\"CouldMaximumIndexOfDeviceUnderTestBeDetermined\", function () {",
									"        pm.expect(maximumIndexOfDeviceUnderTest).to.be.a(\"number\");",
									"    });",
									"}",
									"",
									"function CouldFurtherProceedingBeDetermined(success) {",
									"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
									"        pm.expect(success).to.be.true;",
									"    });",
									"}",
									"",
									"function CouldTheRequestBePrepared() {",
									"    pm.test(\"CouldTheRequestBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "LoadingMantisIssues",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"\\n----------------------------------Loading Mantis Issues-----------------------------------\");",
									"/****************************************************************************************",
									"* ",
									"* Loading Mantis Issues",
									"*  ",
									"****************************************************************************************/",
									"",
									"",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
									"    var controller = pm.environment.get(\"controller\");",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
									"    CouldInputForLoadingMantisIssuesBeLoaded(mantisInterfaceStatus, controller, ",
									"                                            dummyUri, ",
									"                                            indexOfDeviceUnderTest",
									"                                           );",
									"} catch (error) {",
									"    CouldInputForLoadingMantisIssuesBeLoaded();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    if (mantisInterfaceStatus===\"read-only\" || mantisInterfaceStatus===\"read-write\") {",
									"        var vendor = controller.nodeList[indexOfDeviceUnderTest].vendor;",
									"        var mantisAuthorizationCode = controller.nodeList[indexOfDeviceUnderTest].mantisAuthorizationCode;",
									"        var uri = \"https://\" + vendor + \".bugtracker.openBackhaul.com/api/rest/issues?page_size=99999\";",
									"        CouldTheMantisUriBeComposed(vendor, mantisAuthorizationCode, uri);",
									"    } else {",
									"        console.log(\"Loading Mantis Issues has been configured to be switched-off.\")",
									"        uri = dummyUri;",
									"    }",
									"} catch (error) {",
									"    CouldTheMantisUriBeComposed();",
									"    uri = dummyUri;",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {   ",
									"    pm.variables.set(\"uri\", uri);",
									"    pm.request.headers.upsert({key:\"Authorization\", value:mantisAuthorizationCode});",
									"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
									"    pm.request.headers.upsert({key:\"Content-Type\", value:\"application/json\"});",
									"} catch (error) { }",
									"CouldTheGetRequestForMantisIssuesBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									"* Self Testing Functions",
									"****************************************************************************************/",
									"function CouldInputForLoadingMantisIssuesBeLoaded(mantisInterfaceStatus, ",
									"                                                    controller, ",
									"                                                    uri, ",
									"                                                    indexOfDeviceUnderTest) {",
									"    pm.test(\"CouldInputForLoadingMantisIssuesBeLoaded\", function () {",
									"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
									"        pm.expect(controller).to.be.an(\"object\");",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");      ",
									"    });",
									"}",
									"",
									"function CouldTheMantisUriBeComposed(vendor, mantisAuthorizationCode, uri) {",
									"    pm.test(\"CouldTheMantisUriBeComposed\", function () {",
									"        pm.expect(vendor).to.be.a(\"string\");",
									"        pm.expect(vendor).to.not.have.lengthOf(0);  ",
									"        pm.expect(mantisAuthorizationCode).to.be.a(\"string\");",
									"        pm.expect(mantisAuthorizationCode).to.not.have.lengthOf(0);  ",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);  ",
									"    });",
									"}",
									"",
									"function CouldTheGetRequestForMantisIssuesBePrepared() {",
									"    pm.test(\"CouldTheGetRequestForMantisIssuesBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
									"    var controller = pm.environment.get(\"controller\");",
									"    ",
									"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
									"",
									"    CouldRequiredInputBeRead(mantisInterfaceStatus, controller, indexOfDeviceUnderTest);",
									"} catch (error) {",
									"    CouldRequiredInputBeRead();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Processing received data to a list of MantisBT issues",
									"****************************************************************************************/",
									"try {",
									"    if (mantisInterfaceStatus===\"read-only\" || mantisInterfaceStatus===\"read-write\") {",
									"        var deviceType = controller.nodeList[indexOfDeviceUnderTest].deviceType;",
									"        CouldDeviceTypeBeRetrieved(deviceType);",
									"",
									"        let responseWithHeadline = pm.response.json();",
									"        var mantisIssueList = responseWithHeadline.issues;",
									"        mantisIssueList = DownsizeIssueList(mantisIssueList);",
									"        CouldMantisIssueListBeRead(pm.response.code);",
									"    }",
									"} catch (error) {",
									"    CouldDeviceTypeBeRetrieved();",
									"    CouldMantisIssueListBeRead();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Commenting the ResponseCode",
									"****************************************************************************************/",
									"try {",
									"    if (mantisInterfaceStatus===\"read-only\" || mantisInterfaceStatus===\"read-write\") {",
									"        let responseCode = parseInt(pm.response.code);",
									"        if (Math.floor(responseCode/100) === 2) {",
									"            console.log(\"Mantis issues for \" + deviceType + \" could successfully be loaded.\");",
									"        } else {",
									"            console.log(\"ERROR: Mantis issues for \" + deviceType + \" could not be \"",
									"                            + \"successfully be loaded.\");",
									"        }",
									"        CouldCommentBeComposedandPrinted(responseCode);",
									"    }",
									"} catch (error) {",
									"    CouldCommentBeComposedandPrinted();",
									"}",
									"",
									"pm.variables.clear();",
									"",
									"",
									"/****************************************************************************************",
									"* Provided Output Parameters",
									"****************************************************************************************/",
									"if (mantisInterfaceStatus===\"read-only\" || mantisInterfaceStatus===\"read-write\") {",
									"    pm.environment.set(\"mantisIssueList\", mantisIssueList);",
									"    AreAllEnvironmentVariablesSet();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Functions",
									" ****************************************************************************************/",
									"function DownsizeIssueList(issueList) {",
									"    var downSizedIssueList = [];",
									"    for (let i=(issueList.length-1); i>=0; i--) {",
									"        if ( (issueList[i].project.name===deviceType) && (issueList[i].status.name!==\"closed\") ){",
									"            let downSizedIssue = {",
									"                \"id\" : issueList[i].id,",
									"                \"summary\" : issueList[i].summary,",
									"                \"status\" : issueList[i].status.name",
									"            }",
									"            downSizedIssueList.push(downSizedIssue);",
									"        }",
									"    }",
									"    return downSizedIssueList;",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Test Driven Development",
									" ****************************************************************************************/",
									"function CouldRequiredInputBeRead(mantisInterfaceStatus, controller, indexOfDeviceUnderTest) {",
									"    pm.test(\"CouldRequiredInputBeRead\", function () {",
									"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
									"        pm.expect(controller).to.be.an(\"object\");",
									"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
									"    });",
									"}",
									"",
									"function CouldDeviceTypeBeRetrieved(deviceType) {",
									"    pm.test(\"CouldDeviceTypeBeRetrieved\", function () {",
									"        pm.expect(deviceType).to.be.a(\"string\");",
									"        pm.expect(deviceType).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldMantisIssueListBeRead(ResponseCode) {",
									"    pm.test(\"CouldMantisIssueListBeRead\", function () {",
									"        pm.expect(ResponseCode).to.equal(200);",
									"    });",
									"}",
									"",
									"function CouldCommentBeComposedandPrinted(ResponseCode) {",
									"    pm.test(\"CouldMantisIssueListBeRead\", function () {",
									"        pm.expect(ResponseCode).to.equal(200);",
									"    });",
									"}",
									"",
									"function AreAllEnvironmentVariablesSet() {",
									"    pm.test(\"AreAllEnvironmentVariablesSet\", function () {",
									"        pm.expect(pm.environment.get(\"mantisIssueList\")).to.be.an(\"array\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DisplayEnvironmentVariables",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"\\n-------------------------Displaying all Environment variables-----------------------------\");",
									"/****************************************************************************************",
									"* ",
									"* Console.log of all Environment variables",
									"* ",
									"****************************************************************************************/",
									"",
									"",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    CouldTheInputBeLoaded(dummyUri);",
									"} catch (error) {",
									"    CouldTheInputBeLoaded();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Displaying ",
									"****************************************************************************************/",
									"try {",
									"    console.log(\"Device will be tested with the following set of Environment variables:\");",
									"    let allEnvironmentVariables = { \"allEnvironmentVariables\" : pm.environment.toObject() };",
									"    console.log(allEnvironmentVariables);",
									"    CouldAllEnvironmentalVariablesBeDisplayed(true);",
									"} catch (error) {",
									"    CouldAllEnvironmentalVariablesBeDisplayed(false);",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    pm.variables.set(\"uri\", dummyUri);",
									"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
									"} catch (error) { }",
									"CouldTheRequestBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									" * Self Testing Functions",
									" ****************************************************************************************/",
									"function CouldTheInputBeLoaded(uri) {",
									"    pm.test(\"CouldTheInputBeLoaded\", function () {",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldAllEnvironmentalVariablesBeDisplayed(success) {",
									"    pm.test(\"CouldAllEnvironmentalVariablesBeDisplayed\", function () {",
									"        pm.expect(success).to.be.true;",
									"    });",
									"}",
									"",
									"function CouldTheRequestBePrepared() {",
									"    pm.test(\"CouldTheRequestBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "InterfaceValidation",
			"item": [
				{
					"name": "AirInterfaceValidation",
					"item": [
						{
							"name": "AirInterfaceCompleteness",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n\\n=============================== AirInterfaceCompleteness.3 ===============================\");",
															"/****************************************************************************************",
															" * ",
															" * RequestCollection for validating Completeness of AirInterface Objects against definition ",
															" * ",
															" *                   AirInterface_2.0.0-tsp.200121.1750",
															" * ",
															" * as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															" * ",
															" ****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															" * Manual Definition of the Mode of Operation of this TestCase",
															" ****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"one\"; // \"none\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"air-interface-2-0:air-interface-pac\"; // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function () {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function () {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointAirInterfaceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-----------------EntryPoint of AirInterface Validation for Completeness-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Displaying the Collection Variables right before starting the validation ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].airInterfaceList.length;",
															"    var maximumIndexOfLtpUnderTest;",
															"    ",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.min( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointAirInterfaceCompleteness\");",
															"        console.log(\"Proceeding with terminating AirInterface validation for Completeness.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceCapability",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Capabilities-------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the Interface Capabilities",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Configuration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Configuration",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* StartPoint",
															"* ",
															"* Manages the number of iterations of the Completeness TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "NetworkPreparation",
									"item": [
										{
											"name": "SwitchingOnMonitoring",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------------Switching Monitoring On----------------------------------\");",
															"/****************************************************************************************",
															" * ",
															" * Switching Monitoring On",
															" * ",
															" * This Request is for activating collection of performance data on the device under",
															" * test, so the data can be retrieved during validating completeness of the implementation",
															" *  ",
															" ****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															" * Required Input Parameters",
															" ****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, capability, configuration);",
															"} catch (error) {",
															"    CouldInputForSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Forming the Body",
															" ****************************************************************************************/",
															"try {",
															"    let requestBodyString = ('{ \"' + moduleUnderTest + ':performance-monitoring-is-on\": true }');",
															"    var requestBody = JSON.parse(requestBodyString);",
															"    CouldRequestBodyBeFormed(requestBody);",
															"} catch (error) {",
															"    CouldRequestBodyBeFormed();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Setting up Local Variables and Calling for Preparation of the Request",
															" ****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(requestBody);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, capability, configuration) {",
															"    pm.test(\"CouldInputForSwitchingMonitoringOnBeLoaded\", function() {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(configuration).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyBeFormed(requestBody) {",
															"    pm.test(\"CouldRequestBodyBeFormed\", function() {",
															"        pm.expect(requestBody).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, ",
															"                                                keysOfDatatypeInstanceUnderTest,",
															"                                                attributeUnterTest, ",
															"                                                contentType,",
															"                                                filteredDepth, ",
															"                                                filteredFields, ",
															"                                                requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"            \"current-problems\", \"current-performance\",",
															"            \"historical-performances\"",
															"        ]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function() {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched on.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched on.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "SettingWrongRadioSignalId",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------------------------Setting Wrong RadioSignalId--------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting wrong Expected RadioSignalID for provocing entries in CurrentProblemList",
															"* ",
															"* This Request is for provocing an alarm to be able to validate completeness of the ",
															"* representation of currently active alarms.",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, capability, configuration);",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    var supportedRadioSignalIdDatatype = capability[\"supported-radio-signal-id-datatype\"];",
															"    var supportedRadioSignalIdLength = capability[\"supported-radio-signal-id-length\"]; ",
															"    if ( supportedRadioSignalIdDatatype === \"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_INTEGER\" ) {",
															"        var attributeUnderTest = \"numeric-radio-signal-id\";",
															"        var faultyValue = Math.floor( Math.random() * supportedRadioSignalIdLength );",
															"    } else {",
															"        var attributeUnderTest = \"alphanumeric-radio-signal-id\";",
															"        var faultyValue = GenerateRandomString(supportedRadioSignalIdLength);",
															"    } ",
															"",
															"    var expectedRadioSignalIdCanBeIndependentlyConfigured = !capability[\"expected-equals-transmitted-radio-signal-id\"];",
															"    if ( expectedRadioSignalIdCanBeIndependentlyConfigured === true ) {",
															"        dataTypeUnderTest = \"expected-radio-signal-id\";",
															"    } else {",
															"        dataTypeUnderTest = \"transmitted-radio-signal-id\";",
															"    }",
															"",
															"    CouldFaultyValuesBeGenerated(supportedRadioSignalIdDatatype, supportedRadioSignalIdLength, ",
															"                                    attributeUnderTest,",
															"                                    expectedRadioSignalIdCanBeIndependentlyConfigured,",
															"                                    dataTypeUnderTest",
															"                                );",
															"} catch (error) {",
															"    CouldFaultyValuesBeGenerated();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = dataTypeUnderTest;",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = attributeUnderTest;",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"let requestBody = '{ \"'",
															"                    + moduleUnderTest",
															"                    + ':'",
															"                    + attributeUnderTest",
															"                    + '\": ';",
															"if (typeof faultyValue === \"string\") {",
															"    requestBody = requestBody",
															"                    + '\"'",
															"                    + faultyValue",
															"                    + '\" }';",
															"} else {",
															"    requestBody = requestBody",
															"                    + faultyValue",
															"                    + ' }'; ",
															"}",
															"",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, ",
															"                                    CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, ",
															"                                    FILTERED_FIELDS, ",
															"                                    requestBody",
															"                                 );",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", requestBody);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function GenerateRandomString(length) {",
															"    let randomString = \"\";",
															"    let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
															"    let charactersLength = characters.length;",
															"    for ( let i=0; i<length; i++ ) {",
															"        randomString += characters.charAt(Math.floor(Math.random() * charactersLength));",
															"    }",
															"    return randomString;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, capability, configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldFaultyValuesBeGenerated(supportedRadioSignalIdDatatype, supportedRadioSignalIdLength, ",
															"                                        attributeUnderTest,",
															"                                        expectedRadioSignalIdCanBeIndependentlyConfigured,",
															"                                        dataTypeUnderTest) {",
															"    pm.test(\"CouldFaultyValuesBeGenerated\", function () {",
															"        pm.expect(supportedRadioSignalIdDatatype).to.be.a(\"string\");",
															"        pm.expect(supportedRadioSignalIdDatatype).to.not.have.lengthOf(0);",
															"        pm.expect(supportedRadioSignalIdLength).to.be.an(\"number\");",
															"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
															"        pm.expect(expectedRadioSignalIdCanBeIndependentlyConfigured).to.be.a(\"boolean\");",
															"        pm.expect(dataTypeUnderTest).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSettingWrongRadioSignalIdBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully misconfigured for provoking an alarm.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be changed.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSettingWrongRadioSignalIdBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "ValidationRequests",
									"item": [
										{
											"name": "LtpCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-----------------------Checking AirInterfaceLtp for Completeness--------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* This Request is for validating AirInterfaceLtp objects against definition ",
															"*",
															"* ONF Core IM 1.4",
															"*",
															"* as it can be found on https://github.com/openBackhaul/core/tree/tsp",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"\";",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 5;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let AIR_INTERFACE_LTP_SCHEMA = {",
															"    \"type\": \"object\",",
															"\t\"properties\": {",
															"        \"core-model-1-4:logical-termination-point\": {",
															"            \"type\": \"array\",",
															"            \"items\": {",
															"                \"type\": \"object\",",
															"                \"properties\": {",
															"                    \"physical-port-reference\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"string\",",
															"                        },",
															"                    },                    ",
															"                    \"connected-ltp\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                    \"supporting-pc\": \t\t\t\t            \t            { \"type\": \"string\" },",
															"                    \"client-ltp\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"string\",",
															"                        },",
															"                    },",
															"                    \"server-ltp\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"string\",",
															"                        },",
															"                    },",
															"                    \"ltp-direction\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                    \"transfer-capacity-pac\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"embedded-clock\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"run-mode\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"encompassed-clock\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },",
															"                                \"encapsulated-fc\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": {",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"uuid\": \t\t\t\t\t                    { \"type\": \"string\" },",
															"                                            \"local-id\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"lifecycle-state\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                                            \"layer-protocol-name\": \t\t\t                { \"type\": \"string\" },",
															"                                            \"administrative-state\":    \t\t\t\t\t    { \"type\": \"string\" },",
															"                                            \"name\": {",
															"                                                \"type\": \"array\",",
															"                                                \"items\": { ",
															"                                                    \"type\": \"object\",",
															"                                                    \"properties\": {",
															"                                                    },",
															"                                                },",
															"                                            },",
															"                                            \"fc-route\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"operational-state\":     \t\t\t\t\t    { \"type\": \"string\" },",
															"                                            \"administrative-control\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                            \"supporting-pc\": \t\t\t\t            \t{ \"type\": \"string\" },",
															"                                            \"service-priority\": \t\t\t                { \"type\": \"string\" },",
															"                                            \"forwarding-direction\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                            \"fc-port\": {",
															"                                                \"type\": \"array\",",
															"                                                \"items\": {",
															"                                                    \"type\": \"object\",",
															"                                                    \"properties\": {",
															"                                                    },",
															"                                                },",
															"                                            },",
															"                                            \"is-protection-lock-out\": \t\t\t\t\t    { \"type\": \"boolean\" },                    ",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"sync-ltp\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },                                ",
															"                                \"encapsulated-casc\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },",
															"                                \"phase-aligned-clock\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },",
															"                                \"local-id\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"configured-client-capacity\": \t\t\t\t\t{ \"type\": \"string\" },",
															"                                \"fc-blocks-signal-to-lp\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                \"lifecycle-state\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                                \"layer-protocol-name\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                                \"termination-state\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                                \"administrative-state\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                \"lp-direction\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                                \"is-protection-lock-out\":            \t\t\t{ \"type\": \"boolean\" },                    ",
															"                                \"operational-state\":     \t\t\t            { \"type\": \"string\" },",
															"                                \"administrative-control\": \t\t\t\t\t    { \"type\": \"string\" },                                ",
															"                                \"name\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"label\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"extension\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"operational-state\":     \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"administrative-control\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"administrative-state\":    \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"lifecycle-state\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                                \"address\": \t\t\t\t\t                                { \"type\": \"string\" },",
															"                            },",
															"                        },",
															"                    },                  ",
															"                    \"peer-ltp\":              \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"ltp-in-other-view\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"string\",",
															"                        },",
															"                    },",
															"                    \"ltp-augment-1-0:ltp-augment-pac\": {",
															"                        \"type\": \"object\",",
															"                        \"properties\": {",
															"                            \"ltp-augment-capability\": {",
															"                                \"type\": \"object\",",
															"                                \"properties\": {",
															"                                    \"equipment\": {",
															"                                        \"type\": \"array\",",
															"                                        \"items\": { ",
															"                                            \"type\": \"string\",",
															"                                        },",
															"                                    },                    ",
															"                                    \"connector\":                                 { \"type\": \"string\" },",
															"                                },",
															"                                \"required\": [",
															"                                    \"equipment\", ",
															"                                    \"connector\",",
															"                                ],",
															"                            },",
															"                        },",
															"                        \"required\": [",
															"                            \"ltp-augment-capability\", ",
															"                        ],",
															"                    },",
															"                    \"layer-protocol\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": {",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"layer-protocol-name\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                                \"configured-client-capacity\": \t\t\t\t\t{ \"type\": \"string\" },",
															"                                \"lp-direction\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                                \"termination-state\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                                \"configuration-and-switch-control\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },",
															"                                \"is-protection-lock-out\":            \t\t\t{ \"type\": \"boolean\" },",
															"                                \"fc-blocks-signal-to-lp\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                \"air-interface-2-0:air-interface-pac\": {",
															"                                    \"type\": \"object\",",
															"                                    \"properties\": {",
															"                                        \"air-interface-capability\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"type-of-equipment\": \t\t\t\t\t\t\t{ \"type\": \"string\"  },",
															"                                                \"tx-frequency-min\": \t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                                                \"tx-frequency-max\": \t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                                                \"rx-frequency-min\": \t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                                                \"rx-frequency-max\": \t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                                                \"transmission-mode-list\":                       { \"type\": \"array\"   },",
															"                                                \"duplex-distance-is-freely-configurable\": \t\t{ \"type\": \"boolean\" },",
															"                                                \"duplex-distance-list\":                         { \"type\": \"array\"   },",
															"                                                \"auto-freq-select-is-avail\": \t\t\t\t\t{ \"type\": \"boolean\" },\t",
															"                                                \"adaptive-modulation-is-avail\": \t\t\t\t{ \"type\": \"boolean\" },\t",
															"                                                \"atpc-is-avail\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"atpc-range\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                                                \"supported-radio-signal-id-datatype\": { \"enum\": [",
															"                                                                                    \"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_INTEGER\",",
															"                                                                                    \"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_STRING\",",
															"                                                                                    \"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_NOT_YET_DEFINED\",",
															"                                                                                ]",
															"                                                },",
															"                                                \"supported-radio-signal-id-length\": \t\t\t{ \"type\": \"number\"  },",
															"                                                \"expected-equals-transmitted-radio-signal-id\":\t{ \"type\": \"boolean\" },",
															"                                                \"encryption-is-avail\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"supported-loop-back-kind-list\":                { \"type\": \"array\"   },",
															"                                                \"maintenance-timer-range\": \t\t\t\t\t\t{ \"type\": \"string\"  },",
															"                                                \"supported-alarm-list\":                         { \"type\": \"array\"   },",
															"                                                \"performance-monitoring-is-avail\": \t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"direction-of-acm-performance-values\": { \"enum\": [",
															"                                                                                    \"air-interface-2-0:DIRECTION_TYPE_TX\",",
															"                                                                                    \"air-interface-2-0:DIRECTION_TYPE_RX\",",
															"                                                                                    \"air-interface-2-0:DIRECTION_TYPE_NONE\",",
															"                                                                                ]",
															"                                                },",
															"                                            },",
															"                                        },",
															"                                        \"air-interface-configuration\":{",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"air-interface-name\": \t\t\t\t\t{ \"type\": \"string\"  },",
															"                                                \"remote-air-interface-name\": \t\t\t{ \"type\": \"string\"  },",
															"                                                \"transmitted-radio-signal-id\":          { \"type\": \"object\"  },",
															"                                                \"expected-radio-signal-id\":             { \"type\": \"object\"  },",
															"                                                \"tx-frequency\": \t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                                                \"rx-frequency\": \t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                                                \"transmission-mode-min\": \t\t\t\t{ \"type\": \"string\"  },",
															"                                                \"transmission-mode-max\": \t\t\t\t{ \"type\": \"string\"  },",
															"                                                \"power-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"transmitter-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"receiver-is-on\": \t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"tx-power\": \t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                                                \"adaptive-modulation-is-on\": \t\t\t{ \"type\": \"boolean\" },",
															"                                                \"xpic-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"mimo-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"alic-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"atpc-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"atpc-thresh-upper\": \t\t\t\t\t{ \"type\": \"number\"  },",
															"                                                \"atpc-thresh-lower\": \t\t\t\t\t{ \"type\": \"number\"  },",
															"                                                \"atpc-tx-power-min\": \t\t\t\t\t{ \"type\": \"number\"  },",
															"                                                \"auto-freq-select-is-on\": \t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"auto-freq-select-range\": \t\t\t\t{ \"type\": \"number\"  },",
															"                                                \"modulation-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"encryption-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"cryptographic-key\": \t\t\t\t\t{ \"type\": \"string\"  },",
															"                                                \"loop-back-kind-on\": { \"enum\": [",
															"                                                                    \"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_REMOTE\",",
															"                                                                    \"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_LOCAL\",",
															"                                                                    \"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_REMOTE\",",
															"                                                                    \"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_LOCAL\",",
															"                                                                    \"air-interface-2-0:LOOP_BACK_TYPE_NONE\",\t\t\t\t\t\t\t\t",
															"                                                            ]",
															"                                                },",
															"                                                \"maintenance-timer\": \t\t\t\t\t{ \"type\": \"number\"  },",
															"                                                \"problem-kind-severity-list\":           { \"type\": \"array\"   },",
															"                                                \"g-826-threshold-cross-alarm-list\":     { \"type\": \"array\"   },",
															"                                                \"xlts-threshold-cross-alarm-list\":      { \"type\": \"array\"   },",
															"                                                \"acm-threshold-cross-alarm-list\":       { \"type\": \"array\"   },",
															"                                                \"clearing-threshold-cross-alarms-is-on\":{ \"type\": \"boolean\" },",
															"                                                \"performance-monitoring-is-on\": \t\t{ \"type\": \"boolean\" },",
															"                                            },",
															"                                        },",
															"                                        \"air-interface-status\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"interface-status\": { \"enum\": [",
															"                                                                \"air-interface-2-0:INTERFACE_STATUS_TYPE_UP\",",
															"                                                                \"air-interface-2-0:INTERFACE_STATUS_TYPE_DOWN\",",
															"                                                                \"air-interface-2-0:INTERFACE_STATUS_TYPE_TESTING\",",
															"                                                                \"air-interface-2-0:INTERFACE_STATUS_TYPE_UNKNOWN\",",
															"                                                                \"air-interface-2-0:INTERFACE_STATUS_TYPE_DORMANT\",",
															"                                                                \"air-interface-2-0:INTERFACE_STATUS_TYPE_NOT_PRESENT\",",
															"                                                                \"air-interface-2-0:INTERFACE_STATUS_TYPE_LOWER_LAYER_DOWN\",",
															"                                                                \"air-interface-2-0:INTERFACE_STATUS_TYPE_ADMIN_DOWN\",",
															"                                                                \"air-interface-2-0:INTERFACE_STATUS_TYPE_NOT_YET_DEFINED\",",
															"                                                            ]",
															"                                                },",
															"                                                \"tx-frequency-cur\": \t\t\t\t    { \"type\": \"number\"  },",
															"                                                \"rx-frequency-cur\": \t\t\t\t    { \"type\": \"number\"  },",
															"                                                \"transmission-mode-cur\":                { \"type\": \"string\"  },",
															"                                                \"received-radio-signal-id\":             { \"type\": \"object\"  },",
															"                                                \"radio-power-is-up\": \t\t\t\t    { \"type\": \"boolean\" },",
															"                                                \"link-is-up\": \t\t\t\t\t\t    { \"type\": \"boolean\" },",
															"                                                \"xpic-is-up\": \t\t\t\t\t\t    { \"type\": \"boolean\" },",
															"                                                \"mimo-is-up\": \t\t\t\t\t\t    { \"type\": \"boolean\" },",
															"                                                \"alic-is-up\": \t\t\t\t\t\t    { \"type\": \"boolean\" },",
															"                                                \"atpc-is-up\": \t\t\t\t\t\t    { \"type\": \"boolean\" },",
															"                                                \"auto-freq-select-is-up\": \t\t\t    { \"type\": \"boolean\" },",
															"                                                \"local-end-point-id\": \t\t\t\t    { \"type\": \"string\"  },",
															"                                                \"remote-end-point-id\":\t \t\t\t    { \"type\": \"string\"  },",
															"                                                \"loop-back-kind-up\": { \"enum\": [",
															"                                                                    \"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_REMOTE\",",
															"                                                                    \"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_LOCAL\",",
															"                                                                    \"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_REMOTE\",",
															"                                                                    \"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_LOCAL\",",
															"                                                                    \"air-interface-2-0:LOOP_BACK_TYPE_NONE\",",
															"                                                                ]",
															"                                                },",
															"                                                \"performance-monitoring-is-up\":     \t{ \"type\": \"boolean\" },",
															"                                                \"rx-level-cur\": \t\t\t\t\t    { \"type\": \"number\"  },",
															"                                                \"tx-level-cur\": \t\t\t\t\t    { \"type\": \"number\"  },",
															"                                                \"snir-cur\": \t\t\t\t\t\t    { \"type\": \"number\"  },",
															"                                                \"xpd-cur\": \t\t\t\t\t\t\t    { \"type\": \"number\"  },",
															"                                                \"rf-temp-cur\": \t\t\t\t\t\t    { \"type\": \"number\"  },",
															"                                            },",
															"                                        },",
															"                                        \"air-interface-current-problems\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"current-problem-list\":                 { \"type\": \"array\"   },",
															"                                                \"number-of-current-problems\":  \t\t\t{ \"type\": \"number\"  },",
															"                                                \"time-of-latest-change\":                { \"type\": \"string\"  },",
															"                                            },",
															"                                        },",
															"                                        \"air-interface-current-performance\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"current-performance-data-list\":        { \"type\": \"array\"   },",
															"                                                \"number-of-current-performance-sets\":   { \"type\": \"number\"  },",
															"                                            },",
															"                                        },",
															"                                        \"air-interface-historical-performances\":{",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"historical-performance-data-list\":     { \"type\": \"array\"   },",
															"                                                \"number-of-historical-performance-sets\":{ \"type\": \"number\"  },",
															"                                                \"time-of-latest-change\": \t\t\t    { \"type\": \"string\"  },",
															"                                            },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"local-id\": \t\t\t\t\t                            { \"type\": \"string\" },",
															"                                \"name\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"label\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"extension\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"operational-state\":     \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"administrative-control\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"administrative-state\":    \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"lifecycle-state\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                                \"address\": \t\t\t\t\t                                { \"type\": \"string\" },",
															"                            },",
															"                            \"required\": [",
															"                                \"layer-protocol-name\",",
															"                                \"air-interface-2-0:air-interface-pac\",",
															"                                \"local-id\",",
															"                            ],",
															"                        },",
															"                    },",
															"                    \"external-managed-id\": {",
															"                        \"type\": \"object\",",
															"                        \"properties\": {",
															"                            \"manager-identifier\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                            \"external-managed-uuid\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                        },",
															"                    },",
															"                    \"local-id\": \t\t\t\t\t                            { \"type\": \"string\" },",
															"                    \"uuid\": \t\t\t\t\t                                { \"type\": \"string\" },",
															"                    \"name\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"value\":                                        { \"type\": \"string\" },",
															"                            },",
															"                        },",
															"                    },",
															"                    \"label\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"value\":                                        { \"type\": \"string\" },",
															"                            },",
															"                        },",
															"                    },",
															"                    \"extension\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"value\":                                        { \"type\": \"string\" },",
															"                            },",
															"                        },",
															"                    },",
															"                    \"operational-state\":     \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"administrative-control\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"administrative-state\":    \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"lifecycle-state\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                    \"address\": \t\t\t\t\t                                { \"type\": \"string\" },",
															"                },",
															"                \"required\": [",
															"                    \"client-ltp\",",
															"                    \"ltp-augment-1-0:ltp-augment-pac\",",
															"                    \"layer-protocol\",",
															"                    \"uuid\",",
															"                    \"name\",",
															"                ],",
															"            },",
															"        },",
															"    },",
															"    \"required\": [",
															"        \"core-model-1-4:logical-termination-point\",",
															"    ]",
															"};",
															"pm.variables.set(\"schema\", AIR_INTERFACE_LTP_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\", \"\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PacCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-----------------------Checking AirInterface_Pac for Completeness-------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* PacCompleteness",
															"* ",
															"* This Request is for validating AirInterface Pac Objects against definition ",
															"* AirInterface_2.0.0-tsp.191122.1800",
															"* as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the *_Pac class",
															"*  - availability of all attributes in this particular class",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"pac\";             // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 3;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let AIR_INTERFACE_PAC_SCHEMA = {",
															"    \"type\": \"object\",",
															"\t\"properties\": {",
															"        \"air-interface-capability\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"type-of-equipment\": \t\t\t\t\t\t\t{ \"type\": \"string\"  },",
															"                \"tx-frequency-min\": \t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"tx-frequency-max\": \t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"rx-frequency-min\": \t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"rx-frequency-max\": \t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"transmission-mode-list\":                       { \"type\": \"array\"   },",
															"                \"duplex-distance-is-freely-configurable\": \t\t{ \"type\": \"boolean\" },",
															"                \"duplex-distance-list\":                         { \"type\": \"array\"   },",
															"                \"auto-freq-select-is-avail\": \t\t\t\t\t{ \"type\": \"boolean\" },\t",
															"                \"adaptive-modulation-is-avail\": \t\t\t\t{ \"type\": \"boolean\" },\t",
															"                \"atpc-is-avail\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"atpc-range\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"supported-radio-signal-id-datatype\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_INTEGER\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_STRING\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t]",
															"                },",
															"                \"supported-radio-signal-id-length\": \t\t\t{ \"type\": \"number\"  },",
															"                \"expected-equals-transmitted-radio-signal-id\":\t{ \"type\": \"boolean\" },",
															"                \"encryption-is-avail\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"supported-loop-back-kind-list\":                { \"type\": \"array\"   },",
															"                \"maintenance-timer-range\": \t\t\t\t\t\t{ \"type\": \"string\"  },",
															"                \"supported-alarm-list\":                         { \"type\": \"array\"   },",
															"                \"performance-monitoring-is-avail\": \t\t\t\t{ \"type\": \"boolean\" },",
															"                \"direction-of-acm-performance-values\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:DIRECTION_TYPE_TX\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:DIRECTION_TYPE_RX\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:DIRECTION_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t]",
															"                },",
															"            },",
															"        },",
															"        \"air-interface-configuration\":{",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"air-interface-name\": \t\t\t\t\t{ \"type\": \"string\"  },",
															"                \"remote-air-interface-name\": \t\t\t{ \"type\": \"string\"  },",
															"                \"transmitted-radio-signal-id\":          { \"type\": \"object\"  },",
															"                \"expected-radio-signal-id\":             { \"type\": \"object\"  },",
															"                \"tx-frequency\": \t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"rx-frequency\": \t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"transmission-mode-min\": \t\t\t\t{ \"type\": \"string\"  },",
															"                \"transmission-mode-max\": \t\t\t\t{ \"type\": \"string\"  },",
															"                \"power-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"transmitter-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"receiver-is-on\": \t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"tx-power\": \t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"adaptive-modulation-is-on\": \t\t\t{ \"type\": \"boolean\" },",
															"                \"xpic-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"mimo-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"alic-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"atpc-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"atpc-thresh-upper\": \t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"atpc-thresh-lower\": \t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"atpc-tx-power-min\": \t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"auto-freq-select-is-on\": \t\t\t\t{ \"type\": \"boolean\" },",
															"                \"auto-freq-select-range\": \t\t\t\t{ \"type\": \"number\"  },",
															"                \"modulation-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"encryption-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"cryptographic-key\": \t\t\t\t\t{ \"type\": \"string\"  },",
															"                \"loop-back-kind-on\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_NONE\",\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t   ]",
															"                },",
															"                \"maintenance-timer\": \t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"problem-kind-severity-list\":           { \"type\": \"array\"   },",
															"                \"g-826-threshold-cross-alarm-list\":     { \"type\": \"array\"   },",
															"                \"xlts-threshold-cross-alarm-list\":      { \"type\": \"array\"   },",
															"                \"acm-threshold-cross-alarm-list\":       { \"type\": \"array\"   },",
															"                \"clearing-threshold-cross-alarms-is-on\":{ \"type\": \"boolean\" },",
															"                \"performance-monitoring-is-on\": \t\t{ \"type\": \"boolean\" },",
															"\t        },",
															"        },",
															"        \"air-interface-status\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"interface-status\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_UP\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_DOWN\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_TESTING\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_DORMANT\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_NOT_PRESENT\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_LOWER_LAYER_DOWN\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_ADMIN_DOWN\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t]",
															"                },",
															"                \"tx-frequency-cur\": \t\t\t\t    { \"type\": \"number\"  },",
															"                \"rx-frequency-cur\": \t\t\t\t    { \"type\": \"number\"  },",
															"                \"transmission-mode-cur\":                { \"type\": \"string\"  },",
															"                \"received-radio-signal-id\":             { \"type\": \"object\"  },",
															"                \"radio-power-is-up\": \t\t\t\t    { \"type\": \"boolean\" },",
															"                \"link-is-up\": \t\t\t\t\t\t    { \"type\": \"boolean\" },",
															"                \"xpic-is-up\": \t\t\t\t\t\t    { \"type\": \"boolean\" },",
															"                \"mimo-is-up\": \t\t\t\t\t\t    { \"type\": \"boolean\" },",
															"                \"alic-is-up\": \t\t\t\t\t\t    { \"type\": \"boolean\" },",
															"                \"atpc-is-up\": \t\t\t\t\t\t    { \"type\": \"boolean\" },",
															"                \"auto-freq-select-is-up\": \t\t\t    { \"type\": \"boolean\" },",
															"                \"local-end-point-id\": \t\t\t\t    { \"type\": \"string\"  },",
															"                \"remote-end-point-id\":\t \t\t\t    { \"type\": \"string\"  },",
															"                \"loop-back-kind-up\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_NONE\",",
															"                                ]",
															"                },",
															"                \"performance-monitoring-is-up\":     \t{ \"type\": \"boolean\" },",
															"                \"rx-level-cur\": \t\t\t\t\t    { \"type\": \"number\"  },",
															"                \"tx-level-cur\": \t\t\t\t\t    { \"type\": \"number\"  },",
															"                \"snir-cur\": \t\t\t\t\t\t    { \"type\": \"number\"  },",
															"                \"xpd-cur\": \t\t\t\t\t\t\t    { \"type\": \"number\"  },",
															"                \"rf-temp-cur\": \t\t\t\t\t\t    { \"type\": \"number\"  },",
															"            },",
															"        },",
															"        \"air-interface-current-problems\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"current-problem-list\":                 { \"type\": \"array\"   },",
															"                \"number-of-current-problems\":  \t\t\t{ \"type\": \"number\"  },",
															"                \"time-of-latest-change\":                { \"type\": \"string\"  },",
															"            },",
															"        },",
															"        \"air-interface-current-performance\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"current-performance-data-list\":        { \"type\": \"array\"   },",
															"                \"number-of-current-performance-sets\":   { \"type\": \"number\"  },",
															"            },",
															"\t    },",
															"        \"air-interface-historical-performances\":{",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"historical-performance-data-list\":     { \"type\": \"array\"   },",
															"                \"number-of-historical-performance-sets\":{ \"type\": \"number\"  },",
															"                \"time-of-latest-change\": \t\t\t    { \"type\": \"string\"  },",
															"            },",
															"        },",
															"\t},    ",
															"\t\"required\": [\"air-interface-capability\",",
															"                    \"air-interface-configuration\",",
															"                    \"air-interface-status\",",
															"                    \"air-interface-current-problems\",",
															"                    \"air-interface-current-performance\",",
															"                    \"air-interface-historical-performances\",",
															"    ]",
															"};",
															"pm.variables.set(\"schema\", AIR_INTERFACE_PAC_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CapabilityCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------------Checking AirInterfaceCapability for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* CapabilityCompleteness",
															"* ",
															"* This Request is for validating AirInterface Capability Objects against definition ",
															"* AirInterface_2.0.0-tsp.191122.1800",
															"* as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Capability class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let AIR_INTERFACE_CAPABILITY_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"type-of-equipment\": \t\t\t\t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\"tx-frequency-min\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"tx-frequency-max\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"rx-frequency-min\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"rx-frequency-max\": \t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"transmission-mode-list\": {",
															"    \t\t\"type\": \"array\",",
															"    \t\t\"items\": { ",
															"        \t\t\"type\": \"object\",",
															"        \t\t\"properties\": {",
															"                    \"transmission-mode-name\":     \t\t\t\t{ \"type\": \"string\" },",
															"                    \"transmission-mode-rank\":     \t\t\t\t{ \"type\": \"number\" },",
															"                    \"channel-bandwidth\":      \t\t\t\t\t{ \"type\": \"number\" },",
															"                    \"modulation-scheme\":     \t\t\t\t    { \"type\": \"number\" },",
															"                    \"code-rate\":        \t\t\t\t\t\t{ \"type\": \"number\" },",
															"                    \"symbol-rate-reduction-factor\":   \t\t\t{ \"type\": \"number\" },",
															"                    \"tx-power-min\":      \t\t\t\t\t\t{ \"type\": \"number\" },",
															"                    \"tx-power-max\":       \t\t\t\t\t\t{ \"type\": \"number\" },",
															"                    \"rx-threshold\":       \t\t\t\t\t\t{ \"type\": \"number\" },",
															"                    \"am-upshift-level\":      \t\t\t\t\t{ \"type\": \"number\" },",
															"                    \"am-downshift-level\":      \t\t\t\t\t{ \"type\": \"number\" },",
															"                    \"xpic-is-avail\":       \t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                    \"supported-as-fixed-configuration\":  \t\t{ \"type\": \"boolean\" }",
															"        \t\t},",
															"                \"required\": [\"transmission-mode-name\", ",
															"                                \"transmission-mode-rank\",",
															"\t\t\t\t\t\t\t\t\"channel-bandwidth\",",
															"\t\t\t\t\t\t\t\t\"modulation-scheme\",",
															"\t\t\t\t\t\t\t\t\"code-rate\",",
															"\t\t\t\t\t\t\t\t\"symbol-rate-reduction-factor\",",
															"\t\t\t\t\t\t\t\t\"tx-power-min\",",
															"\t\t\t\t\t\t\t\t\"tx-power-max\",",
															"\t\t\t\t\t\t\t\t\"rx-threshold\",",
															"\t\t\t\t\t\t\t\t\"am-upshift-level\",",
															"\t\t\t\t\t\t\t\t\"am-downshift-level\",",
															"\t\t\t\t\t\t\t\t\"xpic-is-avail\",",
															"\t\t\t\t\t\t\t\t\"supported-as-fixed-configuration\"",
															"                ]",
															"    \t\t}",
															"\t\t},",
															"\t\t\"duplex-distance-is-freely-configurable\": \t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"duplex-distance-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\":                                    { \"type\": \"number\" }",
															"\t\t},",
															"\t\t\"auto-freq-select-is-avail\": \t\t\t\t\t{ \"type\": \"boolean\" }, \t\t",
															"\t\t\"adaptive-modulation-is-avail\": \t\t\t\t{ \"type\": \"boolean\" }, \t\t",
															"\t\t\"atpc-is-avail\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"atpc-range\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\"supported-radio-signal-id-datatype\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_INTEGER\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_STRING\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t\t\t]",
															"\t\t},",
															"\t\t\"supported-radio-signal-id-length\": \t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"expected-equals-transmitted-radio-signal-id\":\t{ \"type\": \"boolean\" }, ",
															"\t\t\"encryption-is-avail\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },\t",
															"\t\t\"supported-loop-back-kind-list\": { ",
															"\t\t    \"type\": \"array\",",
															"\t\t\t\"items\": { \"enum\": [",
															"\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_REMOTE\",",
															"\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_LOCAL\",",
															"\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_REMOTE\",",
															"\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_LOCAL\",",
															"\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_NONE\"\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t   ]",
															"\t\t\t}",
															"\t\t}, \t\t ",
															"\t\t\"maintenance-timer-range\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\"supported-alarm-list\": {",
															"            \"type\": \"array\",",
															"            \"item\":                                     { \"type\": \"string\" }",
															"\t\t},",
															"\t\t\"performance-monitoring-is-avail\": \t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"direction-of-acm-performance-values\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:DIRECTION_TYPE_TX\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:DIRECTION_TYPE_RX\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:DIRECTION_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t ]",
															"\t\t},",
															"\t},",
															"\t\"required\": [\"type-of-equipment\", ",
															"\t\t\t\t\t\"tx-frequency-min\",",
															"\t\t\t\t\t\"tx-frequency-max\",",
															"\t\t\t\t\t\"rx-frequency-min\",",
															"\t\t\t\t\t\"rx-frequency-max\",",
															"\t\t\t\t\t\"transmission-mode-list\",",
															"\t\t\t\t\t\"duplex-distance-is-freely-configurable\",",
															"\t\t\t\t\t\"duplex-distance-list\",",
															"\t\t\t\t\t\"auto-freq-select-is-avail\",",
															"\t\t\t\t\t\"adaptive-modulation-is-avail\",",
															"\t\t\t\t\t\"atpc-is-avail\",",
															"\t\t\t\t\t\"atpc-range\",",
															"\t\t\t\t\t\"supported-radio-signal-id-datatype\",",
															"\t\t\t\t\t\"supported-radio-signal-id-length\",",
															"\t\t\t\t\t\"expected-equals-transmitted-radio-signal-id\",",
															"\t\t\t\t\t\"encryption-is-avail\",",
															"\t\t\t\t\t\"supported-loop-back-kind-list\",",
															"\t\t\t\t\t\"maintenance-timer-range\",",
															"\t\t\t\t\t\"supported-alarm-list\",",
															"\t\t\t\t\t\"performance-monitoring-is-avail\",",
															"\t\t\t\t\t\"direction-of-acm-performance-values\",",
															"\t]",
															"};",
															"pm.variables.set(\"schema\", AIR_INTERFACE_CAPABILITY_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ConfigurationCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------------Checking AirInterfaceConfiguration for Completeness--------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ConfigurationCompleteness",
															"* ",
															"* This Request is for validating AirInterface Configuration Objects against definition ",
															"* AirInterface_2.0.0-tsp.191122.1800",
															"* as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Configuration class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let AIR_INTERFACE_CONFIGURATION_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"air-interface-name\": \t\t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\"remote-air-interface-name\": \t\t\t{ \"type\": \"string\" }, ",
															"\t\t\"transmitted-radio-signal-id\": { ",
															"\t\t\t\"type\": \"object\", ",
															"\t\t\t\"properties\": {",
															"\t\t\t\t\"numeric-radio-signal-id\": \t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\"alphanumeric-radio-signal-id\": \t{ \"type\": \"string\" }",
															"\t\t\t}",
															"\t\t}, ",
															"\t\t\"expected-radio-signal-id\": {",
															"\t\t\t\"type\": \"object\", ",
															"\t\t\t\"properties\": {",
															"\t\t\t\t\"numeric-radio-signal-id\": \t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\"alphanumeric-radio-signal-id\": \t{ \"type\": \"string\" }",
															"\t\t\t}",
															"\t\t}, ",
															"\t\t\"tx-frequency\": \t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"rx-frequency\": \t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"transmission-mode-min\": \t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\"transmission-mode-max\": \t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\"power-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"transmitter-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"receiver-is-on\": \t\t\t\t\t\t{ \"type\": \"boolean\" }, \t",
															"\t\t\"tx-power\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"adaptive-modulation-is-on\": \t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"xpic-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"mimo-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"alic-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"atpc-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" }, \t",
															"\t\t\"atpc-thresh-upper\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"atpc-thresh-lower\": \t\t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\"atpc-tx-power-min\": \t\t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\"auto-freq-select-is-on\": \t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"auto-freq-select-range\": \t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\"modulation-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" }, \t",
															"\t\t\"encryption-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" }, \t",
															"\t\t\"cryptographic-key\": \t\t\t\t\t{ \"type\": \"string\" }, \t",
															"\t\t\"loop-back-kind-on\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_NONE\"\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t   ]",
															"\t\t}, \t",
															"\t\t\"maintenance-timer\": \t\t\t\t\t{ \"type\": \"number\" }, \t",
															" \t\t\"problem-kind-severity-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"    \t\t\t\t\"problem-kind-name\": \t\t\t\t{ \"type\": \"string\" },",
															"    \t\t\t\t\"problem-kind-severity\": { \"enum\": [",
															"    \t\t\t\t\t\t\t\t\t\t\t    \"air-interface-2-0:SEVERITY_TYPE_NON_ALARMED\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_WARNING\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_MINOR\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_MAJOR\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_CRITICAL\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\"",
															"    \t\t\t\t\t\t\t\t\t\t   ]",
															"    \t\t\t\t}",
															"\t\t\t    },",
															"\t\t\t    \"required\": [\"problem-kind-name\",",
															"\t\t\t                    \"problem-kind-severity\"",
															"\t\t\t    ]",
															"\t\t\t}    ",
															"\t\t}, \t\t\t",
															" \t\t\"g-826-threshold-cross-alarm-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"    \t\t\t\t\"g-826-value-kind\": { \"enum\": [",
															"    \t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:G_826_TYPE_ES\",",
															"    \t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:G_826_TYPE_SES\",",
															"    \t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:G_826_TYPE_CSES\",",
															"    \t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:G_826_TYPE_UAS\",",
															"    \t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:G_826_TYPE_NOT_SPECIFIED\"",
															"    \t\t\t\t\t\t\t\t\t  ]",
															"    \t\t\t\t},\t\t\t",
															"    \t\t\t\t\"alarm-raising-threshold\": \t\t\t{ \"type\": \"number\" },",
															"    \t\t\t\t\"alarm-clearing-threshold\": \t\t{ \"type\": \"number\" },",
															"    \t\t\t\t\"granularity-period\": { \"enum\": [",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"    \t\t\t\t\t\t\t\t\t    ]",
															"    \t\t\t\t}",
															"\t\t\t    },",
															"\t\t\t    \"required\": [\"g-826-value-kind\",",
															"\t\t\t                    \"alarm-raising-threshold\",",
															"\t\t\t                    \"alarm-clearing-threshold\",",
															"\t\t\t                    \"granularity-period\"",
															"\t\t\t    ]",
															"\t\t\t}",
															"\t\t}, \t\t\t",
															" \t\t\"xlts-threshold-cross-alarm-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"    \t\t\t\t\"level-threshold-second-kind\": { \"enum\": [",
															"    \t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_RLTS\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_TLTS\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_NOT_YET_DEFINED\"",
															"    \t\t\t\t\t\t\t\t\t\t\t\t ]",
															"    \t\t\t\t},\t\t\t\t\t",
															"    \t\t\t\t\"xlts-level\": \t\t\t\t\t    { \"type\": \"number\" },",
															"    \t\t\t\t\"amount-of-seconds\":\t\t\t    { \"type\": \"number\" },",
															"    \t\t\t\t\"granularity-period\": { \"enum\": [",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"    \t\t\t\t\t\t\t\t\t\t]",
															"    \t\t\t\t},",
															"    \t\t\t\t\"xlts-threshold-cross-alarm-definition-number\": { \"type\": \"number\" },",
															"\t\t\t    },",
															"\t\t\t    \"required\": [\"level-threshold-second-kind\",",
															"\t\t\t                    \"xlts-level\",",
															"\t\t\t                    \"amount-of-seconds\",",
															"\t\t\t                    \"granularity-period\",",
															"\t\t\t                    \"xlts-threshold-cross-alarm-definition-number\"",
															"\t\t\t    ]\t",
															"\t\t\t}",
															"\t\t}, \t\t\t\t\t\t",
															" \t\t\"acm-threshold-cross-alarm-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"    \t\t\t\t\"acm-threshold-cross-alarm-definition-number\": \t{ \"type\": \"number\" },",
															"    \t\t\t\t\"amount-of-seconds\": \t\t\t\t{ \"type\": \"number\" },\t",
															"    \t\t\t\t\"granularity-period\": { \"enum\": [",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"    \t\t\t\t\t\t\t\t\t\t]",
															"    \t\t\t\t},",
															"    \t\t\t\t\"transmission-mode\":                { \"type\": \"string\" }",
															"\t\t\t    },",
															"\t\t\t    \"required\": [\"acm-threshold-cross-alarm-definition-number\",",
															"\t\t\t                    \"amount-of-seconds\",",
															"\t\t\t                    \"granularity-period\",",
															"\t\t\t                    \"transmission-mode\"",
															"\t\t\t    ]",
															"\t\t\t}",
															"\t\t}, \t\t\t\t\t\t",
															"\t\t\"clearing-threshold-cross-alarms-is-on\":{ \"type\": \"boolean\" },\t",
															"\t\t\"performance-monitoring-is-on\": \t\t{ \"type\": \"boolean\" }",
															"\t},",
															" \t\"required\": [ \"air-interface-name\", ",
															"\t\t\t\t\t\"remote-air-interface-name\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\"transmitted-radio-signal-id\",",
															"\t\t\t\t\t\"expected-radio-signal-id\",\t",
															"\t\t\t\t\t\"tx-frequency\",",
															"\t\t\t\t\t\"rx-frequency\",",
															"\t\t\t\t\t\"transmission-mode-min\",",
															"\t\t\t\t\t\"transmission-mode-max\",",
															"\t\t\t\t\t\"power-is-on\",",
															"\t\t\t\t\t\"transmitter-is-on\",\t",
															"\t\t\t\t\t\"receiver-is-on\",\t\t\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\"tx-power\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\"adaptive-modulation-is-on\",",
															"\t\t\t\t\t\"xpic-is-on\",\t",
															"\t\t\t\t\t\"mimo-is-on\",",
															"\t\t\t\t\t\"alic-is-on\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\"atpc-is-on\",",
															"\t\t\t\t\t\"atpc-thresh-upper\",\t",
															"\t\t\t\t\t\"atpc-thresh-lower\",",
															"\t\t\t\t\t\"atpc-tx-power-min\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\"auto-freq-select-is-on\",",
															"\t\t\t\t\t\"auto-freq-select-range\",\t",
															"\t\t\t\t\t\"modulation-is-on\",",
															"\t\t\t\t\t\"encryption-is-on\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\"cryptographic-key\",",
															"\t\t\t\t\t\"loop-back-kind-on\",\t",
															"\t\t\t\t\t\"maintenance-timer\",\t\t",
															"\t\t\t\t\t\"problem-kind-severity-list\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\"g-826-threshold-cross-alarm-list\",",
															"\t\t\t\t\t\"xlts-threshold-cross-alarm-list\",\t",
															"\t\t\t\t\t\"acm-threshold-cross-alarm-list\",",
															"\t\t\t\t\t\"clearing-threshold-cross-alarms-is-on\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\"performance-monitoring-is-on\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t ]",
															"};",
															"pm.variables.set(\"schema\", AIR_INTERFACE_CONFIGURATION_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "StatusCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n----------------------Checking AirInterfaceStatus for Completeness------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* StatusCompleteness",
															"* ",
															"* This Request is for validating AirInterface Status Objects against definition ",
															"* AirInterface_2.0.0-tsp.191122.1800",
															"* as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Status class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"status\";          // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let AIR_INTERFACE_STATUS_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"interface-status\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_UP\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_DOWN\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_TESTING\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_DORMANT\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_NOT_PRESENT\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_LOWER_LAYER_DOWN\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_ADMIN_DOWN\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_NOT_YET_DEFINED\"\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t]",
															"\t\t}, \t\t  ",
															"\t\t\"tx-frequency-cur\": \t\t\t\t{ \"type\": \"number\"  }, ",
															"\t\t\"rx-frequency-cur\": \t\t\t\t{ \"type\": \"number\"  }, ",
															"\t\t\"transmission-mode-cur\":            { \"type\": \"string\" },",
															"\t\t\"received-radio-signal-id\": {",
															"\t\t\t\"type\": \"object\", ",
															"\t\t\t\"properties\": {",
															"\t\t\t\t\"numeric-radio-signal-id\": \t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\"alphanumeric-radio-signal-id\": { \"type\": \"string\" }",
															"\t\t\t},",
															"\t\t\t\"required\": [\"numeric-radio-signal-id\", ",
															"\t\t\t\t\t\t    \"alphanumeric-radio-signal-id\"",
															"\t\t\t]\t\t\t\t\t\t\t\t\t\t",
															"\t\t}, ",
															"\t\t\"radio-power-is-up\": \t\t\t\t{ \"type\": \"boolean\" }, \t ",
															"\t\t\"link-is-up\": \t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"xpic-is-up\": \t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"mimo-is-up\": \t\t\t\t\t\t{ \"type\": \"boolean\" }, \t ",
															"\t\t\"alic-is-up\": \t\t\t\t\t\t{ \"type\": \"boolean\" },\t ",
															"\t\t\"atpc-is-up\": \t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"auto-freq-select-is-up\": \t\t\t{ \"type\": \"boolean\" }, \t ",
															"\t\t\"local-end-point-id\": \t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\"remote-end-point-id\":\t \t\t\t{ \"type\": \"string\" },",
															"\t\t\"loop-back-kind-up\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_NONE\"\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t]",
															"\t\t}, \t\t ",
															"\t\t\"performance-monitoring-is-up\": \t{ \"type\": \"boolean\" }, ",
															"\t\t\"rx-level-cur\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"tx-level-cur\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"snir-cur\": \t\t\t\t\t\t{ \"type\": \"number\" }, \t ",
															"\t\t\"xpd-cur\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"rf-temp-cur\": \t\t\t\t\t\t{ \"type\": \"number\" }",
															"\t},",
															"\t\"required\": [\"interface-status\", ",
															"\t\t\t\t\"tx-frequency-cur\",\t",
															"\t\t\t\t\"rx-frequency-cur\",\t",
															"\t\t\t\t\"transmission-mode-cur\",",
															"\t\t\t\t\"received-radio-signal-id\",\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\"radio-power-is-up\",\t",
															"\t\t\t\t\"link-is-up\",",
															"\t\t\t\t\"xpic-is-up\",",
															"\t\t\t\t\"mimo-is-up\",",
															"\t\t\t\t\"alic-is-up\",",
															"\t\t\t\t\"atpc-is-up\",",
															"\t\t\t\t\"auto-freq-select-is-up\",",
															"\t\t\t\t\"local-end-point-id\",\t",
															"\t\t\t\t\"remote-end-point-id\",\t",
															"\t\t\t\t\"loop-back-kind-up\",\t",
															"\t\t\t\t\"performance-monitoring-is-up\",",
															"\t\t\t\t\"rx-level-cur\",",
															"\t\t\t\t\"tx-level-cur\",",
															"\t\t\t\t\"snir-cur\",",
															"\t\t\t\t\"xpd-cur\",",
															"\t\t\t\t\"rf-temp-cur\"",
															"\t]\t",
															"};",
															"pm.variables.set(\"schema\", AIR_INTERFACE_STATUS_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentProblemsCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n------------------Checking AirInterfaceCurrentProblems for Completeness-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* CurrentProblemsCompleteness",
															"* ",
															"* This Request is for validating AirInterface CurrentProblems Objects against definition ",
															"* AirInterface_2.0.0-tsp.191122.1800",
															"* as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the CurrentProblems class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"current-problems\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let AIR_INTERFACE_CURRENT_PROBLEMS_SCHEMA = {\t",
															"    \"type\": \"object\",",
															"    \"properties\": {",
															"\t\t\"current-problem-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\"problem-name\": \t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"sequence-number\": \t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\"timestamp\": \t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"problem-severity\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_NON_ALARMED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_WARNING\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_MINOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_MAJOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_CRITICAL\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t\t}\t\t\t\t\t",
															"\t\t\t\t},",
															"\t\t\t\t\"required\": [ \"problem-name\", ",
															"\t\t\t\t    \t\t\t\"sequence-number\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t    \t\t\"timestamp\",",
															"\t\t\t\t\t\t    \t\"problem-severity\"\t",
															"\t\t\t\t]\t\t\t",
															"\t\t\t}\t\t\t\t\t\t\t",
															"\t\t},",
															"\t\t\"number-of-current-problems\":  \t\t\t{ \"type\": \"number\" },",
															"\t\t\"time-of-latest-change\":                { \"type\": \"string\" },",
															"\t},",
															"\t\"required\": [ \"current-problem-list\",",
															"                    \"number-of-current-problems\",",
															"                    \"time-of-latest-change\",",
															"\t] ",
															"};",
															"pm.variables.set(\"schema\", AIR_INTERFACE_CURRENT_PROBLEMS_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentPerformanceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n----------------Checking AirInterfaceCurrentPerformance for Completeness------------------\");",
															"/****************************************************************************************",
															"* ",
															"* CurrentPerformanceCompleteness",
															"* ",
															"* This Request is for validating AirInterface CurrentPerformance Objects against definition ",
															"* AirInterface_2.0.0-tsp.191122.1800",
															"* as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the CurrentPerformance class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"\tvar RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"\tvar SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"\tvar capability = pm.collectionVariables.get(\"capability\");",
															"\tCouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"\tCouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"current-performance\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"// \"status\", \"current-problems\", \"current-performance\" ",
															"// or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"\tKEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"\tFILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let AIR_INTERFACE_CURRENT_PERFORMANCE_SCHEMA = {",
															"\t\"type\": \"object\",",
															"\t\"properties\": {",
															"\t\t\"current-performance-data-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\"performance-data\": {",
															"\t\t\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\"es\": { \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"ses\": { \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"cses\": { \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"unavailability\": { \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"tx-level-min\": { \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"tx-level-max\": { \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"tx-level-avg\": { \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"rx-level-min\": { \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"rx-level-max\": { \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"rx-level-avg\": { \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"time-xstates-list\": {",
															"\t\t\t\t\t\t\t\t\"type\": \"array\",",
															"\t\t\t\t\t\t\t\t\"items\": {",
															"\t\t\t\t\t\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\t\t\t\"time-xstate-sequence-number\": { \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\t\t\t\"transmission-mode\": { \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\t\t\t\"time\": { \"type\": \"number\" }",
															"\t\t\t\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\t\t\t\"required\": [\"time-xstate-sequence-number\",",
															"\t\t\t\t\t\t\t\t\t\t\"transmission-mode\",",
															"\t\t\t\t\t\t\t\t\t\t\"time\"",
															"\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t\t\t\t\t}",
															"\t\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\t\"snir-min\": { \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"snir-max\": { \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"snir-avg\": { \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"xpd-min\": { \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"xpd-max\": { \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"xpd-avg\": { \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"rf-temp-min\": { \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"rf-temp-max\": { \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"rf-temp-avg\": { \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"defect-blocks-sum\": { \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"time-period\": { \"type\": \"number\" }",
															"\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\"required\": [\"es\",",
															"\t\t\t\t\t\t\t\"ses\",",
															"\t\t\t\t\t\t\t\"cses\",",
															"\t\t\t\t\t\t\t\"unavailability\",",
															"\t\t\t\t\t\t\t\"tx-level-min\",",
															"\t\t\t\t\t\t\t\"tx-level-max\",",
															"\t\t\t\t\t\t\t\"tx-level-avg\",",
															"\t\t\t\t\t\t\t\"rx-level-min\",",
															"\t\t\t\t\t\t\t\"rx-level-max\",",
															"\t\t\t\t\t\t\t\"rx-level-avg\",",
															"\t\t\t\t\t\t\t\"time-xstates-list\",",
															"\t\t\t\t\t\t\t\"snir-min\",",
															"\t\t\t\t\t\t\t\"snir-max\",",
															"\t\t\t\t\t\t\t\"snir-avg\",",
															"\t\t\t\t\t\t\t\"xpd-min\",",
															"\t\t\t\t\t\t\t\"xpd-max\",",
															"\t\t\t\t\t\t\t\"xpd-avg\",",
															"\t\t\t\t\t\t\t\"rf-temp-min\",",
															"\t\t\t\t\t\t\t\"rf-temp-max\",",
															"\t\t\t\t\t\t\t\"rf-temp-avg\",",
															"\t\t\t\t\t\t\t\"defect-blocks-sum\",",
															"\t\t\t\t\t\t\t\"time-period\"",
															"\t\t\t\t\t\t]",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"timestamp\": { \"type\": \"string\" },",
															"\t\t\t\t\t\"suspect-interval-flag\": { \"type\": \"boolean\" },",
															"\t\t\t\t\t\"elapsed-time\": { \"type\": \"string\" },",
															"\t\t\t\t\t\"scanner-id\": { \"type\": \"string\" },",
															"\t\t\t\t\t\"granularity-period\": {",
															"\t\t\t\t\t\t\"enum\": [",
															"\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t]",
															"\t\t\t\t\t},",
															"\t\t\t\t},",
															"\t\t\t\t\"required\": [\"performance-data\",",
															"\t\t\t\t\t\"timestamp\",",
															"\t\t\t\t\t\"suspect-interval-flag\",",
															"\t\t\t\t\t\"elapsed-time\",",
															"\t\t\t\t\t\"scanner-id\",",
															"\t\t\t\t\t\"granularity-period\",",
															"\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-current-performance-sets\": { \"type\": \"number\" },",
															"\t},",
															"\t\"required\": [\"current-performance-data-list\",",
															"\t\t\"number-of-current-performance-sets\",",
															"\t]",
															"};",
															"try {",
															"\tif (capability[\"performance-monitoring-is-avail\"] === false) {",
															"\t\tpm.variables.set(\"schemaToBeShortened\", AIR_INTERFACE_CURRENT_PERFORMANCE_SCHEMA);",
															"\t\tpm.variables.set(\"unRequiredAttribute\", \"current-performance-data-list\");",
															"\t\teval(RemoveAttributeFromRequired)();",
															"\t\tAIR_INTERFACE_CURRENT_PERFORMANCE_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"\t\tCouldAirInterfaceCurrentPerformanceBeShortened(true);",
															"\t}",
															"} catch (error) {",
															"\tCouldAirInterfaceCurrentPerformanceBeShortened(false);",
															"}",
															"pm.variables.set(\"schema\", AIR_INTERFACE_CURRENT_PERFORMANCE_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"\teval(SettingTheRequestVariables)();",
															"\tCouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"\tCouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"\tpm.test(\"CouldInputBeLoaded\", function () {",
															"\t\tpm.expect(capability).to.be.an(\"object\");",
															"\t\tpm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"\t\tpm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"\t\tpm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"\t\tpm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"\t});",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"\tattributeUnterTest, contentType,",
															"\tfilteredDepth, filteredFields, requestBody) {",
															"\tpm.test(\"IsValueOfClassUnderTestCorrect\", function () {",
															"\t\tpm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"\t\t\t\"current-problems\", \"current-performance\",",
															"\t\t\t\"historical-performances\"]);",
															"\t});",
															"\tpm.test(\"IsValueOfDatatypeUnderTestCorrect\", function () {",
															"\t\tpm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function () {",
															"\t\tpm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"\t});",
															"\tpm.test(\"IsValueOfAttributeUnderTestCorrect\", function () {",
															"\t\tpm.expect(attributeUnterTest).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfContentTypeCorrect\", function () {",
															"\t\tpm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"\t});",
															"\tpm.test(\"IsValueOfFilteredDepthCorrect\", function () {",
															"\t\tpm.expect(filteredDepth).to.be.a(\"number\");",
															"\t});",
															"\tpm.test(\"IsValueOfFilteredFieldsCorrect\", function () {",
															"\t\tpm.expect(filteredFields).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfRequestBodyCorrect\", function () {",
															"\t\tpm.expect(requestBody).to.be.a(\"string\");",
															"\t});",
															"}",
															"",
															"function CouldAirInterfaceCurrentPerformanceBeShortened(success) {",
															"\tpm.test(\"CouldAirInterfaceCurrentPerformanceBeShortened\", function () {",
															"\t\tpm.expect(success).to.be.true;",
															"\t});",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"\tpm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"\t\tpm.expect(success).to.be.true;",
															"\t});",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "HistoricalPerformancesCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------Checking AirInterfaceHistoricalPerformances for Completeness---------------\");",
															"/*******************************************************************************",
															"* ",
															"* HistoricalPerformancesCompleteness",
															"* ",
															"* This Request is for validating AirInterface HistoricalPerformances Objects against definition ",
															"* AirInterface_2.0.0-tsp.191122.1800",
															"* as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the HistoricalPerformances class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"*******************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"historical-performances\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let AIR_INTERFACE_HISTORICAL_PERFORMANCES_SCHEMA = {\t",
															"    \"type\": \"object\",",
															"    \"properties\": {",
															"\t\t\"historical-performance-data-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\"performance-data\": {",
															"\t\t\t\t\t\t\"type\": \"object\", ",
															"\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\"es\": \t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"ses\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, \t\t",
															"\t\t\t\t\t\t\t\"cses\": \t\t\t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"unavailability\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"tx-level-min\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"tx-level-max\":\t\t\t\t    { \"type\": \"number\" }, \t\t\t",
															"\t\t\t\t\t\t\t\"tx-level-avg\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rx-level-min\": \t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"rx-level-max\": \t\t\t\t{ \"type\": \"number\" },\t\t",
															"\t\t\t\t\t\t\t\"rx-level-avg\": \t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"time-xstates-list\": {    ",
															"\t\t\t\t\t\t\t\t\"type\": \"array\",",
															"\t\t\t\t\t\t\t\t\"items\": {\t\t",
															"\t\t\t\t\t\t\t\t\t\"type\": \"object\", ",
															"\t\t\t\t\t\t\t\t\t\"properties\": {\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t\"time-xstate-sequence-number\":\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\t\t\t\"transmission-mode\":            { \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\t\t\t\"time\": \t\t            \t{ \"type\": \"number\" }\t\t\t",
															"\t\t\t\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\t\t\t\"required\": [ \"time-xstate-sequence-number\",",
															"\t\t\t\t\t\t\t\t\t\t\t    \t\"transmission-mode\",\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t\t    \t\"time\"\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\t\t\t\t]\t\t",
															"\t\t\t\t\t\t\t\t}",
															"\t\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\t\"snir-min\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"snir-max\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"snir-avg\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"xpd-min\": \t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"xpd-max\": \t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"xpd-avg\": \t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rf-temp-min\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rf-temp-max\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rf-temp-avg\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"defect-blocks-sum\": \t\t\t{ \"type\": \"number\" }, \t\t\t",
															"\t\t\t\t\t\t\t\"time-period\": \t\t\t\t\t{ \"type\": \"number\" }",
															"\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\"required\": [ \"es\", ",
															"                            \t\t\t\"ses\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"                            \t\t\t\"cses\",",
															"                            \t\t\t\"unavailability\",\t",
															"                            \t\t\t\"tx-level-min\",",
															"                            \t\t\t\"tx-level-max\",",
															"                            \t\t\t\"tx-level-avg\",",
															"                            \t\t\t\"rx-level-min\",",
															"                            \t\t\t\"rx-level-max\",",
															"                            \t\t\t\"rx-level-avg\",",
															"                            \t\t\t\"time-xstates-list\",",
															"                            \t\t\t\"snir-min\",",
															"                            \t\t\t\"snir-max\",",
															"                            \t\t\t\"snir-avg\",",
															"                            \t\t\t\"xpd-min\",",
															"                            \t\t\t\"xpd-max\",",
															"                            \t\t\t\"xpd-avg\",",
															"                            \t\t\t\"rf-temp-min\",",
															"                            \t\t\t\"rf-temp-max\",",
															"                            \t\t\t\"rf-temp-avg\",",
															"                            \t\t\t\"defect-blocks-sum\",",
															"                            \t\t\t\"time-period\",",
															"\t\t\t\t\t\t]\t\t\t\t\t",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"suspect-interval-flag\": \t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\t\"history-data-id\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"period-end-time\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"granularity-period\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t\t]\t\t\t\t",
															"\t\t\t\t\t},",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"performance-data\",",
															"    \t\t\t\t\t\t\t\"suspect-interval-flag\",",
															"    \t\t\t\t\t\t\t\"history-data-id\",",
															"    \t\t\t\t\t\t\t\"period-end-time\",",
															"    \t\t\t\t\t\t\t\"granularity-period\",",
															"\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-historical-performance-sets\":  \t\t{ \"type\": \"number\" },",
															"\t\t\"time-of-latest-change\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t},",
															"\t\"required\":\t[ \"historical-performance-data-list\",",
															"                    \"number-of-historical-performance-sets\",",
															"                    \"time-of-latest-change\",",
															"\t]",
															"};",
															"try {",
															"    if (capability[\"performance-monitoring-is-avail\"]===false) {",
															"        pm.variables.set(\"schemaToBeShortened\", AIR_INTERFACE_HISTORICAL_PERFORMANCES_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"historical-performance-data-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        AIR_INTERFACE_HISTORICAL_PERFORMANCES_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"        CouldAirInterfaceHistoricalPerformancesBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldAirInterfaceHistoricalPerformancesBeShortened(false);",
															"}",
															"pm.variables.set(\"schema\", AIR_INTERFACE_HISTORICAL_PERFORMANCES_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldAirInterfaceHistoricalPerformancesBeShortened(success) {",
															"    pm.test(\"CouldAirInterfaceHistoricalPerformancesBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NetworkRestoration",
									"item": [
										{
											"name": "SettingOriginalInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n------------------Restoring the Original Interface Configuration Again--------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting the Original Interface Configuration Again",
															"* ",
															"* This Request is for restoring the configuration from before the interface validation ",
															"* on the device.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, configuration);",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    configuration = AddHeadlineToDataObject(configuration, \"air-interface-2-0:air-interface-configuration\");",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched back on original values.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched back on original values.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointAirInterfaceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------ReversalPoint of AirInterface Validation for Completeness------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointAirInterfaceCompleteness\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointAirInterfaceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------------------Terminating AirInterfaceCompleteness-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ExitPoint",
															"* ",
															"* This Request is for clearing the Collection variables and terminating the TestCase",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing all Collection Variables for Terminating the TestCase",
															"****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, controller, indexOfDeviceUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "AirInterfaceConfiguration",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n\\n=============================== AirInterfaceConfiguration.2 ===============================\");",
															"/****************************************************************************************",
															"* ",
															"* RequestCollection for validating Configuration of AirInterface Objects against definition ",
															"* ",
															"* AirInterface_2.0.0-tsp.200121.1750",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Manual Definition of the Mode of Operation of this TestCase",
															"* ",
															"* It is recommended to apply this TestCase on devices on the local (not remote) site",
															"* of the microwave connection, otherwise the management connection might break and ",
															"* configurations, which are done during the validation, cannot be reversed.",
															"* ",
															"****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"none\"; // \"none\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"air-interface-2-0:air-interface-pac\";       // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"CONFIGURATION_VALIDATION_RESULTS = {};",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"pm.collectionVariables.set(\"configurationValidationResults\", CONFIGURATION_VALIDATION_RESULTS);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function () {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function () {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DefiningDummyValuesAndEvaluations()",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n----------Defining DummyValues and Evaluation Criteria in Configuration Validation--------\");",
															"/****************************************************************************************",
															"* ",
															"* Definition of DefiningDummyValuesAndEvaluations()",
															"*  ",
															"* Functions for Defining DummyValues and Evaluation Criteria in all Configuration Validations.",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Provided Collection Variables ",
															"****************************************************************************************/",
															"class Attribute {",
															"    constructor(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString) {",
															"        this.CreatingDummyValueAsaString = CreatingDummyValueAsaString;",
															"        this.EvaluatingFeatureSupportAsaString = EvaluatingFeatureSupportAsaString;",
															"        this.defaultValueForStandardEvaluation = defaultValueForStandardEvaluation;",
															"        this.EvaluatingResultAsaString = EvaluatingResultAsaString;",
															"    }",
															"}",
															"var attributes = [];",
															"",
															"var CreatingDummyValueAsaString;",
															"var EvaluatingFeatureSupportAsaString;",
															"var defaultValueForStandardEvaluation;",
															"var EvaluatingResultAsaString;",
															"var newAttribute;",
															"",
															"// air-interface-name (string)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of air-interface-name-----------------------\");",
															"",
															"        // Individual Values Definition ",
															"        var dummyValue = \"Dummy \" + String(Math.floor(Math.random() * 999));",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"air-interface-name\";",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"Air interface ID not yet defined.\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// remote-air-interface-name (string)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------Checking Configuration of remote-air-interface-name--------------------\");",
															"",
															"        // Individual Values Definition ",
															"        var dummyValue = \"Dummy \" + String(Math.floor(Math.random() * 999));",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"remote-air-interface-name\";",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"Air interface ID at the remote site not yet defined.\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// transmitted-radio-signal-id (number/string)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------Checking Configuration of transmitted-radio-signal-id-------------------\");",
															"",
															"        // Individual Values Definition ",
															"        var attributeUnderTest, dummyValue;",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        try {",
															"            let supportedRadioSignalIdDatatype;",
															"            supportedRadioSignalIdDatatype = capability[\"supported-radio-signal-id-datatype\"];",
															"",
															"            let supportedRadioSignalIdLength;",
															"            supportedRadioSignalIdLength = capability[\"supported-radio-signal-id-length\"];",
															"",
															"            if (supportedRadioSignalIdDatatype === \"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_INTEGER\") {",
															"                attributeUnderTest = \"numeric-radio-signal-id\";",
															"                dummyValue = Math.floor(Math.random() * supportedRadioSignalIdLength);",
															"            } else {",
															"                attributeUnderTest = \"alphanumeric-radio-signal-id\";",
															"                dummyValue = GenerateRandomString(supportedRadioSignalIdLength);",
															"            }",
															"",
															"            CouldDummyValuesBeGenerated(supportedRadioSignalIdDatatype, supportedRadioSignalIdLength,",
															"                attributeUnderTest,",
															"                dummyValue",
															"            );",
															"        } catch (error) {",
															"            CouldDummyValuesBeGenerated();",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"transmitted-radio-signal-id\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"        var ATTRIBUTE_UNDER_TEST = attributeUnderTest;",
															"",
															"        // Functions",
															"        function GenerateRandomString(length) {",
															"            let randomString = \"\";",
															"            let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
															"            let charactersLength = characters.length;",
															"            for (let i = 0; i < length; i++) {",
															"                randomString += characters.charAt(Math.floor(Math.random() * charactersLength));",
															"            }",
															"            return randomString;",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValuesBeGenerated(supportedRadioSignalIdDatatype, supportedRadioSignalIdLength,",
															"            attributeUnderTest,",
															"            dummyValue) {",
															"            pm.test(\"CouldDummyValuesBeGenerated\", function () {",
															"                pm.expect(supportedRadioSignalIdDatatype).to.be.a(\"string\");",
															"                pm.expect(supportedRadioSignalIdDatatype).to.not.have.lengthOf(0);",
															"                pm.expect(supportedRadioSignalIdLength).to.be.an(\"number\");",
															"                pm.expect(attributeUnderTest).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.be.an(\"undefined\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        try {",
															"            let supportedRadioSignalIdDatatype;",
															"            supportedRadioSignalIdDatatype = capability[\"supported-radio-signal-id-datatype\"];",
															"",
															"            let supportedRadioSignalIdLength;",
															"            supportedRadioSignalIdLength = capability[\"supported-radio-signal-id-length\"];",
															"",
															"            if ((supportedRadioSignalIdDatatype === \"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_NOT_YET_DEFINED\")",
															"                && (supportedRadioSignalIdLength === -1)) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            }",
															"",
															"            CouldFeatureSupportBeChecked(true);",
															"        } catch (error) {",
															"            CouldFeatureSupportBeChecked(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldFeatureSupportBeChecked(success) {",
															"            pm.test(\"CouldFeatureSupportBeChecked\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"-99\";",
															"",
															"    EvaluatingResult = () => {",
															"        var defaultValueString = \"\";",
															"        try {",
															"            let supportedRadioSignalIdDatatype;",
															"            supportedRadioSignalIdDatatype = capability[\"supported-radio-signal-id-datatype\"];",
															"            if (supportedRadioSignalIdDatatype === \"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_INTEGER\") {",
															"                defaultValueString = \"-1\";",
															"            } else {",
															"                defaultValueString = \"Not yet defined.\";",
															"            }",
															"        } catch (error) {",
															"            defaultValueString = \"-99\";",
															"            console.log(\"ERROR: Could not determine default value.\");",
															"        }",
															"",
															"        if (Math.floor(resultCode / 100) === 2) {",
															"            if ((Math.floor(dummyCode / 100) === 2) && (resultValueString === dummyValueString)) {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"OK\";",
															"",
															"            } else if (dummyCode === responseCodeForConfigurationError) {",
															"                let onfErrorMessage = DistillingOnfErrorMessageFrom(dummyErrorMessage);",
															"                console.log(\"ONF message for not supported feature received:\");",
															"                console.log(onfErrorMessage === errorMessageForNotSupported);",
															"                console.log(\"Capabilities etc. indicate missing support:\");",
															"                console.log(capabilitiesAreIndicatingThatFeatureNotSupported === true);",
															"                console.log(\"Configuration attribute is representing the default value:\");",
															"                console.log(resultValueString === defaultValueString);",
															"                if ((onfErrorMessage === errorMessageForNotSupported)",
															"                    && (capabilitiesAreIndicatingThatFeatureNotSupported === true)",
															"                    && (resultValueString === defaultValueString)) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"OK (not supported by hardware)\";",
															"",
															"                } else if (onfErrorMessage === errorMessageForOutOfRange) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"dummyValue out of hardware range\";",
															"",
															"                } else if (onfErrorMessage === errorMessageForAgainstExisting) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"dummyValue contradicts existing configuration\";",
															"",
															"                } else if (onfErrorMessage === errorMessageForInconsistent) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"dummyValue is inconsistent\";",
															"",
															"                } else {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"Not configurable on application layer\";",
															"                }",
															"",
															"            } else {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"Not configurable on server layer\";",
															"            }",
															"",
															"        } else {",
															"            if (capabilitiesAreIndicatingThatFeatureNotSupported === true) {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"OK (not existing, because not supported)\";",
															"            } else {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"Not existing\";",
															"            }",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// expected-radio-signal-id (number/string)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------------------Checking Configuration of expected-radio-signal-id--------------------\");",
															"",
															"        // Individual Values Definition ",
															"        var attributeUnderTest, dummyValue;",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        try {",
															"            let supportedRadioSignalIdDatatype;",
															"            supportedRadioSignalIdDatatype = capability[\"supported-radio-signal-id-datatype\"];",
															"",
															"            let supportedRadioSignalIdLength;",
															"            supportedRadioSignalIdLength = capability[\"supported-radio-signal-id-length\"];",
															"",
															"            if (supportedRadioSignalIdDatatype === \"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_INTEGER\") {",
															"                attributeUnderTest = \"numeric-radio-signal-id\";",
															"                dummyValue = Math.floor(Math.random() * supportedRadioSignalIdLength);",
															"            } else {",
															"                attributeUnderTest = \"alphanumeric-radio-signal-id\";",
															"                dummyValue = GenerateRandomString(supportedRadioSignalIdLength);",
															"            }",
															"",
															"            CouldDummyValuesBeGenerated(supportedRadioSignalIdDatatype, supportedRadioSignalIdLength,",
															"                attributeUnderTest,",
															"                dummyValue",
															"            );",
															"        } catch (error) {",
															"            CouldDummyValuesBeGenerated();",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"expected-radio-signal-id\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"        var ATTRIBUTE_UNDER_TEST = attributeUnderTest;",
															"",
															"        // Functions",
															"        function GenerateRandomString(length) {",
															"            let randomString = \"\";",
															"            let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
															"            let charactersLength = characters.length;",
															"            for (let i = 0; i < length; i++) {",
															"                randomString += characters.charAt(Math.floor(Math.random() * charactersLength));",
															"            }",
															"            return randomString;",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValuesBeGenerated(supportedRadioSignalIdDatatype, supportedRadioSignalIdLength,",
															"            attributeUnderTest,",
															"            dummyValue) {",
															"            pm.test(\"CouldDummyValuesBeGenerated\", function () {",
															"                pm.expect(supportedRadioSignalIdDatatype).to.be.a(\"string\");",
															"                pm.expect(supportedRadioSignalIdDatatype).to.not.have.lengthOf(0);",
															"                pm.expect(supportedRadioSignalIdLength).to.be.an(\"number\");",
															"                pm.expect(attributeUnderTest).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.be.an(\"undefined\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        try {",
															"            let supportedRadioSignalIdDatatype;",
															"            supportedRadioSignalIdDatatype = capability[\"supported-radio-signal-id-datatype\"];",
															"            let supportedRadioSignalIdLength;",
															"            supportedRadioSignalIdLength = capability[\"supported-radio-signal-id-length\"];",
															"",
															"            if (capability[\"expected-equals-transmitted-radio-signal-id\"] === true) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            }",
															"",
															"            CouldFeatureSupportBeChecked(true);",
															"        } catch (error) {",
															"            CouldFeatureSupportBeChecked(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldFeatureSupportBeChecked(success) {",
															"            pm.test(\"CouldFeatureSupportBeChecked\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"-99\";",
															"",
															"    EvaluatingResult = () => {",
															"        var defaultValueString = \"\";",
															"        try {",
															"            let supportedRadioSignalIdDatatype;",
															"            supportedRadioSignalIdDatatype = capability[\"supported-radio-signal-id-datatype\"];",
															"            if (supportedRadioSignalIdDatatype === \"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_INTEGER\") {",
															"                defaultValueString = \"-1\";",
															"            } else {",
															"                defaultValueString = \"Not yet defined.\";",
															"            }",
															"        } catch (error) {",
															"            defaultValueString = \"-99\";",
															"            console.log(\"ERROR: Could not determine default value.\");",
															"        }",
															"",
															"        if (Math.floor(resultCode / 100) === 2) {",
															"            if ((Math.floor(dummyCode / 100) === 2) && (resultValueString === dummyValueString)) {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"OK\";",
															"",
															"            } else if (dummyCode === responseCodeForConfigurationError) {",
															"                let onfErrorMessage = DistillingOnfErrorMessageFrom(dummyErrorMessage);",
															"                console.log(\"ONF message for not supported feature received:\");",
															"                console.log(onfErrorMessage === errorMessageForNotSupported);",
															"                console.log(\"Capabilities etc. indicate missing support:\");",
															"                console.log(capabilitiesAreIndicatingThatFeatureNotSupported === true);",
															"                console.log(\"Configuration attribute is representing the default value:\");",
															"                console.log(resultValueString === defaultValueString);",
															"                if ((onfErrorMessage === errorMessageForNotSupported)",
															"                    && (capabilitiesAreIndicatingThatFeatureNotSupported === true)",
															"                    && (resultValueString === defaultValueString)) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"OK (not supported by hardware)\";",
															"",
															"                } else if (onfErrorMessage === errorMessageForOutOfRange) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"dummyValue out of hardware range\";",
															"",
															"                } else if (onfErrorMessage === errorMessageForAgainstExisting) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"dummyValue contradicts existing configuration\";",
															"",
															"                } else if (onfErrorMessage === errorMessageForInconsistent) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"dummyValue is inconsistent\";",
															"",
															"                } else {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"Not configurable on application layer\";",
															"                }",
															"",
															"            } else {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"Not configurable on server layer\";",
															"            }",
															"",
															"        } else {",
															"            if (capabilitiesAreIndicatingThatFeatureNotSupported === true) {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"OK (not existing, because not supported)\";",
															"            } else {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"Not existing\";",
															"            }",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// tx-frequency (number)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------------------------Checking Configuration of tx-frequency--------------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"tx-frequency\";",
															"",
															"        var dummyValue;",
															"        try {",
															"            let configuredTxFrequency;",
															"            configuredTxFrequency = configuration[\"tx-frequency\"];",
															"",
															"            let configuredChannelBandwidth;",
															"            let configuredTransmissionModeName;",
															"            let configuredModeIndex;",
															"            try {",
															"                configuredTransmissionModeName = configuration[\"transmission-mode-min\"];",
															"                configuredModeIndex = TransmissionModeIndexOf(configuredTransmissionModeName, capability);",
															"                configuredChannelBandwidth = capability[\"transmission-mode-list\"][configuredModeIndex][\"channel-bandwidth\"];",
															"            } catch (error) {",
															"                console.log(\"ERROR: Configured channel bandwidth could not be retrieved for transmission-mode-min.\");",
															"            }",
															"",
															"            let minimumTxFrequency;",
															"            let maximumTxFrequency;",
															"            try {",
															"                minimumTxFrequency = capability[\"tx-frequency-min\"];",
															"                maximumTxFrequency = capability[\"tx-frequency-max\"];",
															"",
															"                let requiredSpectrum;",
															"                requiredSpectrum = configuredTxFrequency + (3 / 2) * configuredChannelBandwidth;",
															"",
															"                if (requiredSpectrum < maximumTxFrequency) {",
															"                    dummyValue = configuredTxFrequency + configuredChannelBandwidth;",
															"                } else {",
															"                    dummyValue = configuredTxFrequency - configuredChannelBandwidth;",
															"                }",
															"            } catch (error) {",
															"                console.log(\"ERROR: DummyValue could not be calculated.\");",
															"                dummyValue = -1;",
															"            }",
															"",
															"            CouldDummyValueBeSet(ATTRIBUTE_UNDER_TEST, configuredTxFrequency,",
															"                configuredTransmissionModeName,",
															"                configuredModeIndex,",
															"                configuredChannelBandwidth,",
															"                minimumTxFrequency,",
															"                maximumTxFrequency,",
															"                dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet(ATTRIBUTE_UNDER_TEST, configuredTxFrequency,",
															"                configuredTransmissionModeName,",
															"                configuredModeIndex,",
															"                configuredChannelBandwidth,",
															"                minimumTxFrequency,",
															"                maximumTxFrequency,",
															"                dummyValue);",
															"        }",
															"",
															"        // Functions",
															"        function TransmissionModeIndexOf(currentModeName, capability) {",
															"            for (let i = 0; i < (capability[\"transmission-mode-list\"].length); i++) {",
															"                let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
															"                if (sampleModeName === currentModeName) {",
															"                    return i;",
															"                }",
															"            }",
															"            console.log(\"ERROR: Value of transmission-mode-min could not be found in transmission-mode-list.\");",
															"            return -1;",
															"        }",
															"",
															"        // Self Testing Function",
															"        function CouldDummyValueBeSet(attributeUnderTest, configuredFrequency,",
															"            configuredTransmissionModeName,",
															"            configuredModeIndex,",
															"            configuredChannelBandwidth,",
															"            minimumFrequency,",
															"            maximumFrequency,",
															"            dummyValue) {",
															"            pm.test(\"CouldConfiguredFrequencyBeRetrieved (\" + attributeUnderTest + \")\", function () {",
															"                pm.expect(configuredFrequency).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldConfiguredTransmissionModeNameBeRetrieved (\" + attributeUnderTest + \")\", function () {",
															"                pm.expect(configuredTransmissionModeName).to.be.a(\"string\");",
															"                pm.expect(configuredTransmissionModeName).to.not.have.lengthOf(0);",
															"            });",
															"            pm.test(\"CouldConfiguredModeIndexBeEvaluated (\" + attributeUnderTest + \")\", function () {",
															"                pm.expect(configuredModeIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldConfiguredChannelBandwidthBeEvaluated (\" + attributeUnderTest + \")\", function () {",
															"                pm.expect(configuredChannelBandwidth).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldAvailableFrequenciesBeRetrieved (\" + attributeUnderTest + \")\", function () {",
															"                pm.expect(minimumFrequency).to.be.a(\"number\");",
															"                pm.expect(maximumFrequency).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeSet (\" + attributeUnderTest + \")\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// rx-frequency (number)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------------------------Checking Configuration of rx-frequency--------------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"rx-frequency\";",
															"",
															"        var dummyValue;",
															"        try {",
															"            let configuredRxFrequency;",
															"            configuredRxFrequency = configuration[\"rx-frequency\"];",
															"",
															"            let configuredChannelBandwidth;",
															"            let configuredTransmissionModeName;",
															"            let configuredModeIndex;",
															"            try {",
															"                configuredTransmissionModeName = configuration[\"transmission-mode-min\"];",
															"                configuredModeIndex = TransmissionModeIndexOf(configuredTransmissionModeName, capability);",
															"                configuredChannelBandwidth = capability[\"transmission-mode-list\"][configuredModeIndex][\"channel-bandwidth\"];",
															"            } catch {",
															"                console.log(\"ERROR: Configured channel bandwidth could not be retrieved for transmission-mode-min.\");",
															"            }",
															"",
															"            let minimumRxFrequency;",
															"            let maximumRxFrequency;",
															"            try {",
															"                minimumRxFrequency = capability[\"rx-frequency-min\"];",
															"                maximumRxFrequency = capability[\"rx-frequency-max\"];",
															"",
															"                let requiredSpectrum;",
															"                requiredSpectrum = configuredRxFrequency + (3 / 2) * configuredChannelBandwidth;",
															"",
															"                if (requiredSpectrum < maximumRxFrequency) {",
															"                    dummyValue = configuredRxFrequency + configuredChannelBandwidth;",
															"                } else {",
															"                    dummyValue = configuredRxFrequency - configuredChannelBandwidth;",
															"                }",
															"            } catch (error) {",
															"                console.log(\"ERROR: DummyValue could not be calculated.\");",
															"                dummyValue = -1;",
															"            }",
															"",
															"            CouldDummyValueBeSet(ATTRIBUTE_UNDER_TEST, configuredRxFrequency,",
															"                configuredTransmissionModeName,",
															"                configuredModeIndex,",
															"                configuredChannelBandwidth,",
															"                minimumRxFrequency,",
															"                maximumRxFrequency,",
															"                dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet(ATTRIBUTE_UNDER_TEST, configuredRxFrequency,",
															"                configuredTransmissionModeName,",
															"                configuredModeIndex,",
															"                configuredChannelBandwidth,",
															"                minimumRxFrequency,",
															"                maximumRxFrequency,",
															"                dummyValue);",
															"        }",
															"",
															"        // Functions",
															"        function TransmissionModeIndexOf(currentModeName, capability) {",
															"            for (let i = 0; i < (capability[\"transmission-mode-list\"].length); i++) {",
															"                let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
															"                if (sampleModeName === currentModeName) {",
															"                    return i;",
															"                }",
															"            }",
															"            console.log(\"ERROR: Value of transmission-mode-min could not be found in transmission-mode-list.\");",
															"            return -1;",
															"        }",
															"",
															"        // Self Testing Function",
															"        function CouldDummyValueBeSet(attributeUnderTest, configuredFrequency,",
															"            configuredTransmissionModeName,",
															"            configuredModeIndex,",
															"            configuredChannelBandwidth,",
															"            minimumFrequency,",
															"            maximumFrequency,",
															"            dummyValue) {",
															"            pm.test(\"CouldConfiguredFrequencyBeRetrieved (\" + attributeUnderTest + \")\", function () {",
															"                pm.expect(configuredFrequency).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldConfiguredTransmissionModeNameBeRetrieved (\" + attributeUnderTest + \")\", function () {",
															"                pm.expect(configuredTransmissionModeName).to.be.a(\"string\");",
															"                pm.expect(configuredTransmissionModeName).to.not.have.lengthOf(0);",
															"            });",
															"            pm.test(\"CouldConfiguredModeIndexBeEvaluated (\" + attributeUnderTest + \")\", function () {",
															"                pm.expect(configuredModeIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldConfiguredChannelBandwidthBeEvaluated (\" + attributeUnderTest + \")\", function () {",
															"                pm.expect(configuredChannelBandwidth).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldAvailableFrequenciesBeRetrieved (\" + attributeUnderTest + \")\", function () {",
															"                pm.expect(minimumFrequency).to.be.a(\"number\");",
															"                pm.expect(maximumFrequency).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeSet (\" + attributeUnderTest + \")\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        try {",
															"            if ((capability[\"duplex-distance-is-freely-configurable\"] === false)",
															"                && (capability[\"duplex-distance-list\"].length === 1)) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            }",
															"            CouldFeatureSupportBeCalculated(true);",
															"        } catch (error) {",
															"            CouldFeatureSupportBeCalculated(false);",
															"        }",
															"",
															"        // Self Testing Function",
															"        function CouldFeatureSupportBeCalculated(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// transmission-mode-min (leaf-ref)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n---------------------Checking Configuration of transmission-mode-min----------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"transmission-mode-min\";",
															"",
															"        var dummyValue;",
															"        try {",
															"            let currentModeName = configuration[\"transmission-mode-min\"];",
															"            let currentModeIndex = TransmissionModeIndexOf(currentModeName, capability);",
															"            let currentChannelBandwidth = capability[\"transmission-mode-list\"][currentModeIndex][\"channel-bandwidth\"];",
															"            let currentXpicAvailability = capability[\"transmission-mode-list\"][currentModeIndex][\"xpic-is-avail\"];",
															"            let minimumRankedModeName = \"\";",
															"            let minimumRank = Number.MAX_VALUE;",
															"            for (let i = 0; i < (capability[\"transmission-mode-list\"].length); i++) {",
															"                let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
															"                let sampleModeRank = capability[\"transmission-mode-list\"][i][\"transmission-mode-rank\"];",
															"                let sampleModeChannelBandwidth = capability[\"transmission-mode-list\"][i][\"channel-bandwidth\"];",
															"                let sampleModeXpicAvailability = capability[\"transmission-mode-list\"][i][\"xpic-is-avail\"];",
															"                let sampleModeAvailabilityAsFixedConfiguration",
															"                    = capability[\"transmission-mode-list\"][i][\"supported-as-fixed-configuration\"];",
															"                if ((sampleModeName !== currentModeName)",
															"                    && (sampleModeRank < minimumRank)",
															"                    && (sampleModeChannelBandwidth === currentChannelBandwidth)",
															"                    && (sampleModeXpicAvailability === currentXpicAvailability)",
															"                    && (sampleModeAvailabilityAsFixedConfiguration === true)",
															"                ) {",
															"                    minimumRankedModeName = sampleModeName;",
															"                    minimumRank = sampleModeRank;",
															"                }",
															"            }",
															"            dummyValue = minimumRankedModeName;",
															"",
															"            CouldDummyValueBeSet(ATTRIBUTE_UNDER_TEST, currentModeIndex, ",
															"                                        currentChannelBandwidth, ",
															"                                        dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Functions",
															"        function TransmissionModeIndexOf(currentModeName, capability) {",
															"            for (let i = 0; i < (capability[\"transmission-mode-list\"].length); i++) {",
															"                let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
															"                if (sampleModeName === currentModeName) {",
															"                    return i;",
															"                }",
															"            }",
															"            console.log(\"ERROR: Value of transmission-mode-min could not be found in transmission-mode-list.\");",
															"            return -1;",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(attributeUnderTest, currentModeIndex, currentChannelBandwidth, dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet (\" + attributeUnderTest + \")\", function () {",
															"                pm.expect(currentModeIndex).to.be.a(\"number\");",
															"                pm.expect(currentChannelBandwidth).to.be.a(\"number\");",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"-1\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// transmission-mode-max (leaf-ref)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n---------------------Checking Configuration of transmission-mode-max----------------------\");",
															"",
															"        var dummyValue;",
															"        try {",
															"            let currentModeName = configuration[\"transmission-mode-max\"];",
															"            let currentModeIndex = TransmissionModeIndexOf(currentModeName, capability);",
															"            let currentChannelBandwidth = capability[\"transmission-mode-list\"][currentModeIndex][\"channel-bandwidth\"];",
															"            let currentXpicAvailability = capability[\"transmission-mode-list\"][currentModeIndex][\"xpic-is-avail\"];",
															"            let maximumRankedModeName = configuration[\"transmission-mode-min\"];;",
															"            let maximumRank = 0;",
															"",
															"            for (let i = 0; i < (capability[\"transmission-mode-list\"].length); i++) {",
															"                let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
															"                let sampleModeRank = capability[\"transmission-mode-list\"][i][\"transmission-mode-rank\"];",
															"                let sampleModeChannelBandwidth = capability[\"transmission-mode-list\"][i][\"channel-bandwidth\"];",
															"                let sampleModeXpicAvailability = capability[\"transmission-mode-list\"][i][\"xpic-is-avail\"];",
															"                if ((sampleModeName !== currentModeName)",
															"                    && (sampleModeRank > maximumRank)",
															"                    && (sampleModeChannelBandwidth === currentChannelBandwidth)",
															"                    && (sampleModeXpicAvailability === currentXpicAvailability)) {",
															"                    maximumRankedModeName = sampleModeName;",
															"                    maximumRank = sampleModeRank;",
															"                }",
															"            }",
															"            dummyValue = maximumRankedModeName;",
															"",
															"            CouldDummyValueBeSet(currentModeName, currentModeIndex,",
															"                currentChannelBandwidth,",
															"                currentXpicAvailability,",
															"                dummyValue",
															"            );",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"transmission-mode-max\";",
															"",
															"        // Functions",
															"        function TransmissionModeIndexOf(currentModeName, capability) {",
															"            for (let i = 0; i < (capability[\"transmission-mode-list\"].length); i++) {",
															"                let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
															"                if (sampleModeName === currentModeName) {",
															"                    return i;",
															"                }",
															"            }",
															"            console.log(\"ERROR: Value of transmission-mode-max could not be found in transmission-mode-list.\");",
															"            return -1;",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(currentModeName, currentModeIndex,",
															"            currentChannelBandwidth,",
															"            currentXpicAvailability,",
															"            dummyValue) {",
															"            pm.test(\"CouldCurrentModeNameBeRetrieved\", function () {",
															"                pm.expect(currentModeName).to.be.a(\"string\");",
															"                pm.expect(currentModeName).to.not.have.lengthOf(0);",
															"            });",
															"            pm.test(\"CouldCurrentModeIndexBeEvaluated\", function () {",
															"                pm.expect(currentModeIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldCurrentChannelBandwidthBeRetrieved\", function () {",
															"                pm.expect(currentChannelBandwidth).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldCurrentXpicAvailabilityBeRetrieved\", function () {",
															"                pm.expect(currentXpicAvailability).to.be.a(\"boolean\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeDerived\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"-1\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// power-is-on (boolean)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n---------------------------Checking Configuration of power-is-on--------------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"power-is-on\";",
															"",
															"        // Individual Values Definition",
															"        var dummyValue;",
															"        try {",
															"            dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = true;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// transmitter-is-on (boolean)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----------------------Checking Configuration of transmitter-is-on-------------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"transmitter-is-on\";",
															"",
															"        // Individual Values Definition",
															"        var dummyValue;",
															"        try {",
															"            dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// receiver-is-on (boolean)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of receiver-is-on-------------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"receiver-is-on\";",
															"",
															"        // Individual Values Definition",
															"        var dummyValue;",
															"        try {",
															"            dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = true;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// tx-power (number)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----------------------------Checking Configuration of tx-power----------------------------\");",
															"",
															"        var dummyValue;",
															"        try {",
															"            let currentValue = configuration[\"tx-power\"];",
															"",
															"            let minimumModeName = configuration[\"transmission-mode-min\"];",
															"            let minimumModeIndex = TransmissionModeIndexOf(minimumModeName, capability);",
															"            let minimumValue = capability[\"transmission-mode-list\"][minimumModeIndex][\"tx-power-min\"];",
															"            let maximumValue = capability[\"transmission-mode-list\"][minimumModeIndex][\"tx-power-max\"];",
															"            let valueRange = maximumValue - minimumValue;",
															"",
															"            dummyValue = minimumValue + Math.floor(Math.random() * valueRange);",
															"",
															"            CouldDummyValueBeSet(currentValue, minimumModeName, minimumModeIndex, minimumValue,",
															"                maximumValue,",
															"                valueRange,",
															"                dummyValue",
															"            );",
															"        } catch (error) {",
															"            CouldDummyValueBeSet(currentValue, minimumModeName, minimumModeIndex, minimumValue,",
															"                maximumValue,",
															"                valueRange,",
															"                dummyValue",
															"            );",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"tx-power\";",
															"",
															"        // Functions",
															"        function TransmissionModeIndexOf(currentModeName, capability) {",
															"            for (let i = 0; i < (capability[\"transmission-mode-list\"].length); i++) {",
															"                let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
															"                if (sampleModeName === currentModeName) {",
															"                    return i;",
															"                }",
															"            }",
															"            console.log(\"ERROR: Name of transmission mode could not be found in air-interface-capability::transmission-mode-list.\");",
															"        }",
															"",
															"        // Self Testing Function",
															"        function CouldDummyValueBeSet(currentValue, minimumModeName, minimumModeIndex, minimumValue,",
															"            maximumValue,",
															"            valueRange,",
															"            dummyValue) {",
															"            pm.test(\"CouldCurrentValueBeReadFromConfiguration\", function () {",
															"                pm.expect(currentValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldminimumModeNameBeReadFromStatus\", function () {",
															"                pm.expect(minimumModeName).to.be.a(\"string\");",
															"                pm.expect(minimumModeName).to.not.have.lengthOf(0);",
															"            });",
															"            pm.test(\"CouldMinimumModeIndexBeDerivedFromCapabilities\", function () {",
															"                pm.expect(minimumModeIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldMinimumValueBeReadFromCapabilities\", function () {",
															"                pm.expect(minimumValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldMaximumValueBeReadFromCapabilities\", function () {",
															"                pm.expect(maximumValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldValueRangeBeCalculated\", function () {",
															"                pm.expect(valueRange).to.be.a(\"number\");",
															"                pm.expect(valueRange).to.be.above(0);",
															"            });",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"                pm.expect(dummyValue).to.be.at.least(minimumValue);",
															"                pm.expect(dummyValue).to.be.at.most(maximumValue);",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = 99;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// adaptive-modulation-is-on (boolean)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------------------Checking Configuration of adaptive-modulation-is-on-------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"adaptive-modulation-is-on\";",
															"",
															"        // Individual Values Definition",
															"        var dummyValue;",
															"        try {",
															"            dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        try {",
															"            if (capability[\"adaptive-modulation-is-avail\"] === false) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            }",
															"            CouldFeatureSupportBeCalculated(true);",
															"        } catch (error) {",
															"            CouldFeatureSupportBeCalculated(false);",
															"        }",
															"",
															"        // Self Testing Function",
															"        function CouldFeatureSupportBeCalculated(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// xpic-is-on (boolean)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n---------------------------Checking Configuration of xpic-is-on---------------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"xpic-is-on\";",
															"",
															"        // Individual Values Definition",
															"        var dummyValue;",
															"        try {",
															"            dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        try {",
															"            let currentModeName = configuration[\"transmission-mode-min\"];",
															"            let currentModeIndex = TransmissionModeIndexOf(currentModeName, capability);",
															"            let currentXpicIsAvail = capability[\"transmission-mode-list\"][currentModeIndex][\"xpic-is-avail\"];",
															"            if (currentXpicIsAvail === false) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            }",
															"            CouldFeatureSupportBeCalculated(true);",
															"        } catch (error) {",
															"            CouldFeatureSupportBeCalculated(false);",
															"        }",
															"",
															"        // Functions",
															"        function TransmissionModeIndexOf(currentModeName, capability) {",
															"            for (let i = 0; i < (capability[\"transmission-mode-list\"].length); i++) {",
															"                let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
															"                if (sampleModeName === currentModeName) {",
															"                    return i;",
															"                }",
															"            }",
															"            console.log(\"ERROR: Name of transmission mode could not be found in air-interface-capability::transmission-mode-list.\");",
															"        }",
															"",
															"        // Self Testing Function",
															"        function CouldFeatureSupportBeCalculated(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// mimo-is-on (boolean)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n---------------------------Checking Configuration of mimo-is-on---------------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"mimo-is-on\";",
															"",
															"        // Individual Values Definition",
															"        var dummyValue;",
															"        try {",
															"            dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// alic-is-on (boolean)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n---------------------------Checking Configuration of alic-is-on---------------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"alic-is-on\";",
															"",
															"        // Individual Values Definition",
															"        var dummyValue;",
															"        try {",
															"            dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// atpc-is-on (boolean)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n---------------------------Checking Configuration of atpc-is-on---------------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"atpc-is-on\";",
															"",
															"        // Individual Values Definition",
															"        var dummyValue;",
															"        try {",
															"            dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        try {",
															"            if (capability[\"atpc-is-avail\"] === false) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            }",
															"            CouldFeatureSupportBeCalculated(true);",
															"        } catch (error) {",
															"            CouldFeatureSupportBeCalculated(false);",
															"        }",
															"",
															"        // Self Testing Function",
															"        function CouldFeatureSupportBeCalculated(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// atpc-thresh-upper (number)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of atpc-thresh-upper------------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"atpc-thresh-upper\";",
															"",
															"        var dummyValue;",
															"        try {",
															"            let configuredTransmissionModeMaxName;",
															"            configuredTransmissionModeMaxName = configuration[\"transmission-mode-max\"];",
															"",
															"            let configuredTransmissionModeMaxIndex;",
															"            configuredTransmissionModeMaxIndex = TransmissionModeIndexOf(configuredTransmissionModeMaxName, capability);",
															"",
															"            let downShiftLevel;",
															"            downShiftLevel = capability[\"transmission-mode-list\"][configuredTransmissionModeMaxIndex][\"am-downshift-level\"];",
															"            if (downShiftLevel === 99) {",
															"                console.log(\"ERROR: Device represents default value for transmission-mode-list::am-downshift-level.\");",
															"            }",
															"",
															"            let atpcThreshUpper;",
															"            atpcThreshUpper = downShiftLevel + 6 + Math.floor(Math.random() * 5);",
															"",
															"            dummyValue = atpcThreshUpper;",
															"",
															"            CouldDummyValueBeDefined(configuredTransmissionModeMaxName,",
															"                configuredTransmissionModeMaxIndex,",
															"                downShiftLevel,",
															"                atpcThreshUpper",
															"            );",
															"        } catch (error) {",
															"            CouldDummyValueBeDefined(configuredTransmissionModeMaxName,",
															"                configuredTransmissionModeMaxIndex,",
															"                downShiftLevel,",
															"                atpcThreshUpper",
															"            );",
															"        }",
															"",
															"        // Functions",
															"        function TransmissionModeIndexOf(currentModeName, capability) {",
															"            for (let i = 0; i < (capability[\"transmission-mode-list\"].length); i++) {",
															"                let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
															"                if (sampleModeName === currentModeName) {",
															"                    return i;",
															"                }",
															"            }",
															"            console.log(\"ERROR: Name of transmission mode could not be found in air-interface-capability::transmission-mode-list.\");",
															"        }",
															"",
															"        // Self Testing Function",
															"        function CouldDummyValueBeDefined(configuredTransmissionModeMaxName,",
															"            configuredTransmissionModeMaxIndex,",
															"            downShiftLevel,",
															"            atpcThreshUpper) {",
															"            pm.test(\"CouldConfiguredTransmissionModeMaxNameBeRetrieved\", function () {",
															"                pm.expect(configuredTransmissionModeMaxName).to.be.a(\"string\");",
															"                pm.expect(configuredTransmissionModeMaxName).to.not.have.lengthOf(0);",
															"            });",
															"            pm.test(\"CouldConfiguredTransmissionModeMaxIndexBeCalculated\", function () {",
															"                pm.expect(configuredTransmissionModeMaxIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDownShiftLevelBeRetrieved\", function () {",
															"                pm.expect(downShiftLevel).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldAtpcThreshUpperBeCalculated\", function () {",
															"                pm.expect(atpcThreshUpper).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = 99;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// atpc-thresh-lower (number)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of atpc-thresh-lower------------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"atpc-thresh-lower\";",
															"        ",
															"        var dummyValue;",
															"        try {",
															"            let configuredTransmissionModeMaxName;",
															"            configuredTransmissionModeMaxName = configuration[\"transmission-mode-max\"];",
															"",
															"            let configuredTransmissionModeMaxIndex;",
															"            configuredTransmissionModeMaxIndex = TransmissionModeIndexOf(configuredTransmissionModeMaxName, capability);",
															"",
															"            let downShiftLevel;",
															"            downShiftLevel = capability[\"transmission-mode-list\"][configuredTransmissionModeMaxIndex][\"am-downshift-level\"];",
															"            if (downShiftLevel === 99) {",
															"                console.log(\"ERROR: Device represents default value for transmission-mode-list::am-downshift-level.\");",
															"            }",
															"",
															"            let atpcThreshLower;",
															"            atpcThreshLower = downShiftLevel + 2 + Math.floor(Math.random() * 5);",
															"",
															"            dummyValue = atpcThreshLower;",
															"",
															"            CouldDummyValueBeDefined(configuredTransmissionModeMaxName,",
															"                configuredTransmissionModeMaxIndex,",
															"                downShiftLevel,",
															"                atpcThreshLower",
															"            );",
															"        } catch (error) {",
															"            CouldDummyValueBeDefined(configuredTransmissionModeMaxName,",
															"                configuredTransmissionModeMaxIndex,",
															"                downShiftLevel,",
															"                atpcThreshLower",
															"            );",
															"        }",
															"",
															"        // Functions",
															"        function TransmissionModeIndexOf(currentModeName, capability) {",
															"            for (let i = 0; i < (capability[\"transmission-mode-list\"].length); i++) {",
															"                let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
															"                if (sampleModeName === currentModeName) {",
															"                    return i;",
															"                }",
															"            }",
															"            console.log(\"ERROR: Name of transmission mode could not be found in air-interface-capability::transmission-mode-list.\");",
															"        }",
															"",
															"        // Self Testing Function",
															"        function CouldDummyValueBeDefined(configuredTransmissionModeMaxName,",
															"            configuredTransmissionModeMaxIndex,",
															"            downShiftLevel,",
															"            atpcThreshLower) {",
															"            pm.test(\"CouldConfiguredTransmissionModeMaxNameBeRetrieved\", function () {",
															"                pm.expect(configuredTransmissionModeMaxName).to.be.a(\"string\");",
															"                pm.expect(configuredTransmissionModeMaxName).to.not.have.lengthOf(0);",
															"            });",
															"            pm.test(\"CouldConfiguredTransmissionModeMaxIndexBeCalculated\", function () {",
															"                pm.expect(configuredTransmissionModeMaxIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDownShiftLevelBeRetrieved\", function () {",
															"                pm.expect(downShiftLevel).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldAtpcThreshLowerBeCalculated\", function () {",
															"                pm.expect(atpcThreshLower).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = 99;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// atpc-tx-power-min (number)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of atpc-tx-power-min------------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"atpc-tx-power-min\";",
															"",
															"        var dummyValue;",
															"        try {",
															"            let currentValue;",
															"            currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
															"",
															"            let configuredTransmissionModeMinName;",
															"            configuredTransmissionModeMinName = configuration[\"transmission-mode-min\"];",
															"",
															"            let minimumValue;",
															"            for (let i = 0; i < (capability[\"transmission-mode-list\"].length); i++) {",
															"                let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
															"                if (sampleModeName === configuredTransmissionModeMinName) {",
															"                    minimumValue = capability[\"transmission-mode-list\"][i][\"tx-power-min\"];",
															"                }",
															"            }",
															"",
															"            dummyValue = minimumValue + Math.floor(Math.random() * 3);",
															"            if (dummyValue === currentValue) {",
															"                dummyValue = dummyValue + 1;",
															"            }",
															"",
															"            CouldDummyValueBeDefined(currentValue,",
															"                configuredTransmissionModeMinName,",
															"                minimumValue,",
															"                dummyValue",
															"            );",
															"        } catch (error) {",
															"            CouldDummyValueBeDefined(currentValue,",
															"                configuredTransmissionModeMinName,",
															"                minimumValue,",
															"                dummyValue",
															"            );",
															"        }",
															"",
															"        // Functions",
															"        function TransmissionModeIndexOf(currentModeName, capability) {",
															"            for (let i = 0; i < (capability[\"transmission-mode-list\"].length); i++) {",
															"                let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
															"                if (sampleModeName === currentModeName) {",
															"                    return i;",
															"                }",
															"            }",
															"            console.log(\"ERROR: Name of transmission mode could not be found in air-interface-capability::transmission-mode-list.\");",
															"        }",
															"",
															"        // Self Testing Function",
															"        function CouldDummyValueBeDefined(currentValue,",
															"            configuredTransmissionModeMinName,",
															"            minimumValue,",
															"            dummyValue) {",
															"            pm.test(\"CouldCurrentValueBeRetrieved\", function () {",
															"                pm.expect(currentValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldConfiguredTransmissionModeMinNameBeRetrieved\", function () {",
															"                pm.expect(configuredTransmissionModeMinName).to.be.a(\"string\");",
															"                pm.expect(configuredTransmissionModeMinName).to.not.have.lengthOf(0);",
															"            });",
															"            pm.test(\"CouldMinimumValueBeRetrieved\", function () {",
															"                pm.expect(minimumValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCalculated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -99;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// auto-freq-select-is-on (boolean)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----------------------Checking Configuration of auto-freq-select-is-on--------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"auto-freq-select-is-on\";",
															"",
															"        // Individual Values Definition",
															"        var dummyValue;",
															"        try {",
															"            dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        try {",
															"            if (capability[\"auto-freq-select-is-avail\"] === false) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            }",
															"            CouldFeatureSupportBeCalculated(true);",
															"        } catch (error) {",
															"            CouldFeatureSupportBeCalculated(false);",
															"        }",
															"",
															"        // Self Testing Function",
															"        function CouldFeatureSupportBeCalculated(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// auto-freq-select-range (number)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------------------Checking Configuration of auto-freq-select-range----------------------\");",
															"",
															"        // Individual Values Definition ",
															"        var dummyValue;",
															"        dummyValue = Math.floor(Math.random() * 5);",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"auto-freq-select-range\";",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        try {",
															"            if (capability[\"auto-freq-select-is-avail\"] === false) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            }",
															"            CouldFeatureSupportBeCalculated(true);",
															"        } catch (error) {",
															"            CouldFeatureSupportBeCalculated(false);",
															"        }",
															"",
															"        // Self Testing Function",
															"        function CouldFeatureSupportBeCalculated(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// modulation-is-on (boolean)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of modulation-is-on------------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"modulation-is-on\";",
															"",
															"        // Individual Values Definition",
															"        var dummyValue;",
															"        try {",
															"            dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = true;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// encryption-is-on (boolean)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of encryption-is-on-----------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"encryption-is-on\";",
															"",
															"        // Individual Values Definition",
															"        var dummyValue;",
															"        try {",
															"            dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        try {",
															"            if (capability[\"encryption-is-avail\"] === false) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            }",
															"            CouldFeatureSupportBeCalculated(true);",
															"        } catch (error) {",
															"            CouldFeatureSupportBeCalculated(false);",
															"        }",
															"",
															"        // Self Testing Function",
															"        function CouldFeatureSupportBeCalculated(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// cryptographic-key (string)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of cryptographic-key------------------------\");",
															"",
															"        // Individual Values Definition ",
															"        var dummyValue;",
															"        dummyValue = \"Dummy_\" + AddRandomIntString();",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"cryptographic-key\";",
															"",
															"        // Functions",
															"        function AddRandomIntString() {",
															"            return String(Math.floor(Math.random() * 999));",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        try {",
															"            if (capability[\"encryption-is-avail\"] === false) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            }",
															"            CouldFeatureSupportBeCalculated(true);",
															"        } catch (error) {",
															"            CouldFeatureSupportBeCalculated(false);",
															"        }",
															"",
															"        // Self Testing Function",
															"        function CouldFeatureSupportBeCalculated(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"Cryptographic key not yet defined.\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// loop-back-kind-on (enum)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of loop-back-kind-on------------------------\");",
															"",
															"        var dummyValue;",
															"        try {",
															"            let supportedLoopBackKindList;",
															"            supportedLoopBackKindList = capability[\"supported-loop-back-kind-list\"];",
															"",
															"            let loopBackKindOn;",
															"            loopBackKindOn = configuration[\"loop-back-kind-on\"];",
															"",
															"            let loopBackKindOnIndex;",
															"            loopBackKindOnIndex = supportedLoopBackKindList.indexOf(loopBackKindOn);",
															"",
															"            let potentialDummyValues;",
															"            potentialDummyValues = supportedLoopBackKindList;",
															"            if (loopBackKindOnIndex >= 0) {",
															"                potentialDummyValues.splice(loopBackKindOnIndex, 1);",
															"            }",
															"            if (potentialDummyValues.length === 0) {",
															"                potentialDummyValues = [\"air-interface-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\"];",
															"            }",
															"",
															"            let dummyValueIndex;",
															"            dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"",
															"            dummyValue = potentialDummyValues[dummyValueIndex];",
															"",
															"            CouldDummyBeCreated(supportedLoopBackKindList, loopBackKindOn, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"loop-back-kind-on\";",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(supportedLoopBackKindList, loopBackKindOn, dummyValue) {",
															"            pm.test(\"CouldDummyBeCreated\", function () {",
															"                pm.expect(supportedLoopBackKindList).to.be.an(\"array\");",
															"                pm.expect(loopBackKindOn).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        try {",
															"            let supportedLoopBackTypes = [];",
															"            supportedLoopBackTypes = capability[\"supported-loop-back-kind-list\"];",
															"",
															"            if ((supportedLoopBackTypes.length === 1)",
															"                && ((supportedLoopBackTypes[0] === \"air-interface-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\")",
															"                    || (supportedLoopBackTypes[0] === \"air-interface-2-0:LOOP_BACK_TYPE_NONE\"))) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            }",
															"            CouldFeaturesBeEvaluated(supportedLoopBackTypes, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        } catch (error) {",
															"            CouldFeaturesBeEvaluated(supportedLoopBackTypes, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldFeaturesBeEvaluated(supportedLoopBackTypes, capabilitiesAreIndicatingThatFeatureNotSupported) {",
															"            pm.test(\"CouldSupportedLoopBackTypesBeRead\", function () {",
															"                pm.expect(supportedLoopBackTypes).to.be.an(\"array\");",
															"                pm.expect(supportedLoopBackTypes.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldCapabilitiesAreIndicatingThatFeatureNotSupportedBeCalculated\", function () {",
															"                pm.expect(capabilitiesAreIndicatingThatFeatureNotSupported).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"air-interface-2-0:LOOP_BACK_TYPE_NONE\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// maintenance-timer (number)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of maintenance-timer------------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"maintenance-timer\";",
															"",
															"        var dummyValue;",
															"        try {",
															"            let maintenanceTimerRange;",
															"            maintenanceTimerRange = capability[\"maintenance-timer-range\"];",
															"            if (maintenanceTimerRange === \"Range of the maintenance timer not yet defined.\") {",
															"                maintenanceTimerRange = \"0-0\";",
															"            }",
															"",
															"            let currentValue;",
															"            currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
															"",
															"            dummyValue = getRandomValues(maintenanceTimerRange, currentValue);",
															"",
															"            CouldDummyValueBeDefined(maintenanceTimerRange,",
															"                currentValue,",
															"                dummyValue",
															"            );",
															"        } catch (error) {",
															"            CouldDummyValueBeDefined(maintenanceTimerRange,",
															"                currentValue,",
															"                dummyValue",
															"            );",
															"        }",
															"",
															"        // Functions",
															"        function getRandomValues(availableValues, currentValue) {",
															"            var randomValue = 0;",
															"            if (availableValues.includes(\"-\")) {",
															"                var rangeValues = availableValues.split(\"-\");",
															"                do {",
															"                    randomValue = getRandomValueFromAvailableValues(rangeValues[0], rangeValues[1]);",
															"                } while (randomValue === currentValue);",
															"            } else if (availableValues.includes(\",\")) {",
															"                var concreteValues = availableValues.split(\",\");",
															"                do {",
															"                    var randomIndex = getRandomValueFromAvailableValues(0, concreteValues.length);",
															"                    randomValue = concreteValues[randomIndex];",
															"                } while (randomValue === currentValue);",
															"            }",
															"            else {",
															"                randomValue = availableValues;",
															"            }",
															"            return parseInt(randomValue);",
															"        }",
															"",
															"        function getRandomValueFromAvailableValues(min, max) {",
															"            return Math.floor(Math.random() * (max - min) + min);",
															"        }",
															"",
															"        // Self Testing Function",
															"        function CouldDummyValueBeDefined(maintenanceTimerRange,",
															"            currentValue,",
															"            dummyValue) {",
															"            pm.test(\"CouldMaintenanceTimerRangeBeRetrieved\", function () {",
															"                pm.expect(maintenanceTimerRange).to.be.a(\"string\");",
															"                pm.expect(maintenanceTimerRange).to.not.have.lengthOf(0);",
															"            });",
															"            pm.test(\"CouldCurrentValueBeRetrieved\", function () {",
															"                pm.expect(currentValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCalculated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// problem-kind-severity-list/problem-kind-severity (enum) ",
															"// it contains key: problem-kind-name (string)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------Checking Configuration of pks/problem-kind-severity--------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"problem-kind-severity-list\";",
															"        var DATATYPE_INDEX_UNDER_TEST = 0;",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"problem-kind-name\";",
															"        var ATTRIBUTE_UNDER_TEST = \"problem-kind-severity\";",
															"",
															"        var dummyValue;",
															"        try {",
															"            let currentValue;",
															"            currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"            if (currentValue === \"air-interface-2-0:SEVERITY_TYPE_MINOR\") {",
															"                dummyValue = \"air-interface-2-0:SEVERITY_TYPE_MAJOR\";",
															"            } else {",
															"                dummyValue = \"air-interface-2-0:SEVERITY_TYPE_MINOR\";",
															"            }",
															"",
															"            keysOfDatatypeInstanceUnderTest[0].value",
															"                = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[0].key];",
															"",
															"        } catch (error) {",
															"            console.log(\"No entry in list of configurable alarms.\");",
															"            dummyValue = \"-1\";",
															"        }",
															"",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"",
															"        // Self Testing Function",
															"",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"air-interface-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// g-826-threshold-cross-alarm-list/alarm-raising-threshold (number) ",
															"// it contains keys: g-826-value-kind (datatype) + granularity-period (number)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------Checking Configuration of g826/alarm-raising-threshold-------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"g-826-threshold-cross-alarm-list\";",
															"        var DATATYPE_INDEX_UNDER_TEST = 0;",
															"        var keysOfDatatypeInstanceUnderTest = [{}, {}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"g-826-value-kind\";",
															"        keysOfDatatypeInstanceUnderTest[1].key = \"granularity-period\";",
															"        var ATTRIBUTE_UNDER_TEST = \"alarm-raising-threshold\";",
															"",
															"        var dummyValue;",
															"        try {",
															"            let currentValue;",
															"            currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"alarm-raising-threshold\"];",
															"",
															"            dummyValue = currentValue + 1 + Math.floor(Math.random() * 3);",
															"",
															"            keysOfDatatypeInstanceUnderTest[0].value",
															"                = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[0].key];",
															"            keysOfDatatypeInstanceUnderTest[1].value",
															"                = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[1].key];",
															"",
															"            CouldDummyValueBeDefined(currentValue, dummyValue);",
															"        } catch (error) {",
															"            console.log(\"No entry in list of configurable alarms.\");",
															"            dummyValue = -1;",
															"            CouldDummyValueBeDefined();",
															"        }",
															"",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"",
															"        // Self Testing Function",
															"        function CouldDummyValueBeDefined(currentValue, dummyValue) {",
															"            pm.test(\"CouldCurrentlyConfiguredValueBeRead\", function () {",
															"                pm.expect(currentValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCalculated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// g-826-threshold-cross-alarm-list/alarm-clearing-threshold (number) ",
															"// it contains keys: g-826-value-kind (datatype) + granularity-period (number)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------Checking Configuration of g826/alarm-clearing-threshold-------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"g-826-threshold-cross-alarm-list\";",
															"        var DATATYPE_INDEX_UNDER_TEST = 0;",
															"        var keysOfDatatypeInstanceUnderTest = [{}, {}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"g-826-value-kind\";",
															"        keysOfDatatypeInstanceUnderTest[1].key = \"granularity-period\";",
															"        var ATTRIBUTE_UNDER_TEST = \"alarm-clearing-threshold\";",
															"",
															"        var dummyValue;",
															"        try {",
															"            let currentValue;",
															"            currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"alarm-clearing-threshold\"];",
															"",
															"            dummyValue = currentValue + 1 + Math.floor(Math.random() * 3);",
															"",
															"            keysOfDatatypeInstanceUnderTest[0].value",
															"                = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[0].key];",
															"            keysOfDatatypeInstanceUnderTest[1].value",
															"                = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[1].key];",
															"",
															"            CouldDummyValueBeDefined(currentValue, dummyValue);",
															"        } catch (error) {",
															"            console.log(\"No entry in list of configurable alarms.\");",
															"            dummyValue = -1;",
															"            CouldDummyValueBeDefined();",
															"        }",
															"",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"",
															"        // Self Testing Function",
															"        function CouldDummyValueBeDefined(currentValue, dummyValue) {",
															"            pm.test(\"CouldCurrentlyConfiguredValueBeRead\", function () {",
															"                pm.expect(currentValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCalculated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// xlts-threshold-cross-alarm-list/xlts-level (number) ",
															"// it contains keys: level-threshold-second-kind (string) ",
															"//                      + granularity-period (number) ",
															"//                      + xlts-threshold-cross-alarm-definition-number (number)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----------Checking Configuration of xlts-threshold-cross-alarm-list/xlts-level------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"xlts-threshold-cross-alarm-list\";",
															"        var DATATYPE_INDEX_UNDER_TEST = 0;",
															"        var keysOfDatatypeInstanceUnderTest = [{}, {}, {}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"level-threshold-second-kind\";",
															"        keysOfDatatypeInstanceUnderTest[1].key = \"granularity-period\";",
															"        keysOfDatatypeInstanceUnderTest[2].key = \"xlts-threshold-cross-alarm-definition-number\";",
															"        var ATTRIBUTE_UNDER_TEST = \"xlts-level\";",
															"",
															"        var dummyValue;",
															"        try {",
															"            let levelThresholdSecondKind;",
															"            levelThresholdSecondKind",
															"                = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"level-threshold-second-kind\"];",
															"            let lowerBorder, upperBorder;",
															"            switch (levelThresholdSecondKind) {",
															"                case \"air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_RLTS\":",
															"                    lowerBorder = -99;",
															"                    upperBorder = -20;",
															"                    break;",
															"                case \"air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_TLTS\":",
															"                    lowerBorder = -25;",
															"                    upperBorder = 30;",
															"                    break;",
															"                case \"air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_NOT_YET_DEFINED\":",
															"                    lowerBorder = 88;",
															"                    upperBorder = 88;",
															"                    break;",
															"            }",
															"",
															"            let range;",
															"            range = (upperBorder - lowerBorder);",
															"",
															"            dummyValue = lowerBorder + Math.floor(Math.random() * range);",
															"",
															"            keysOfDatatypeInstanceUnderTest[0].value",
															"                = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[0].key];",
															"            keysOfDatatypeInstanceUnderTest[1].value",
															"                = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[1].key];",
															"            keysOfDatatypeInstanceUnderTest[2].value = configuration",
															"            [DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[2].key];",
															"",
															"            CouldDummyValueBeDefined(levelThresholdSecondKind, dummyValue);",
															"        } catch (error) {",
															"            console.log(\"No entry in list of xlts threshold cross alarms.\");",
															"            dummyValue = 99;",
															"            CouldDummyValueBeDefined();",
															"        }",
															"",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"",
															"        // Self Testing Function",
															"        function CouldDummyValueBeDefined(levelThresholdSecondKind, dummyValue) {",
															"            pm.test(\"CouldLevelThresholdSecondKindBeRead\", function () {",
															"                pm.expect(levelThresholdSecondKind).to.be.a(\"string\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCalculated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = 99;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// xlts-threshold-cross-alarm-list/amount-of-seconds (number) ",
															"// it contains keys: level-threshold-second-kind (string) ",
															"//                      + granularity-period (number) ",
															"//                      + xlts-threshold-cross-alarm-definition-number (number)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------Checking Configuration of xlts-threshold-cross-alarm-list/amount-of-seconds-------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"xlts-threshold-cross-alarm-list\";",
															"        var DATATYPE_INDEX_UNDER_TEST = 0;",
															"        var keysOfDatatypeInstanceUnderTest = [{}, {}, {}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"level-threshold-second-kind\";",
															"        keysOfDatatypeInstanceUnderTest[1].key = \"granularity-period\";",
															"        keysOfDatatypeInstanceUnderTest[2].key = \"xlts-threshold-cross-alarm-definition-number\";",
															"        var ATTRIBUTE_UNDER_TEST = \"amount-of-seconds\";",
															"",
															"        var dummyValue;",
															"        try {",
															"            let configuredAmountOfSeconds;",
															"            configuredAmountOfSeconds = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"",
															"            dummyValue = configuredAmountOfSeconds + 1 + Math.floor(Math.random() * 9);",
															"",
															"            keysOfDatatypeInstanceUnderTest[0].value",
															"                = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[0].key];",
															"            keysOfDatatypeInstanceUnderTest[1].value",
															"                = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[1].key];",
															"            keysOfDatatypeInstanceUnderTest[2].value = configuration",
															"            [DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[2].key];",
															"",
															"            CouldDummyValueBeDefined(configuredAmountOfSeconds, dummyValue);",
															"        } catch (error) {",
															"            console.log(\"No entry in list of xlts threshold cross alarms.\");",
															"            dummyValue = -1;",
															"            CouldDummyValueBeDefined();",
															"        }",
															"",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"",
															"        // Self Testing Function",
															"        function CouldDummyValueBeDefined(configuredAmountOfSeconds, dummyValue) {",
															"            pm.test(\"CouldCurrentlyConfiguredconfiguredAmountOfSecondsBeRead\", function () {",
															"                pm.expect(configuredAmountOfSeconds).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCalculated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// acm-threshold-cross-alarm-list/transmission-mode (string) ",
															"// it contains keys: acm-threshold-cross-alarm-definition-number (number) + granularity-period (number)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n---------Checking Configuration of acm-threshold-cross-alarm-list/transmission-mode-------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"acm-threshold-cross-alarm-list\";",
															"        var DATATYPE_INDEX_UNDER_TEST = 0;",
															"        var keysOfDatatypeInstanceUnderTest = [{}, {}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"acm-threshold-cross-alarm-definition-number\";",
															"        keysOfDatatypeInstanceUnderTest[1].key = \"granularity-period\";",
															"        var ATTRIBUTE_UNDER_TEST = \"transmission-mode\";",
															"",
															"        var dummyValue;",
															"        try {",
															"            let currentValue;",
															"            currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"",
															"            let currentlyActiveTransmissionModes = [];",
															"            currentlyActiveTransmissionModes = DeriveCurrentlyActiveTransmissionModes(capability, configuration);",
															"",
															"            let currentlyCoveredTransmissionModes = [];",
															"            currentlyCoveredTransmissionModes = DeriveCurrentlyCoveredTransmissionModes(capability, configuration);",
															"",
															"            let allActiveModesAreAlreadyCovered;",
															"            allActiveModesAreAlreadyCovered",
															"                = CheckWhetherAllActiveModesAreAlreadyCovered(currentlyActiveTransmissionModes,",
															"                    currentlyCoveredTransmissionModes",
															"                );",
															"",
															"            if (allActiveModesAreAlreadyCovered === true) {",
															"                dummyValue = currentValue;",
															"            } else {",
															"                let randomTransmissionModeIndex = Math.floor(Math.random() * currentlyActiveTransmissionModes.length);",
															"                dummyValue = currentlyActiveTransmissionModes[randomTransmissionModeIndex];",
															"            }",
															"",
															"            keysOfDatatypeInstanceUnderTest[0].value",
															"                = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[0].key];",
															"            keysOfDatatypeInstanceUnderTest[1].value",
															"                = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[1].key];",
															"",
															"            CouldDummyValueBeDefined(currentValue, currentlyActiveTransmissionModes,",
															"                currentlyCoveredTransmissionModes,",
															"                allActiveModesAreAlreadyCovered,",
															"                dummyValue);",
															"        } catch (error) {",
															"            console.log(\"No entry in list of acm threshold cross alarms.\");",
															"            dummyValue = \"-1\";",
															"            CouldDummyValueBeDefined();",
															"        }",
															"",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"",
															"        // Functions",
															"        function TransmissionModeIndexOf(currentModeName, capability) {",
															"            for (let i = 0; i < (capability[\"transmission-mode-list\"].length); i++) {",
															"                let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
															"                if (sampleModeName === currentModeName) {",
															"                    return i;",
															"                }",
															"            }",
															"            console.log(\"ERROR: Name of transmission mode could not be found in air-interface-capability::transmission-mode-list.\");",
															"        }",
															"",
															"        function DeriveCurrentlyActiveTransmissionModes(capability, configuration) {",
															"            let currentlyActiveTransmissionModes = [];",
															"            let adaptiveModulationIsOn = configuration[\"adaptive-modulation-is-on\"];",
															"            let transmissionModeMin = configuration[\"transmission-mode-min\"];",
															"            let transmissionModeMinIndex = TransmissionModeIndexOf(transmissionModeMin, capability);",
															"            let transmissionModeMinRank = capability[\"transmission-mode-list\"][transmissionModeMinIndex][\"transmission-mode-rank\"];",
															"            let transmissionModeMax = configuration[\"transmission-mode-max\"];",
															"            let transmissionModeMaxIndex = TransmissionModeIndexOf(transmissionModeMax, capability);",
															"            let transmissionModeMaxRank = capability[\"transmission-mode-list\"][transmissionModeMaxIndex][\"transmission-mode-rank\"];",
															"            let currentlyActiveChannelBandwidth = capability[\"transmission-mode-list\"][transmissionModeMinIndex][\"channel-bandwidth\"];",
															"            if (adaptiveModulationIsOn === true) {",
															"                for (let i = 0; i < (capability[\"transmission-mode-list\"].length); i++) {",
															"                    let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
															"                    let sampleModeRank = capability[\"transmission-mode-list\"][i][\"transmission-mode-rank\"];",
															"                    let sampleModeChannelBandwidth = capability[\"transmission-mode-list\"][i][\"channel-bandwidth\"];",
															"                    if ((sampleModeChannelBandwidth === currentlyActiveChannelBandwidth)",
															"                        && (sampleModeRank >= transmissionModeMinRank)",
															"                        && (sampleModeRank <= transmissionModeMaxRank)) {",
															"                        currentlyActiveTransmissionModes.push(sampleModeName);",
															"                    }",
															"                }",
															"            } else {",
															"                currentlyActiveTransmissionModes.push(transmissionModeMin);",
															"            }",
															"            return currentlyActiveTransmissionModes;",
															"        }",
															"",
															"        function DeriveCurrentlyCoveredTransmissionModes(capability, configuration) {",
															"            let currentlyCoveredTransmissionModes = [];",
															"            for (let i = 0; i < (configuration[\"acm-threshold-cross-alarm-list\"].length); i++) {",
															"                let coveredModeName = configuration[\"acm-threshold-cross-alarm-list\"][i][\"transmission-mode\"];",
															"                let coveredGranularityPeriod = configuration[\"acm-threshold-cross-alarm-list\"][i][\"granularity-period\"];",
															"                if (coveredGranularityPeriod === \"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\") {",
															"                    currentlyCoveredTransmissionModes.push(coveredModeName);",
															"                }",
															"            }",
															"            return currentlyCoveredTransmissionModes;",
															"        }",
															"",
															"        function CheckWhetherAllActiveModesAreAlreadyCovered(currentlyActiveTransmissionModes,",
															"            currentlyCoveredTransmissionModes) {",
															"            return currentlyActiveTransmissionModes.every(i => currentlyCoveredTransmissionModes.includes(i));",
															"        }",
															"",
															"",
															"        // Self Testing Function",
															"        function CouldDummyValueBeDefined(currentValue, currentlyActiveTransmissionModes,",
															"            currentlyCoveredTransmissionModes,",
															"            allActiveModesAreAlreadyCovered,",
															"            dummyValue) {",
															"            pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () {",
															"                pm.expect(currentValue).to.be.a(\"string\");",
															"                pm.expect(currentValue).to.not.have.lengthOf(0);",
															"            });",
															"            pm.test(\"CouldCurrentlyActiveTransmissionModesBeDerived\", function () {",
															"                pm.expect(currentlyActiveTransmissionModes).to.be.an(\"array\");",
															"                pm.expect(currentlyActiveTransmissionModes.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldCurrentlyCoveredTransmissionModesBeDerived\", function () {",
															"                pm.expect(currentlyCoveredTransmissionModes).to.be.an(\"array\");",
															"            });",
															"            pm.test(\"CouldActiveAndCoveredTransmissionModesBeCompared\", function () {",
															"                pm.expect(allActiveModesAreAlreadyCovered).to.be.a(\"boolean\");",
															"            });",
															"",
															"            pm.test(\"CouldDummyValueBeCalculated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// acm-threshold-cross-alarm-list/amount-of-seconds (number) ",
															"// it contains keys: acm-threshold-cross-alarm-definition-number (number) + granularity-period (number)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n---------Checking Configuration of acm-threshold-cross-alarm-list/amount-of-seconds-------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"acm-threshold-cross-alarm-list\";",
															"        var DATATYPE_INDEX_UNDER_TEST = 0;",
															"        var keysOfDatatypeInstanceUnderTest = [{}, {}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"acm-threshold-cross-alarm-definition-number\";",
															"        keysOfDatatypeInstanceUnderTest[1].key = \"granularity-period\";",
															"        var ATTRIBUTE_UNDER_TEST = \"amount-of-seconds\";",
															"",
															"        var dummyValue;",
															"        try {",
															"            let amountOfSeconds;",
															"            amountOfSeconds = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"",
															"            dummyValue = amountOfSeconds + 1 + Math.floor(Math.random() * 9);",
															"",
															"            keysOfDatatypeInstanceUnderTest[0].value",
															"                = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[0].key];",
															"            keysOfDatatypeInstanceUnderTest[1].value",
															"                = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[1].key];",
															"",
															"            CouldDummyValueBeDefined(amountOfSeconds, dummyValue);",
															"        } catch (error) {",
															"            console.log(\"No entry in list of acm threshold cross alarms.\");",
															"            dummyValue = \"-1\";",
															"            CouldDummyValueBeDefined();",
															"        }",
															"",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"",
															"        // Self Testing Function",
															"        function CouldDummyValueBeDefined(amountOfSeconds, dummyValue) {",
															"            pm.test(\"CouldCurrentConfigurationValueBeRead\", function () {",
															"                pm.expect(amountOfSeconds).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCalculated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// clearing-threshold-cross-alarms-is-on (boolean)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------------Checking Configuration of clearing-threshold-cross-alarms-is-on-------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"clearing-threshold-cross-alarms-is-on\";",
															"",
															"        // Individual Values Definition",
															"        var dummyValue;",
															"        try {",
															"            dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// performance-monitoring-is-on (boolean)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------Checking Configuration of performance-monitoring-is-on-----------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"",
															"        // Individual Values Definition",
															"        var dummyValue;",
															"        try {",
															"            dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        try {",
															"            if (capability[\"performance-monitoring-is-avail\"] === false) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            }",
															"            CouldFeatureSupportBeCalculated(true);",
															"        } catch (error) {",
															"            CouldFeatureSupportBeCalculated(false);",
															"        }",
															"",
															"        // Self Testing Function",
															"        function CouldFeatureSupportBeCalculated(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"",
															"pm.collectionVariables.set(\"attributes\", attributes);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function ConvertingThisFunctionToString(functionToBeConverted) {",
															"    let functionAsAString = String(functionToBeConverted);",
															"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
															"    return functionAsAString.slice(indexOfFirstCurly);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointAirInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n----------------EntryPoint of AirInterface Validation of Configuration-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the AirInterfaceConfiguration TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].airInterfaceList.length;",
															"    var maximumIndexOfLtpUnderTest;",
															"    ",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.min( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointAirInterfaceConfiguration\");",
															"        console.log(\"Proceeding with terminating AirInterface validation for Completeness.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Provided Collection Variables ",
															"****************************************************************************************/",
															"INITIAL_INDEX_OF_ATTRIBUTE_UNDER_TEST = 0;",
															"",
															"pm.collectionVariables.set(\"indexOfAttributeUnderTest\", INITIAL_INDEX_OF_ATTRIBUTE_UNDER_TEST);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "CollectionInformationLoading",
									"item": [
										{
											"name": "UploadingInterfaceCapability",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Capabilities-------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the Interface Capabilities",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Configuration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Configuration",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceStatus",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n------------------------------Uploading Interface Status----------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Status",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"status\";          // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Displaying the Collection Variables right before starting the validation",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NetworkPreparation",
									"item": [],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "AttributeConfiguration",
									"item": [
										{
											"name": "EntryPointAirInterfaceAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the AttributeConfiguration Tests ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var attributes = pm.collectionVariables.get(\"attributes\");",
															"    var indexOfAttributeUnderTest = pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
															"    ",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    ",
															"    CouldTheInputBeLoaded(attributes, indexOfAttributeUnderTest, dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"        ",
															"    if ( indexOfAttributeUnderTest < attributes.length ) {",
															"        postman.setNextRequest();",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointAirInterfaceAttributeConfiguration\");",
															"    }",
															"        ",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(attributes, indexOfAttributeUnderTest, dummyUri) {",
															"    pm.test(\"CouldTheAttributesBeLoaded\", function () {",
															"        pm.expect(attributes).to.be.an(\"array\");",
															"    });",
															"    pm.test(\"CouldIndexOfAttributeUnderTestBeLoaded\", function () {",
															"        pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"CouldTheDummyUriBeLoaded\", function () {",
															"        pm.expect(dummyUri).to.be.a(\"string\");",
															"        pm.expect(dummyUri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Writing",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Retrieving DummyCode",
															"****************************************************************************************/",
															"try {",
															"    var dummyCode = JSON.parse(pm.response.code);",
															"    var dummyErrorMessage = \"\";",
															"    if ( Math.floor(dummyCode/100) !== 2 ) {",
															"        var dummyErrorMessage = JSON.parse(pm.response.stream).errors.error[0][\"error-message\"];",
															"    }",
															"    CouldResponseBeRetrieved(dummyCode, dummyErrorMessage);",
															"} catch (error) {",
															"    CouldResponseBeRetrieved();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting Local Variables",
															"****************************************************************************************/   ",
															"pm.variables.set(\"dummyCode\", dummyCode);",
															"pm.variables.set(\"dummyErrorMessage\", dummyErrorMessage);",
															"",
															"    ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldResponseBeRetrieved(responseCode, responseErrorMessage) {",
															"    pm.test(\"CouldTheDummyCodeOfPuttingBeReceived\", function () {",
															"        pm.expect(responseCode).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"CouldTheErrorMessagePuttingBeComposed\", function () {",
															"        pm.expect(responseErrorMessage).to.be.a(\"string\");",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Writing",
															"* ",
															"* This Request is for PUTting an attribute with the alternate value and",
															"* providing this value as dummyValueString to the local Variables.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfWritingAsaString = pm.environment.get(\"PreRequestOfWritingAsaString\");",
															"    eval(PreRequestOfWritingAsaString);",
															"    CouldPreRequestOfWritingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfWritingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfWritingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfWritingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Reading",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Reading",
															"* ",
															"* This Request is for GETting the value of the attributeUnderTest and providing it ",
															"* as ResultValue to the local Variables",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfReadingAsaString = pm.environment.get(\"PreRequestOfReadingAsaString\");",
															"    eval(PreRequestOfReadingAsaString);",
															"    CouldPreRequestOfReadingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfReadingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfReadingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfReadingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PostRequestOfReadingAsaString = pm.environment.get(\"PostRequestOfReadingAsaString\");",
															"    eval(PostRequestOfReadingAsaString);",
															"    CouldPostRequestOfReadingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPostRequestOfReadingBeExecuted();",
															"}",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPostRequestOfReadingBeExecuted(success) {",
															"    pm.test(\"CouldPostRequestOfReadingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Evaluating",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Evaluating",
															"* ",
															"* This Request compares resultValue with dummyValue.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfEvaluatingAsaString = pm.environment.get(\"PreRequestOfEvaluatingAsaString\");",
															"    var dummyCode = pm.variables.get(\"dummyCode\");",
															"    ",
															"    eval(PreRequestOfEvaluatingAsaString);",
															"",
															"    if ( Math.floor(dummyCode/100) !==2 ) {",
															"        postman.setNextRequest(\"ReversalPointAirInterfaceAttributeConfiguration\");",
															"    }",
															"    ",
															"    CouldPreRequestOfEvaluatingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfEvaluatingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfEvaluatingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfEvaluatingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Restoring",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Restoring",
															"* ",
															"* This Request is for Restoring the initial value to the attributeUnderTest",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfRestoringAsaString = pm.environment.get(\"PreRequestOfRestoringAsaString\");",
															"    eval(PreRequestOfRestoringAsaString);",
															"    CouldPreRequestOfRestoringBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfRestoringBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfRestoringBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfRestoringBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Setting Local Variables",
															"****************************************************************************************/   ",
															"pm.variables.clear();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ReversalPointAirInterfaceAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"        ",
															"    var indexOfAttributeUnderTest = pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
															"        ",
															"    CouldTheInputBeLoaded(dummyUri, indexOfAttributeUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextAttributeUnderTest = indexOfAttributeUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfAttributeUnderTest\", indexOfPotentialNextAttributeUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointAirInterfaceAttributeConfiguration\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfAttributeUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointAirInterfaceAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* ExitPoint",
															"* ",
															"* This Request is terminating the Test",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NetworkRestoration",
									"item": [
										{
											"name": "SettingOriginalInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------------Restoring the Original Interface Configuration Again-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting the Original Interface Configuration Again",
															"* ",
															"* This Request is for restoring the configuration from before the interface validation ",
															"* on the device.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"        ",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration",
															"                                                   );",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    completeClassName = moduleUnderTest + \":\" + technologyUnderTest + \"-configuration\";",
															"    configuration = AddHeadlineToDataObject(configuration, completeClassName);",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched back on original values.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched back on original values.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointAirInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n----------------ReversalPoint of AirInterface Validation of Configuration-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Console.log of Validation Results",
															" ****************************************************************************************/",
															"let allConfigurationValidationResults = { \"allConfigurationValidationResults\" : configurationValidationResults };",
															"console.log(allConfigurationValidationResults);",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointAirInterfaceConfiguration\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointAirInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------------------Terminating AirInterfaceConfiguration----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ExitPoint",
															"* ",
															"* This Request is for clearing the Collection variables and terminating the TestCase",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Clearing all Collection Variables for Terminating the TestCase",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "EthernetContainerValidation",
					"item": [
						{
							"name": "EthernetContainerCompleteness",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputCompletenessEc",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n\\n============================ EthernetContainerCompleteness.3 =============================\");",
															"/****************************************************************************************",
															"* ",
															"* RequestCollection for validating Completeness of EthernetContainer Objects against definition ",
															"* ",
															"*                   EthernetContainer_2.0.0-tsp.200121.1830",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Manual Definition of the Mode of Operation of this TestCase",
															"****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"one\"; // \"none\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"ethernet-container-2-0:ethernet-container-pac\"; // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function () {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function () {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointEthernetContainerCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------EntryPoint of EthernetContainer Validation for Completeness-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the EthernetContainerCompleteness TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].ethernetContainerList.length;",
															"    var maximumIndexOfLtpUnderTest;",
															"    ",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.min( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointEthernetContainerCompleteness\");",
															"        console.log(\"Proceeding with terminating EthernetContainer validation for Completeness.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceCapability",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Capabilities-------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the Interface Capabilities",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Configuration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Configuration",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Displaying the Collection Variables right before starting the validation",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "NetworkPreparation",
									"item": [
										{
											"name": "SwitchingOnInterface",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------Preparation: Switching Interface On----------------------------\");",
															"/****************************************************************************************",
															" * ",
															" * Switching Interface On",
															" * ",
															" * This Request is for assuring the EthernetContainer being switched on,",
															" * so the data can be retrieved during validating completeness of the implementation",
															" *  ",
															" ****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															" * Required Input Parameters",
															" ****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables, capability, configuration);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Forming the Body",
															" ****************************************************************************************/",
															"try {",
															"    let requestBodyString = ('{ \"' + moduleUnderTest + ':interface-is-on\": true }');",
															"    var requestBody = JSON.parse(requestBodyString);",
															"    CouldRequestBodyBeFormed(requestBody);",
															"} catch (error) {",
															"    CouldRequestBodyBeFormed();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Setting up Local Variables and Calling for Preparation of the Request",
															" ****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"interface-is-on\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(requestBody);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputBeLoaded(SettingTheRequestVariables, capability, configuration) {",
															"    pm.test(\"CouldInputBeLoaded\", function() {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(configuration).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyBeFormed(requestBody) {",
															"    pm.test(\"CouldRequestBodyBeFormed\", function() {",
															"        pm.expect(requestBody).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, ",
															"                                                keysOfDatatypeInstanceUnderTest,",
															"                                                attributeUnterTest, ",
															"                                                contentType,",
															"                                                filteredDepth, ",
															"                                                filteredFields, ",
															"                                                requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"            \"current-problems\", \"current-performance\",",
															"            \"historical-performances\"",
															"        ]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function() {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched on.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched on.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "SwitchingOnMonitoring",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------------Switching Monitoring On----------------------------------\");",
															"/****************************************************************************************",
															" * ",
															" * Switching Monitoring On",
															" * ",
															" * This Request is for activating collection of performance data on the device under",
															" * test, so the data can be retrieved during validating completeness of the implementation",
															" *  ",
															" ****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															" * Required Input Parameters",
															" ****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, capability, configuration);",
															"} catch (error) {",
															"    CouldInputForSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Forming the Body",
															" ****************************************************************************************/",
															"try {",
															"    let requestBodyString = ('{ \"' + moduleUnderTest + ':performance-monitoring-is-on\": true }');",
															"    var requestBody = JSON.parse(requestBodyString);",
															"    CouldRequestBodyBeFormed(requestBody);",
															"} catch (error) {",
															"    CouldRequestBodyBeFormed();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Setting up Local Variables and Calling for Preparation of the Request",
															" ****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(requestBody);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, capability, configuration) {",
															"    pm.test(\"CouldInputForSwitchingMonitoringOnBeLoaded\", function() {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(configuration).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyBeFormed(requestBody) {",
															"    pm.test(\"CouldRequestBodyBeFormed\", function() {",
															"        pm.expect(requestBody).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, ",
															"                                                keysOfDatatypeInstanceUnderTest,",
															"                                                attributeUnterTest, ",
															"                                                contentType,",
															"                                                filteredDepth, ",
															"                                                filteredFields, ",
															"                                                requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"            \"current-problems\", \"current-performance\",",
															"            \"historical-performances\"",
															"        ]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function() {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched on.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched on.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "ValidationRequests",
									"item": [
										{
											"name": "LtpCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------------Checking EthernetContainerLtp for Completeness------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* This Request is for validating EthernetContainerLtp objects against definition ",
															"*",
															"* ONF Core IM 1.4",
															"*",
															"* as it can be found on https://github.com/openBackhaul/core/tree/tsp",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"\";",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 5;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let ETHERNET_CONTAINER_LTP_SCHEMA = {",
															"    \"type\": \"object\",",
															"\t\"properties\": {",
															"        \"core-model-1-4:logical-termination-point\": {",
															"            \"type\": \"array\",",
															"            \"items\": {",
															"                \"type\": \"object\",",
															"                \"properties\": {",
															"                    \"physical-port-reference\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"string\",",
															"                        },",
															"                    },                    ",
															"                    \"connected-ltp\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                    \"supporting-pc\": \t\t\t\t            \t            { \"type\": \"string\" },",
															"                    \"client-ltp\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"string\",",
															"                        },",
															"                    },",
															"                    \"server-ltp\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"string\",",
															"                        },",
															"                    },",
															"                    \"ltp-direction\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                    \"transfer-capacity-pac\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"embedded-clock\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"run-mode\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"encompassed-clock\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },",
															"                                \"encapsulated-fc\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": {",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"uuid\": \t\t\t\t\t                    { \"type\": \"string\" },",
															"                                            \"local-id\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"lifecycle-state\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                                            \"layer-protocol-name\": \t\t\t                { \"type\": \"string\" },",
															"                                            \"administrative-state\":    \t\t\t\t\t    { \"type\": \"string\" },",
															"                                            \"name\": {",
															"                                                \"type\": \"array\",",
															"                                                \"items\": { ",
															"                                                    \"type\": \"object\",",
															"                                                    \"properties\": {",
															"                                                    },",
															"                                                },",
															"                                            },",
															"                                            \"fc-route\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"operational-state\":     \t\t\t\t\t    { \"type\": \"string\" },",
															"                                            \"administrative-control\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                            \"supporting-pc\": \t\t\t\t            \t{ \"type\": \"string\" },",
															"                                            \"service-priority\": \t\t\t                { \"type\": \"string\" },",
															"                                            \"forwarding-direction\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                            \"fc-port\": {",
															"                                                \"type\": \"array\",",
															"                                                \"items\": {",
															"                                                    \"type\": \"object\",",
															"                                                    \"properties\": {",
															"                                                    },",
															"                                                },",
															"                                            },",
															"                                            \"is-protection-lock-out\": \t\t\t\t\t    { \"type\": \"boolean\" },                    ",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"sync-ltp\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },                                ",
															"                                \"encapsulated-casc\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },",
															"                                \"phase-aligned-clock\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },",
															"                                \"local-id\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"configured-client-capacity\": \t\t\t\t\t{ \"type\": \"string\" },",
															"                                \"fc-blocks-signal-to-lp\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                \"lifecycle-state\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                                \"layer-protocol-name\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                                \"termination-state\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                                \"administrative-state\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                \"lp-direction\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                                \"is-protection-lock-out\":            \t\t\t{ \"type\": \"boolean\" },                    ",
															"                                \"operational-state\":     \t\t\t            { \"type\": \"string\" },",
															"                                \"administrative-control\": \t\t\t\t\t    { \"type\": \"string\" },                                ",
															"                                \"name\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"label\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"extension\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"operational-state\":     \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"administrative-control\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"administrative-state\":    \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"lifecycle-state\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                                \"address\": \t\t\t\t\t                                { \"type\": \"string\" },",
															"                            },",
															"                        },",
															"                    },                  ",
															"                    \"peer-ltp\":              \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"ltp-in-other-view\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"string\",",
															"                        },",
															"                    },",
															"                    \"ltp-augment-1-0:ltp-augment-pac\": {",
															"                        \"type\": \"object\",",
															"                        \"properties\": {",
															"                            \"ltp-augment-capability\": {",
															"                                \"type\": \"object\",",
															"                                \"properties\": {",
															"                                    \"equipment\": {",
															"                                        \"type\": \"array\",",
															"                                        \"items\": { ",
															"                                            \"type\": \"string\",",
															"                                        },",
															"                                    },                    ",
															"                                    \"connector\":                                 { \"type\": \"string\" },",
															"                                },",
															"                                \"required\": [",
															"                                    \"equipment\", ",
															"                                    \"connector\",",
															"                                ],",
															"                            },",
															"                        },",
															"                        \"required\": [",
															"                            \"ltp-augment-capability\", ",
															"                        ],",
															"                    },",
															"                    \"layer-protocol\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": {",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"layer-protocol-name\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                                \"configured-client-capacity\": \t\t\t\t\t{ \"type\": \"string\" },",
															"                                \"lp-direction\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                                \"termination-state\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                                \"configuration-and-switch-control\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },",
															"                                \"is-protection-lock-out\":            \t\t\t{ \"type\": \"boolean\" },",
															"                                \"fc-blocks-signal-to-lp\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                \"ethernet-container-2-0:ethernet-container-pac\": {",
															"                                    \"properties\": {",
															"                                        \"ethernet-container-capability\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"available-queue-list\":                                     { \"type\": \"array\"   },",
															"                                                \"explicit-congestion-notification-is-avail\": \t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"ingress-policing-is-avail\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"supported-header-compression-kind-list\":                   { \"type\": \"array\"   },",
															"                                                \"egress-shaping-is-avail\": \t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"information-rate-min\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                                                \"information-rate-max\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                                                \"burst-size-min\": \t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                                                \"burst-size-max\": \t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                                                \"bundling-is-avail\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"bundling-group-size-max\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                                                \"support-of-management-frames-without-preamble-is-avail\": \t{ \"type\": \"boolean\" },",
															"                                                \"fec-is-avail\": \t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"fec-word-size-max\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                                                \"supported-fec-redundancy-size-list\":                       { \"type\": \"array\"   },",
															"                                                \"supported-fec-interleaver-kind-list\":                      { \"type\": \"array\"   },",
															"                                                \"supported-fec-interleaver-depth-list\":                     { \"type\": \"array\"   },",
															"                                                \"encryption-is-avail\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"admin-shut-down-is-avail\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"supported-loop-back-kind-list\":                            { \"type\": \"array\"   },",
															"                                                \"maintenance-timer-range\": \t\t\t\t\t\t\t\t\t{ \"type\": \"string\"  },",
															"                                                \"statistics-is-avail\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"supported-alarm-list\":                                     { \"type\": \"array\"   },",
															"                                                \"performance-monitoring-is-avail\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                                            },",
															"                                        },",
															"                                        \"ethernet-container-configuration\":{",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"interface-name\": \t\t\t\t\t\t\t                { \"type\": \"string\"  },",
															"                                                \"interface-is-on\": \t\t\t\t\t\t\t                { \"type\": \"boolean\" },",
															"                                                \"queue-behavior-list\":                                      { \"type\": \"array\"   },",
															"                                                \"explicit-congestion-notification-is-on\": \t                { \"type\": \"boolean\" },",
															"                                                \"ingress-policing-profile\":                                 { \"type\": \"string\"  },",
															"                                                \"egress-shaping-is-on\":                  \t\t\t\t\t{ \"type\": \"boolean\" },\t",
															"                                                \"maximum-information-rate\": \t\t\t\t                { \"type\": \"number\"  },",
															"                                                \"maximum-burst-size\": \t\t\t\t\t\t                { \"type\": \"number\"  },\t",
															"                                                \"bundling-is-on\": \t\t\t\t\t\t\t                { \"type\": \"boolean\" },",
															"                                                \"header-compression-kind\":                                  { \"type\": \"string\"  },",
															"                                                \"fec-is-on\": \t\t\t\t\t\t\t\t                { \"type\": \"boolean\" },",
															"                                                \"fec-word-size\": \t\t\t\t\t\t\t                { \"type\": \"number\"  },\t\t",
															"                                                \"fec-redundancy-size\": { \"enum\": [",
															"                                                                    \"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_2\",",
															"                                                                    \"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_4\",",
															"                                                                    \"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_8\",",
															"                                                                    \"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_16\",",
															"                                                                    \"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_20\",",
															"                                                                    \"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_NOT_YET_DEFINED\",",
															"                                                                ]",
															"                                                },",
															"                                                \"fec-interleaver-kind\": { \"enum\": [",
															"                                                                    \"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_NONE\",",
															"                                                                    \"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_BLOCK\",",
															"                                                                    \"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_CONVOLUTION\",",
															"                                                                    \"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_NOT_YET_DEFINED\",",
															"                                                                ]",
															"                                                },",
															"                                                \"fec-interleaver-depth\": { \"enum\": [",
															"                                                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_1\",",
															"                                                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_2\",",
															"                                                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_3\",",
															"                                                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_4\",",
															"                                                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_6\",",
															"                                                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_8\",",
															"                                                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_12\",",
															"                                                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_16\",",
															"                                                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_24\",",
															"                                                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_32\",",
															"                                                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_48\",",
															"                                                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_96\",",
															"                                                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_NOT_YET_DEFINED\",",
															"                                                                ]",
															"                                                },",
															"                                                \"encryption-is-on\": \t\t\t\t\t\t                { \"type\": \"boolean\" },\t",
															"                                                \"cryptographic-key\": \t\t\t\t\t\t                { \"type\": \"string\"  },\t\t",
															"                                                \"loop-back-kind-on\": { \"enum\": [",
															"                                                                \"ethernet-container-2-0:LOOP_BACK_TYPE_NONE\",",
															"                                                                \"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\",",
															"                                                                \"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\",",
															"                                                                \"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\",",
															"                                                            ]",
															"                                                },",
															"                                                \"maintenance-timer\": \t\t\t\t\t\t                { \"type\": \"number\"  },",
															"                                                \"statistics-is-on\": \t\t\t\t\t\t                { \"type\": \"boolean\" },",
															"                                                \"problem-kind-severity-list\":                               { \"type\": \"array\"   },",
															"                                                \"performance-monitoring-is-on\": \t\t\t                { \"type\": \"boolean\" },",
															"                                            },",
															"                                        },",
															"                                        \"ethernet-container-status\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"interface-status\": { \"enum\": [",
															"                                                                \"ethernet-container-2-0:INTERFACE_STATUS_TYPE_UP\",",
															"                                                                \"ethernet-container-2-0:INTERFACE_STATUS_TYPE_DOWN\",",
															"                                                                \"ethernet-container-2-0:INTERFACE_STATUS_TYPE_TESTING\",",
															"                                                                \"ethernet-container-2-0:INTERFACE_STATUS_TYPE_UNKNOWN\",",
															"                                                                \"ethernet-container-2-0:INTERFACE_STATUS_TYPE_DORMANT\",",
															"                                                                \"ethernet-container-2-0:INTERFACE_STATUS_TYPE_NOT_PRESENT\",",
															"                                                                \"ethernet-container-2-0:INTERFACE_STATUS_TYPE_LOWER_LAYER_DOWN\",",
															"                                                                \"ethernet-container-2-0:INTERFACE_STATUS_TYPE_ADMIN_DOWN\",",
															"                                                                \"ethernet-container-2-0:INTERFACE_STATUS_TYPE_NOT_YET_DEFINED\",",
															"                                                            ]",
															"                                                },",
															"                                                \"bundling-is-up\":                                           { \"type\": \"boolean\" },",
															"                                                \"remote-site-is-faulty\":                                    { \"type\": \"boolean\" },                ",
															"                                                \"loop-back-kind-up\": { \"enum\": [",
															"                                                                    \"ethernet-container-2-0:LOOP_BACK_TYPE_NONE\",",
															"                                                                    \"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\",",
															"                                                                    \"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\",",
															"                                                                    \"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\",",
															"                                                                ]",
															"                                                },",
															"                                                \"statistics-is-up\":                                         { \"type\": \"boolean\" },",
															"                                                \"performance-monitoring-is-up\":                             { \"type\": \"boolean\" },",
															"                                                \"timestamp\":                                                { \"type\": \"string\"  },",
															"                                                \"last-10-sec-data-input-rate\":                              { \"type\": \"integer\" },",
															"                                                \"last-10-sec-data-output-rate\":                             { \"type\": \"integer\" },",
															"                                                \"total-bytes-input\":                                        { \"type\": \"string\" },",
															"                                                \"total-bytes-output\":                                       { \"type\": \"string\" },",
															"                                                \"forwarded-bytes-input\":                                    { \"type\": \"string\" },",
															"                                                \"forwarded-bytes-output\":                                   { \"type\": \"string\" },",
															"                                            },",
															"                                        },",
															"                                        \"ethernet-container-current-problems\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"current-problem-list\":                                     { \"type\": \"array\"   },",
															"                                                \"number-of-current-problems\":  \t\t\t                    { \"type\": \"number\"  },",
															"                                                \"time-of-latest-change\":                                    { \"type\": \"string\"  },",
															"                                            },",
															"                                        },",
															"                                        \"ethernet-container-current-performance\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"current-performance-data-list\":                            { \"type\": \"array\"   },",
															"                                                \"number-of-current-performance-sets\":                       { \"type\": \"number\"  },",
															"                                            },",
															"                                        },",
															"                                        \"ethernet-container-historical-performances\":{",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"historical-performance-data-list\":                         { \"type\": \"array\"   },",
															"                                                \"number-of-historical-performance-sets\":                    { \"type\": \"number\"  },",
															"                                                \"time-of-latest-change\": \t\t\t                        { \"type\": \"string\"  },",
															"                                            },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"local-id\": \t\t\t\t\t                            { \"type\": \"string\" },",
															"                                \"name\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"label\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"extension\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"operational-state\":     \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"administrative-control\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"administrative-state\":    \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"lifecycle-state\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                                \"address\": \t\t\t\t\t                                { \"type\": \"string\" },",
															"                            },",
															"                            \"required\": [",
															"                                \"layer-protocol-name\",",
															"                                \"ethernet-container-2-0:ethernet-container-pac\",",
															"                                \"local-id\",",
															"                            ],",
															"                        },",
															"                    },",
															"                    \"external-managed-id\": {",
															"                        \"type\": \"object\",",
															"                        \"properties\": {",
															"                            \"manager-identifier\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                            \"external-managed-uuid\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                        },",
															"                    },",
															"                    \"local-id\": \t\t\t\t\t                            { \"type\": \"string\" },",
															"                    \"uuid\": \t\t\t\t\t                                { \"type\": \"string\" },",
															"                    \"name\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"value\":                                        { \"type\": \"string\" },",
															"                            },",
															"                        },",
															"                    },",
															"                    \"label\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"value\":                                        { \"type\": \"string\" },",
															"                            },",
															"                        },",
															"                    },",
															"                    \"extension\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"value\":                                        { \"type\": \"string\" },",
															"                            },",
															"                        },",
															"                    },",
															"                    \"operational-state\":     \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"administrative-control\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"administrative-state\":    \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"lifecycle-state\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                    \"address\": \t\t\t\t\t                                { \"type\": \"string\" },",
															"                },",
															"                \"required\": [",
															"                    \"server-ltp\",",
															"                    \"layer-protocol\",",
															"                    \"uuid\",",
															"                    \"name\",",
															"                ],",
															"            },",
															"        },",
															"    },",
															"    \"required\": [",
															"        \"core-model-1-4:logical-termination-point\",",
															"    ]",
															"};",
															"pm.variables.set(\"schema\", ETHERNET_CONTAINER_LTP_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\", \"\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PacCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------Checking EthernetContainer_Pac for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* PacCompleteness",
															"* ",
															"* This Request is for validating EthernetContainer Pac Objects against definition ",
															"* EthernetContainer_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the *_Pac class",
															"*  - availability of all attributes in this particular class",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"pac\";             // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 3;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let ETHERNET_CONTAINER_PAC_SCHEMA = {\t",
															"    \"type\": \"object\",",
															"\t\"properties\": {",
															"        \"ethernet-container-capability\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"available-queue-list\":                                     { \"type\": \"array\"   },",
															"                \"explicit-congestion-notification-is-avail\": \t\t\t\t{ \"type\": \"boolean\" },",
															"                \"ingress-policing-is-avail\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"supported-header-compression-kind-list\":                   { \"type\": \"array\"   },",
															"                \"egress-shaping-is-avail\": \t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"information-rate-min\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"information-rate-max\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"burst-size-min\": \t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"burst-size-max\": \t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"bundling-is-avail\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"bundling-group-size-max\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"support-of-management-frames-without-preamble-is-avail\": \t{ \"type\": \"boolean\" },",
															"                \"fec-is-avail\": \t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"fec-word-size-max\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"supported-fec-redundancy-size-list\":                       { \"type\": \"array\"   },",
															"                \"supported-fec-interleaver-kind-list\":                      { \"type\": \"array\"   },",
															"                \"supported-fec-interleaver-depth-list\":                     { \"type\": \"array\"   },",
															"                \"encryption-is-avail\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"admin-shut-down-is-avail\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"supported-loop-back-kind-list\":                            { \"type\": \"array\"   },",
															"                \"maintenance-timer-range\": \t\t\t\t\t\t\t\t\t{ \"type\": \"string\"  },",
															"                \"statistics-is-avail\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"supported-alarm-list\":                                     { \"type\": \"array\"   },",
															"                \"performance-monitoring-is-avail\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"            },",
															"        },",
															"        \"ethernet-container-configuration\":{",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"interface-name\": \t\t\t\t\t\t\t                { \"type\": \"string\"  },",
															"                \"interface-is-on\": \t\t\t\t\t\t\t                { \"type\": \"boolean\" },",
															"                \"queue-behavior-list\":                                      { \"type\": \"array\"   },",
															"                \"explicit-congestion-notification-is-on\": \t                { \"type\": \"boolean\" },",
															"                \"ingress-policing-profile\":                                 { \"type\": \"string\"  },",
															"                \"egress-shaping-is-on\":                  \t\t\t\t\t{ \"type\": \"boolean\" },\t",
															"                \"maximum-information-rate\": \t\t\t\t                { \"type\": \"number\"  },",
															"                \"maximum-burst-size\": \t\t\t\t\t\t                { \"type\": \"number\"  },\t",
															"                \"bundling-is-on\": \t\t\t\t\t\t\t                { \"type\": \"boolean\" },",
															"                \"header-compression-kind\":                                  { \"type\": \"string\"  },",
															"                \"fec-is-on\": \t\t\t\t\t\t\t\t                { \"type\": \"boolean\" },",
															"                \"fec-word-size\": \t\t\t\t\t\t\t                { \"type\": \"number\"  },\t\t",
															"                \"fec-redundancy-size\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_2\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_4\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_8\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_16\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_20\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t\t ]",
															"                },",
															"                \"fec-interleaver-kind\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_BLOCK\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_CONVOLUTION\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t\t  ]",
															"                },",
															"                \"fec-interleaver-depth\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_1\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_2\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_3\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_4\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_6\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_8\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_12\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_16\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_24\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_32\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_48\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_96\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t\t   ]",
															"                },",
															"                \"encryption-is-on\": \t\t\t\t\t\t                { \"type\": \"boolean\" },\t",
															"                \"cryptographic-key\": \t\t\t\t\t\t                { \"type\": \"string\"  },\t\t",
															"                \"loop-back-kind-on\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t   ]",
															"                },",
															"                \"maintenance-timer\": \t\t\t\t\t\t                { \"type\": \"number\"  },",
															"                \"statistics-is-on\": \t\t\t\t\t\t                { \"type\": \"boolean\" },",
															"                \"problem-kind-severity-list\":                               { \"type\": \"array\"   },",
															"                \"performance-monitoring-is-on\": \t\t\t                { \"type\": \"boolean\" },",
															"            },",
															"        },",
															"        \"ethernet-container-status\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"interface-status\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_UP\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_DOWN\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_TESTING\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_DORMANT\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_NOT_PRESENT\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_LOWER_LAYER_DOWN\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_ADMIN_DOWN\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t  ]",
															"                },",
															"                \"bundling-is-up\":                                           { \"type\": \"boolean\" },",
															"                \"remote-site-is-faulty\":                                    { \"type\": \"boolean\" },                ",
															"                \"loop-back-kind-up\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t\t]",
															"                },",
															"                \"statistics-is-up\":                                         { \"type\": \"boolean\" },",
															"                \"performance-monitoring-is-up\":                             { \"type\": \"boolean\" },",
															"                \"timestamp\":                                                { \"type\": \"string\"  },",
															"                \"last-10-sec-data-input-rate\":                              { \"type\": \"integer\" },",
															"                \"last-10-sec-data-output-rate\":                             { \"type\": \"integer\" },",
															"                \"total-bytes-input\":                                        { \"type\": \"string\" },",
															"                \"total-bytes-output\":                                       { \"type\": \"string\" },",
															"                \"forwarded-bytes-input\":                                    { \"type\": \"string\" },",
															"                \"forwarded-bytes-output\":                                   { \"type\": \"string\" },",
															"            },",
															"        },",
															"        \"ethernet-container-current-problems\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"current-problem-list\":                                     { \"type\": \"array\"   },",
															"                \"number-of-current-problems\":  \t\t\t                    { \"type\": \"number\"  },",
															"                \"time-of-latest-change\":                                    { \"type\": \"string\"  },",
															"            },",
															"        },",
															"        \"ethernet-container-current-performance\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"current-performance-data-list\":                            { \"type\": \"array\"   },",
															"                \"number-of-current-performance-sets\":                       { \"type\": \"number\"  },",
															"            },",
															"\t    },",
															"        \"ethernet-container-historical-performances\":{",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"historical-performance-data-list\":                         { \"type\": \"array\"   },",
															"                \"number-of-historical-performance-sets\":                    { \"type\": \"number\"  },",
															"                \"time-of-latest-change\": \t\t\t                        { \"type\": \"string\"  },",
															"            },",
															"        },",
															"\t},",
															"\t\"required\": [ \"ethernet-container-capability\",",
															"                    \"ethernet-container-configuration\",",
															"                    \"ethernet-container-status\",",
															"                    \"ethernet-container-current-problems\",",
															"                    \"ethernet-container-current-performance\",",
															"                    \"ethernet-container-historical-performances\",",
															"    ]",
															"};",
															"pm.variables.set(\"schema\", ETHERNET_CONTAINER_PAC_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CapabilityCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------------Checking EthernetContainerCapability for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* CapabilityCompleteness",
															"* ",
															"* This Request is for validating EthernetContainer Capability Objects against definition ",
															"* EthernetContainer_2.0.0-tsp.191123.1240",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Capability class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let ETHERNET_CONTAINER_CAPABILITY_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"available-queue-list\": {",
															"\t\t\t\"type\": \"array\",",
															"            \"items\": {",
															"            \t\"type\": \"object\",",
															"            \t\"properties\": {",
															"\t\t\t\t\t\"queue-name\": { \"enum\": [",
															"                                        \"ethernet-container-2-0:QUEUE_NAME_TYPE_BEST_EFFORT_QUEUE\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE1\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE2\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE3\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE4\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_EXPEDITED_FORWARDING_QUEUE\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_CLASS_SELECTOR_QUEUE6\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_CLASS_SELECTOR_QUEUE7\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_QUEUENAME_NOT_YET_DEFINED\"",
															"        \t\t\t\t\t\t\t]",
															"        \t\t\t}, \t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"max-queue-depth\": \t\t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\"queue-depth-configuration-is-avail\": \t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\t\"available-dropping-behavior-kind-list\":{  ",
															"    \t\t\t\t\t\"type\": \"array\",",
															"    \t\t\t\t\t\"items\": { \"enum\": [\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_DROP_TAIL\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_RED\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_WRED\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_NOT_YET_DEFINED\"\t\t\t",
															"\t\t\t\t\t\t\t       ]",
															"        \t\t\t    }",
															"        \t\t\t},\t\t\t\t\t",
															"\t\t\t\t\t\"available-drop-precedence-kind-list\": {  ",
															"    \t\t\t\t\t\"type\": \"array\",",
															"    \t\t\t\t\t\"items\": { \"enum\": [\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_ALL\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_LOW\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_MEDIUM\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_HIGH\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_NOT_YET_DEFINED\"\t",
															"\t\t\t\t\t\t\t\t\t]",
															"        \t\t\t    }\t\t\t\t\t\t\t\t\t",
															"            \t\t},",
															"\t\t\t\t\t\"wred-profile-per-drop-precedence-is-available\":{ \"type\": \"boolean\" },",
															"\t\t\t\t\t\"available-scheduling-kind-list\": {  ",
															"    \t\t\t\t\t\"type\": \"array\",",
															"    \t\t\t\t\t\"items\": { \"enum\": [\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SCHEDULER_KIND_TYPE_STRICT\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SCHEDULER_KIND_TYPE_WFQ\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SCHEDULER_KIND_TYPE_WRR\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SCHEDULER_KIND_TYPE_DWRR\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SCHEDULER_KIND_TYPE_NOT_YET_DEFINED\"",
															"                                   ]",
															"                        }",
															"\t\t\t\t\t}",
															"\t\t\t\t},\t\t\t\t\t",
															"\t\t\t\t\"required\": [\"queue-name\",",
															"\t\t\t\t\t\t\t\t\"max-queue-depth\",",
															"\t\t\t\t\t\t\t\t\"queue-depth-configuration-is-avail\",",
															"\t\t\t\t\t\t\t\t\"available-dropping-behavior-kind-list\",",
															"\t\t\t\t\t\t\t\t\"available-drop-precedence-kind-list\",",
															"\t\t\t\t\t\t\t\t\"wred-profile-per-drop-precedence-is-available\",",
															"\t\t\t\t\t\t\t\t\"available-scheduling-kind-list\"",
															"\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"explicit-congestion-notification-is-avail\": \t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"ingress-policing-is-avail\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"supported-header-compression-kind-list\": {    ",
															"\t\t\t\"type\": \"array\",",
															"            \"items\": {\t\t",
															"\t\t\t\t\"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"\t\t\t\t\t\"header-compression-name\": { \"type\": \"string\" },",
															"\t\t\t\t\t\"header-compression-mode\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:HEADER_COMPRESSION_MODE_TYPE_AUTO\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:HEADER_COMPRESSION_MODE_TYPE_PROTOCOL_BASED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:HEADER_COMPRESSION_MODE_TYPE_LENGTH_BASED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:HEADER_COMPRESSION_MODE_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t\t\t ]",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"compressed-protocol-layer-list\": {",
															"\t\t\t\t\t\t\"type\": \"array\",",
															"\t\t\t\t\t\t\"items\": { \"enum\": [\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_ETHERNET_MAC\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_VLAN\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_Q_IN_Q\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_MPLS\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_IPV4\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_IPV6\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_TCP\",\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_UDP\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_RTP\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_GTP_U\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_OTHERS\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t},\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"mpls-payload-kind-list\": { \t\t\t\t\t\t",
															"\t\t\t\t\t    \"type\": \"array\",",
															"\t\t\t\t\t\t\"items\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:MPLS_PAYLOAD_KIND_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:MPLS_PAYLOAD_KIND_TYPE_AUTO\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:MPLS_PAYLOAD_KIND_TYPE_ETH_O_MPLS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:MPLS_PAYLOAD_KIND_TYPE_IP_O_MPLS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:MPLS_PAYLOAD_KIND_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t   ]",
															"\t\t\t\t\t\t}",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"compressed-header-length\": { \"type\": \"integer\" }",
															"\t\t\t\t},",
															"\t\t\t\t\"required\": [\"header-compression-name\",",
															"\t\t\t\t\t\t\t\t\"header-compression-mode\",",
															"\t\t\t\t\t\t\t\t\"compressed-protocol-layer-list\",",
															"\t\t\t\t\t\t\t\t\"mpls-payload-kind-list\",",
															"\t\t\t\t\t\t\t\t\"compressed-header-length\"",
															"\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"egress-shaping-is-avail\": \t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"information-rate-min\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"information-rate-max\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"burst-size-min\": \t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"burst-size-max\": \t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"bundling-is-avail\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"bundling-group-size-max\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"support-of-management-frames-without-preamble-is-avail\": \t{ \"type\": \"boolean\" },",
															"\t\t\"fec-is-avail\": \t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"fec-word-size-max\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"supported-fec-redundancy-size-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": \t\t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"string\" }",
															"\t\t},",
															"\t\t\"supported-fec-interleaver-kind-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": \t\t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"string\"\t}",
															"\t\t},",
															"\t\t\"supported-fec-interleaver-depth-list\": {\t",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": \t\t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"string\" }",
															"\t\t},",
															"\t\t\"encryption-is-avail\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"admin-shut-down-is-avail\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"supported-loop-back-kind-list\": {  ",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": { \"enum\": [\t\t\t\t\t",
															"\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NONE\",",
															"\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\",",
															"\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\",",
															"\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t   ]",
															"\t\t\t}\t",
															"\t\t},",
															"\t\t\"maintenance-timer-range\": \t\t\t\t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\"statistics-is-avail\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"supported-alarm-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": \t\t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"string\" }",
															"\t\t},",
															"\t\t\"performance-monitoring-is-avail\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" } \t\t",
															"\t},",
															"\t\"required\": [\"available-queue-list\",",
															"\t\t\t\t\t\"explicit-congestion-notification-is-avail\",",
															"\t\t\t\t\t\"ingress-policing-is-avail\",",
															"\t\t\t\t\t\"supported-header-compression-kind-list\",",
															"\t\t\t\t\t\"egress-shaping-is-avail\", \t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"information-rate-min\",\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"information-rate-max\",\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"burst-size-min\", \t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"burst-size-max\", \t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"bundling-is-avail\", \t\t\t\t\t\t\t\t\t\t ",
															"\t\t\t\t\t\"bundling-group-size-max\", \t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"support-of-management-frames-without-preamble-is-avail\", \t",
															"\t\t\t\t\t\"fec-is-avail\", \t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"fec-word-size-max\",\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"supported-fec-redundancy-size-list\",",
															"\t\t\t\t\t\"supported-fec-interleaver-kind-list\",",
															"\t\t\t\t\t\"supported-fec-interleaver-depth-list\",",
															"\t\t\t\t\t\"encryption-is-avail\",",
															"\t\t\t\t\t\"admin-shut-down-is-avail\",",
															"\t\t\t\t\t\"supported-loop-back-kind-list\",",
															"\t\t\t\t\t\"maintenance-timer-range\",",
															"\t\t\t\t\t\"statistics-is-avail\",",
															"\t\t\t\t\t\"supported-alarm-list\",",
															"\t\t\t\t\t\"performance-monitoring-is-avail\"",
															"\t]",
															"};",
															"pm.variables.set(\"schema\", ETHERNET_CONTAINER_CAPABILITY_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ConfigurationCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n----------------Checking EthernetContainerConfiguration for Completeness------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ConfigurationCompleteness",
															"* ",
															"* This Request is for validating EthernetContainer Configuration Objects against definition ",
															"* EthernetContainer_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Configuration class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let ETHERNET_CONTAINER_CONFIGURATION_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"        \"interface-name\": \t\t\t\t\t\t\t{ \"type\": \"string\" }, ",
															"        \"interface-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"queue-behavior-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"                    \"queue-name\": { \"enum\": [",
															"                                        \"ethernet-container-2-0:QUEUE_NAME_TYPE_BEST_EFFORT_QUEUE\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE1\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE2\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE3\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE4\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_EXPEDITED_FORWARDING_QUEUE\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_CLASS_SELECTOR_QUEUE6\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_CLASS_SELECTOR_QUEUE7\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_QUEUENAME_NOT_YET_DEFINED\"",
															"        \t\t\t\t\t\t\t]",
															"        \t\t\t},",
															"        \t\t\t\"queue-depth\": \t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"                    \"dropping-behavior-kind\": { \"enum\": [",
															"        \t\t\t\t\t\t\t\t\t\t    \"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_DROP_TAIL\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_RED\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_WRED\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_NOT_YET_DEFINED\"\t\t\t",
															"        \t\t\t\t\t\t\t\t\t\t]",
															"        \t\t\t},",
															"        \t\t\t\"wred-behavior-list\": {",
															"            \t\t\t\"type\": \"array\",",
															"            \t\t\t\"items\": {",
															"            \t\t\t    \"type\": \"object\",",
															"            \t\t\t    \"properties\": {",
															"            \t\t\t\t    \"affected-drop-precedence\": { \"enum\": [",
															"                        \t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_ALL\",",
															"                        \t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_LOW\",",
															"                        \t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_MEDIUM\",",
															"                        \t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_HIGH\",",
															"                        \t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_NOT_YET_DEFINED\"\t",
															"                \t\t\t\t\t\t\t\t\t\t\t  ]",
															"            \t\t\t\t    },",
															"            \t\t\t\t    \"affected-protocol\": { \"enum\": [",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_NONE\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_ETHERNET_MAC\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_VLAN\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_Q_IN_Q\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_MPLS\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_IPV4\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_IPV6\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_TCP\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_UDP\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_RTP\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_GTP_U\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_OTHERS\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_NOT_YET_DEFINED\"",
															"            \t\t\t\t\t\t\t\t\t       ]",
															"            \t\t\t\t    },",
															"            \t\t\t\t    \"wred-profile\":   \t\t\t\t    { \"type\": \"string\" }",
															"            \t\t\t\t},",
															"            \t\t\t    \"required\": [\"affected-drop-precedence\",",
															"            \t\t\t\t    \t\t    \"affected-protocol\",",
															"            \t\t\t\t    \t\t    \"wred-profile\"",
															"            \t\t\t    ]",
															"            \t\t\t}",
															"    \t\t\t    },",
															"    \t\t\t    \"scheduler-kind\": { \"enum\": [",
															"                                            \"ethernet-container-2-0:SCHEDULER_KIND_TYPE_STRICT\",",
															"                                            \"ethernet-container-2-0:SCHEDULER_KIND_TYPE_WFQ\",",
															"                                            \"ethernet-container-2-0:SCHEDULER_KIND_TYPE_WRR\",",
															"                                            \"ethernet-container-2-0:SCHEDULER_KIND_TYPE_DWRR\",",
															"                                            \"ethernet-container-2-0:SCHEDULER_KIND_TYPE_NOT_YET_DEFINED\"",
															"                                        ]",
															"                    },",
															"                    \"weighting\": \t\t\t\t\t\t\t{ \"type\": \"number\" }",
															"    \t\t    },",
															"    \t\t    \"required\": [\"queue-name\",",
															"                                \"queue-depth\",",
															"                                \"dropping-behavior-kind\",",
															"                                \"wred-behavior-list\",",
															"                                \"scheduler-kind\",",
															"                                \"weighting\"",
															"                ]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"explicit-congestion-notification-is-on\": \t{ \"type\": \"boolean\" }, ",
															"        \"ingress-policing-profile\":                 { \"type\": \"string\" },",
															"        \"egress-shaping-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" },\t\t\t",
															"        \"maximum-information-rate\": \t\t\t\t{ \"type\": \"number\" },  ",
															"\t\t\"maximum-burst-size\": \t\t\t\t\t\t{ \"type\": \"number\" }, \t\t\t",
															"        \"bundling-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"        \"header-compression-kind\":                  { \"type\": \"string\" },",
															"        \"fec-is-on\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"        \"fec-word-size\": \t\t\t\t\t\t\t{ \"type\": \"number\" },\t\t\t\t",
															"        \"fec-redundancy-size\": { \"enum\": [ ",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_2\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_4\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_8\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_16\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_20\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_NOT_YET_DEFINED\"\t",
															"\t\t\t\t\t\t\t\t ]",
															"\t\t},",
															"        \"fec-interleaver-kind\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_BLOCK\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_CONVOLUTION\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t  ]",
															"\t\t}, ",
															"        \"fec-interleaver-depth\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_1\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_2\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_3\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_4\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_6\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_8\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_12\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_16\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_24\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_32\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_48\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_96\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t\t   ]",
															"\t\t},\t\t\t\t\t\t\t\t\t\t\t",
															"        \"encryption-is-on\": \t\t\t\t\t\t{ \"type\": \"boolean\" }, \t\t\t",
															"        \"cryptographic-key\": \t\t\t\t\t\t{ \"type\": \"string\" }, \t\t\t",
															"        \"loop-back-kind-on\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t   ]",
															"\t\t},\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
															"        \"maintenance-timer\": \t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"        \"statistics-is-on\": \t\t\t\t\t\t{ \"type\": \"boolean\" }, \t\t\t",
															" \t\t\"problem-kind-severity-list\": { ",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"        \t\t\t\"problem-kind-name\": \t\t\t\t\t{ \"type\": \"string\" },",
															"        \t\t\t\"problem-kind-severity\": { \"enum\": [",
															"                                                \"ethernet-container-2-0:SEVERITY_TYPE_NON_ALARMED\",",
															"                                                \"ethernet-container-2-0:SEVERITY_TYPE_WARNING\",",
															"                                                \"ethernet-container-2-0:SEVERITY_TYPE_MINOR\",",
															"                                                \"ethernet-container-2-0:SEVERITY_TYPE_MAJOR\",",
															"                                                \"ethernet-container-2-0:SEVERITY_TYPE_CRITICAL\",",
															"                                                \"ethernet-container-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\"",
															"                                               ]",
															"                    }",
															"\t\t\t    },",
															"\t\t\t    \"required\": [\"problem-kind-name\",",
															"\t\t\t\t\t\t\t    \"problem-kind-severity\"",
															"\t\t\t\t]",
															"\t\t    }",
															"\t\t}, \t\t\t            \t\t\t",
															"        \"performance-monitoring-is-on\": \t\t\t{ \"type\": \"boolean\" }",
															"    },",
															"\t\"required\": [\"interface-name\",",
															"\t\t\t\t\t\"interface-is-on\",",
															"\t\t\t\t\t\"queue-behavior-list\",",
															"\t\t\t\t\t\"explicit-congestion-notification-is-on\",",
															"\t\t\t\t\t\"egress-shaping-is-on\",",
															"\t\t\t\t\t\"maximum-information-rate\",",
															"\t\t\t\t\t\"maximum-burst-size\",",
															"\t\t\t\t\t\"bundling-is-on\",",
															"\t\t\t\t\t\"fec-is-on\",",
															"\t\t\t\t\t\"fec-word-size\",",
															"\t\t\t\t\t\"fec-redundancy-size\",",
															"\t\t\t\t\t\"fec-interleaver-kind\",",
															"\t\t\t\t\t\"fec-interleaver-depth\",",
															"\t\t\t\t\t\"encryption-is-on\",",
															"\t\t\t\t\t\"cryptographic-key\",",
															"\t\t\t\t\t\"loop-back-kind-on\",",
															"\t\t\t\t\t\"maintenance-timer\",",
															"\t\t\t\t\t\"statistics-is-on\",",
															"\t\t\t\t\t\"problem-kind-severity-list\",",
															"\t\t\t\t\t\"performance-monitoring-is-on\"",
															"\t]",
															"};",
															"pm.variables.set(\"schema\", ETHERNET_CONTAINER_CONFIGURATION_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "StatusCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------------Checking EthernetContainerStatus for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* StatusCompleteness",
															"* ",
															"* This Request is for validating EthernetContainer Status Objects against definition ",
															"* EthernetContainer_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Status class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"status\";          // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let ETHERNET_CONTAINER_STATUS_SCHEMA = {",
															"\t\"type\": \"object\",",
															"\t\"properties\": {",
															"\t\t\"interface-status\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_UP\", ",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_DOWN\", ",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_TESTING\", ",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_UNKNOWN\", ",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_DORMANT\", ",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_NOT_PRESENT\", ",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_LOWER_LAYER_DOWN\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_ADMIN_DOWN\", ",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t  ]",
															"\t\t},",
															"\t\t\"bundling-is-up\":               { \"type\": \"boolean\" },   ",
															"\t\t\"remote-site-is-faulty\":        { \"type\": \"boolean\" },                   ",
															"\t\t\"loop-back-kind-up\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NONE\",\t\t",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\", ",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\", ",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t   ]",
															"\t\t},",
															"\t\t\"statistics-is-up\":             { \"type\": \"boolean\" },",
															"\t\t\"performance-monitoring-is-up\": { \"type\": \"boolean\" },",
															"\t\t\"timestamp\":                    { \"type\": \"string\" },",
															"\t\t\"last-10-sec-data-input-rate\":  { \"type\": \"integer\" },",
															"\t\t\"last-10-sec-data-output-rate\": { \"type\": \"integer\" },",
															"\t\t\"total-bytes-input\":            { \"type\": \"string\" },",
															"\t\t\"total-bytes-output\":           { \"type\": \"string\" },",
															"\t\t\"forwarded-bytes-input\":        { \"type\": \"string\" },",
															"\t\t\"forwarded-bytes-output\":       { \"type\": \"string\" }",
															"\t},",
															"\t\"required\": [\"interface-status\", ",
															"\t\t\t\t    \"bundling-is-up\", ",
															"\t\t\t\t    \"remote-site-is-faulty\", ",
															"\t\t\t\t    \"loop-back-kind-up\", ",
															"\t\t\t\t    \"statistics-is-up\", ",
															"\t\t\t\t    \"performance-monitoring-is-up\", ",
															"\t\t\t\t    \"timestamp\", ",
															"\t\t\t\t    \"last-10-sec-data-input-rate\", ",
															"\t\t\t\t    \"last-10-sec-data-output-rate\", ",
															"\t\t\t\t    \"total-bytes-input\", ",
															"\t\t\t\t    \"total-bytes-output\", ",
															"\t\t\t\t    \"forwarded-bytes-input\", ",
															"\t\t\t\t    \"forwarded-bytes-output\"",
															"\t]",
															"};",
															"pm.variables.set(\"schema\", ETHERNET_CONTAINER_STATUS_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentProblemsCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------Checking EthernetContainerCurrentProblems for Completeness-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* CurrentProblemsCompleteness",
															"* ",
															"* This Request is for validating EthernetContainer CurrentProblems Objects against definition ",
															"* EthernetContainer_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the CurrentProblems class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"current-problems\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let ETHERNET_CONTAINER_CURRENT_PROBLEMS_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"current-problem-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"\t\t\t\t\t\"problem-name\": \t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"sequence-number\": \t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\"timestamp\": \t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"problem-severity\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SEVERITY_TYPE_NON_ALARMED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SEVERITY_TYPE_WARNING\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SEVERITY_TYPE_MINOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SEVERITY_TYPE_MAJOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SEVERITY_TYPE_CRITICAL\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t  ]",
															"\t\t\t\t\t}",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"problem-name\", ",
															"\t\t\t\t\t\t    \t\"sequence-number\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\t\t    \"timestamp\",",
															"\t\t\t\t\t\t\t    \"problem-severity\"\t",
															"\t\t\t\t]\t\t\t\t\t\t",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-current-problems\": \t\t\t{ \"type\": \"number\" },",
															"\t\t\"time-of-latest-change\": \t\t\t\t{ \"type\": \"string\" },",
															"\t},",
															"\t\"required\": [ \"current-problem-list\",",
															"\t                \"number-of-current-problems\",",
															"\t                \"time-of-latest-change\"",
															"\t] ",
															"};",
															"pm.variables.set(\"schema\", ETHERNET_CONTAINER_CURRENT_PROBLEMS_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentPerformanceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------Checking EthernetContainerCurrentPerformance for Completeness----------------\");",
															"/****************************************************************************************",
															"* ",
															"* CurrentPerformanceCompleteness",
															"* ",
															"* This Request is for validating EthernetContainer CurrentPerformance Objects against definition ",
															"* EthernetContainer_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the CurrentPerformance class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"current-performance\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let ETHERNET_CONTAINER_CURRENT_PERFORMANCE_SCHEMA = {\t",
															"    \"type\": \"object\",",
															"    \"properties\": {",
															"\t\t\"current-performance-data-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\"performance-data\": {",
															"\t\t\t\t\t\t\"type\": \"object\", ",
															"\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\"tx-ethernet-bytes-max-s\": \t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"tx-ethernet-bytes-max-m\":\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\"tx-ethernet-bytes-sum\":\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\"queue-utilization-list\": {",
															"\t\t\t\t\t\t\t\t\"type\": \"array\",",
															"\t\t\t\t\t\t\t\t\"items\": {",
															"\t\t\t\t\t\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\t\t\t\"queue-name\": \t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\t\t\t\"max-queue-length\":\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\t\t\t\"avg-queue-length\":\t{ \"type\": \"number\" }",
															"\t\t\t\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\t\t\t\"required\": [ \"queue-name\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t    \"max-queue-length\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t    \"avg-queue-length\"",
															"\t\t\t\t\t\t\t\t\t]\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t}",
															"\t\t\t\t\t\t\t},\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\"fec-corrected-blocks\":\t\t\t{ \"type\": \"number\" },\t",
															"\t\t\t\t\t\t\t\"fec-uncorrectable-blocks\":\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"time-period\": \t\t\t\t\t{ \"type\": \"number\" }",
															"\t\t\t\t\t\t},\t\t\t\t",
															"\t\t\t\t\t\t\"required\": [ \"tx-ethernet-bytes-max-s\",",
															"\t\t\t\t\t\t\t\t\t\t\"tx-ethernet-bytes-max-m\",",
															"\t\t\t\t\t\t\t\t\t\t\"tx-ethernet-bytes-sum\",",
															"\t\t\t\t\t\t\t\t\t\t\"queue-utilization-list\",",
															"\t\t\t\t\t\t\t\t\t\t\"fec-corrected-blocks\",",
															"\t\t\t\t\t\t\t\t\t\t\"fec-uncorrectable-blocks\",",
															"\t\t\t\t\t\t\t\t\t\t\"time-period\"",
															"\t\t\t\t\t\t]\t\t\t\t\t",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"timestamp\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"suspect-interval-flag\": \t\t\t{ \"type\": \"boolean\" },\t\t\t",
															"\t\t\t\t\t\"elapsed-time\": \t\t\t\t\t{ \"type\": \"string\" },\t\t",
															"\t\t\t\t\t\"scanner-id\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"granularity-period\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t\t},\t ",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"performance-data\",",
															"                                \"timestamp\",",
															"                                \"suspect-interval-flag\",",
															"                                \"elapsed-time\",",
															"                                \"scanner-id\",",
															"                                \"granularity-period\",",
															"    \t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-current-performance-sets\":\t\t    { \"type\": \"number\" },\t\t\t",
															"\t},",
															"\t\"required\":\t[ \"current-performance-data-list\",",
															"\t                \"number-of-current-performance-sets\"",
															"\t]",
															"};",
															"try {",
															"    if (capability[\"performance-monitoring-is-avail\"]===false) {",
															"        pm.variables.set(\"schemaToBeShortened\", ETHERNET_CONTAINER_CURRENT_PERFORMANCE_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"current-performance-data-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        ETHERNET_CONTAINER_CURRENT_PERFORMANCE_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"        CouldEthernetContainerCurrentPerformanceBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldEthernetContainerCurrentPerformanceBeShortened(false);",
															"}",
															"pm.variables.set(\"schema\", ETHERNET_CONTAINER_CURRENT_PERFORMANCE_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldEthernetContainerCurrentPerformanceBeShortened(success) {",
															"    pm.test(\"CouldEthernetContainerCurrentPerformanceBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "HistoricalPerformancesCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n------------Checking EthernetContainerHistoricalPerformances for Completeness-------------\");",
															"/*******************************************************************************",
															"* ",
															"* HistoricalPerformancesCompleteness",
															"* ",
															"* This Request is for validating EthernetContainer HistoricalPerformances Objects against definition ",
															"* EthernetContainer_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the HistoricalPerformances class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"*******************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"historical-performances\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let ETHERNET_CONTAINER_HISTORICAL_PERFORMANCES_SCHEMA = {\t",
															"    \"type\": \"object\",",
															"    \"properties\": {",
															"\t\t\"historical-performance-data-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\"performance-data\": {",
															"\t\t\t\t\t\t\"type\": \"object\", ",
															"\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\"tx-ethernet-bytes-max-s\": \t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"tx-ethernet-bytes-max-m\":\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\"tx-ethernet-bytes-sum\":\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\"queue-utilization-list\": {",
															"\t\t\t\t\t\t\t\t\"type\": \"array\",",
															"\t\t\t\t\t\t\t\t\"items\": {",
															"\t\t\t\t\t\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\t\t\t\"queue-name\": \t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\t\t\t\"max-queue-length\":\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\t\t\t\"avg-queue-length\":\t{ \"type\": \"number\" }",
															"\t\t\t\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\t\t\t\"required\": [ \"queue-name\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t    \"max-queue-length\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t    \"avg-queue-length\"",
															"\t\t\t\t\t\t\t\t\t]\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t}",
															"\t\t\t\t\t\t\t},\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\"fec-corrected-blocks\":\t\t\t{ \"type\": \"number\" },\t",
															"\t\t\t\t\t\t\t\"fec-uncorrectable-blocks\":\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"time-period\": \t\t\t\t\t{ \"type\": \"number\" }",
															"\t\t\t\t\t\t},\t\t\t\t",
															"\t\t\t\t\t\t\"required\": [ \"tx-ethernet-bytes-max-s\",",
															"\t\t\t\t\t\t\t\t\t\t\"tx-ethernet-bytes-max-m\",",
															"\t\t\t\t\t\t\t\t\t\t\"tx-ethernet-bytes-sum\",",
															"\t\t\t\t\t\t\t\t\t\t\"queue-utilization-list\",",
															"\t\t\t\t\t\t\t\t\t\t\"fec-corrected-blocks\",",
															"\t\t\t\t\t\t\t\t\t\t\"fec-uncorrectable-blocks\",",
															"\t\t\t\t\t\t\t\t\t\t\"time-period\"",
															"\t\t\t\t\t\t]\t\t\t\t\t",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"suspect-interval-flag\": \t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\t\"history-data-id\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"period-end-time\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"granularity-period\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t\t]\t\t\t\t",
															"\t\t\t\t\t},\t \t ",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"performance-data\",",
															"    \t\t\t\t\t\t\t\"suspect-interval-flag\",",
															"    \t\t\t\t\t\t\t\"history-data-id\",",
															"    \t\t\t\t\t\t\t\"period-end-time\",",
															"    \t\t\t\t\t\t\t\"granularity-period\",",
															"\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-historical-performance-sets\":\t\t{ \"type\": \"number\" },",
															"\t\t\"time-of-latest-change\": \t\t\t\t        { \"type\": \"string\" },\t\t",
															"\t},",
															"\t\"required\":\t[ \"historical-performance-data-list\",",
															"\t                \"number-of-historical-performance-sets\",",
															"\t                \"time-of-latest-change\"",
															"\t]",
															"};",
															"try {",
															"    if (capability[\"performance-monitoring-is-avail\"]===false) {",
															"        pm.variables.set(\"schemaToBeShortened\", ETHERNET_CONTAINER_HISTORICAL_PERFORMANCES_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"historical-performance-data-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        ETHERNET_CONTAINER_HISTORICAL_PERFORMANCES_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"        CouldEthernetContainerHistoricalPerformancesBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldEthernetContainerHistoricalPerformancesBeShortened(false);",
															"}",
															"pm.variables.set(\"schema\", ETHERNET_CONTAINER_HISTORICAL_PERFORMANCES_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldEthernetContainerHistoricalPerformancesBeShortened(success) {",
															"    pm.test(\"CouldEthernetContainerHistoricalPerformancesBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NetworkRestoration",
									"item": [
										{
											"name": "SettingOriginalInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------------Restoring the Original Interface Configuration Again-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting the Original Interface Configuration Again",
															"* ",
															"* This Request is for restoring the configuration from before the interface validation ",
															"* on the device.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"        ",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration",
															"                                                   );",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    completeClassName = moduleUnderTest + \":\" + technologyUnderTest + \"-configuration\";",
															"    configuration = AddHeadlineToDataObject(configuration, completeClassName);",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched back on original values.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched back on original values.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointEthernetContainerCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------ReversalPoint of EthernetContainer Validation for Completeness---------------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointEthernetContainerCompleteness\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointEthernetContainerCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-----------------------Terminating EthernetContainerCompleteness--------------------------\");",
															"/****************************************************************************************",
															" * ",
															" * ExitPoint",
															" * ",
															" * This Request is for clearing the Collection variables and terminating the TestCase",
															" * ",
															" ****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															" * Required Input Parameters",
															" ****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Clearing all Collection Variables for Terminating the TestCase",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Setting up Local Variables and Preparing the Request",
															" ****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({",
															"        key: \"Accept\",",
															"        value: \"application/json\"",
															"    });",
															"} catch (error) {}",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, controller, indexOfDeviceUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function() {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function() {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "EthernetContainerConfiguration",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n\\n============================ EthernetContainerConfiguration.1 =============================\");",
															"/****************************************************************************************",
															"* ",
															"* RequestCollection for validating Configuration of EthernetContainer Objects against definition ",
															"* ",
															"*                   EthernetContainer_2.0.0-tsp.200121.1830",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Manual Definition of the Mode of Operation of this TestCase",
															"* ",
															"* It is recommended to apply this TestCase on devices on the local (not remote) site",
															"* of the microwave connection, otherwise the management connection might break and ",
															"* configurations, which are done during the validation, cannot be reversed.",
															"* ",
															"****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"one\"; // \"none\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"ethernet-container-2-0:ethernet-container-pac\"; // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"CONFIGURATION_VALIDATION_RESULTS = {};",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"pm.collectionVariables.set(\"configurationValidationResults\", CONFIGURATION_VALIDATION_RESULTS);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function () {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function () {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DefiningDummyValuesAndEvaluations()",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n----------Defining DummyValues and Evaluation Criteria in Configuration Validation--------\");",
															"/****************************************************************************************",
															"* ",
															"* Definition of DefiningDummyValuesAndEvaluations()",
															"*  ",
															"* Functions for Defining DummyValues and Evaluation Criteria in all Configuration Validations.",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Provided Collection Variables ",
															"****************************************************************************************/",
															"class Attribute {",
															"    constructor(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString) {",
															"        this.CreatingDummyValueAsaString = CreatingDummyValueAsaString;",
															"        this.EvaluatingFeatureSupportAsaString = EvaluatingFeatureSupportAsaString;",
															"        this.defaultValueForStandardEvaluation = defaultValueForStandardEvaluation;",
															"        this.EvaluatingResultAsaString = EvaluatingResultAsaString;",
															"    }",
															"}",
															"var attributes = [];",
															"",
															"var CreatingDummyValueAsaString;",
															"var EvaluatingFeatureSupportAsaString;",
															"var defaultValueForStandardEvaluation;",
															"var EvaluatingResultAsaString;",
															"var newAttribute;",
															"",
															"// interface-name",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of interface-name--------------------------\");",
															"",
															"        // Individual Values Definition ",
															"        var dummyValue = \"Dummy \" + String(Math.floor(Math.random() * 999));",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"interface-name\";",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"Interface name not yet defined.\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// interface-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of interface-is-on-----------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"interface-is-on\";",
															"",
															"        // Individual Values Definition ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"admin-shut-down-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// queue-behavior-list/queue-depth",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----------------Checking Configuration of queue-behavior-list/queue-depth-----------------\");",
															"",
															"        // Individual Values Definition",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"queue-name\";",
															"        try {",
															"            keysOfDatatypeInstanceUnderTest[0].value = capability[\"available-queue-list\"][0][keysOfDatatypeInstanceUnderTest[0].key];",
															"            var dummyQueueMaxQueueDepth = 0;",
															"            for (let i = 0; i < (capability[\"available-queue-list\"].length); i++) {",
															"                let sampleQueueDepthIsConfigurable = capability[\"available-queue-list\"][i][\"queue-depth-configuration-is-avail\"];",
															"                if (sampleQueueDepthIsConfigurable === true) {",
															"                    keysOfDatatypeInstanceUnderTest[0].value = capability[\"available-queue-list\"][i][keysOfDatatypeInstanceUnderTest[0].key];",
															"                    dummyQueueMaxQueueDepth = capability[\"available-queue-list\"][i][\"max-queue-depth\"];",
															"                    break;",
															"                }",
															"            }",
															"            var dummyValue = Math.abs(Math.floor(Math.random() * dummyQueueMaxQueueDepth));",
															"            CouldDummyValueBeCreated(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeCreated();",
															"        }",
															"        var DATATYPE_UNDER_TEST = \"queue-behavior-list\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"        var ATTRIBUTE_UNDER_TEST = \"queue-depth\";",
															"",
															"        // Self Testing Function",
															"        function CouldDummyValueBeCreated(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"available-queue-list\"][0][\"queue-depth-configuration-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// queue-behavior-list/dropping-behavior-kind",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------Checking Configuration of queue-behavior-list/dropping-behavior-kind-----------\");",
															"",
															"        // Individual Values Definition ",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"queue-name\";",
															"        try {",
															"            let availableDroppingBehaviorKinds",
															"                = capability[\"available-queue-list\"][0][\"available-dropping-behavior-kind-list\"];",
															"            keysOfDatatypeInstanceUnderTest[0].value",
															"                = capability[\"available-queue-list\"][0][keysOfDatatypeInstanceUnderTest[0].key];",
															"            let dummyQueueConfigurationIndex",
															"                = QueueConfigurationIndexOf(keysOfDatatypeInstanceUnderTest[0].value, configuration);",
															"",
															"            let configuredDroppingBehaviorKindName",
															"                = configuration[\"queue-behavior-list\"][dummyQueueConfigurationIndex][\"dropping-behavior-kind\"];",
															"            let configuredDroppingBehaviorKindIndex",
															"                = availableDroppingBehaviorKinds.indexOf(configuredDroppingBehaviorKindName);",
															"",
															"            let potentialDummyValues = availableDroppingBehaviorKinds;",
															"            if (configuredDroppingBehaviorKindIndex >= 0) {",
															"                potentialDummyValues.splice(configuredDroppingBehaviorKindIndex, 1);",
															"            }",
															"            if (potentialDummyValues.length === 0) {",
															"                potentialDummyValues = [\"No alternatives available\"];",
															"            }",
															"",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"",
															"            CouldDummyBeCreated(availableDroppingBehaviorKinds, keysOfDatatypeInstanceUnderTest[0].value,",
															"                dummyQueueConfigurationIndex,",
															"                configuredDroppingBehaviorKindName,",
															"                configuredDroppingBehaviorKindIndex,",
															"                potentialDummyValues,",
															"                dummyValueIndex,",
															"                dummyValue);",
															"",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"queue-behavior-list\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"        var ATTRIBUTE_UNDER_TEST = \"dropping-behavior-kind\";",
															"",
															"        // Functions",
															"        function QueueConfigurationIndexOf(queueName, configuration) {",
															"            for (let i = 0; i < (configuration[\"queue-behavior-list\"].length); i++) {",
															"                let sampleQueueName = configuration[\"queue-behavior-list\"][i][\"queue-name\"];",
															"                if (sampleQueueName === queueName) {",
															"                    return i;",
															"                }",
															"            }",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(availableDroppingBehaviorKinds, dummyQueueName,",
															"            dummyQueueConfigurationIndex,",
															"            configuredDroppingBehaviorKindName,",
															"            configuredDroppingBehaviorKindIndex,",
															"            potentialDummyValues,",
															"            dummyValueIndex,",
															"            dummyValue) {",
															"            pm.test(\"CouldAvailableDroppingBehaviorKindsBeRetrieved\", function () {",
															"                pm.expect(availableDroppingBehaviorKinds).to.be.an(\"array\");",
															"                pm.expect(availableDroppingBehaviorKinds.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyQueueNameBeRetrieved\", function () {",
															"                pm.expect(dummyQueueName).to.be.a(\"string\");",
															"                pm.expect(dummyQueueName).to.not.have.lengthOf(0);",
															"            });",
															"            pm.test(\"CouldDummyQueueConfigurationIndexBeEvaluated\", function () {",
															"                pm.expect(dummyQueueConfigurationIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldConfiguredDroppingBehaviorKindNameBeRetrieved\", function () {",
															"                pm.expect(configuredDroppingBehaviorKindName).to.be.a(\"string\");",
															"            });",
															"            pm.test(\"CouldConfiguredDroppingBehaviorKindIndexBeEvaluated\", function () {",
															"                pm.expect(configuredDroppingBehaviorKindIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldPotentialDummyValuesBeBuild\", function () {",
															"                pm.expect(potentialDummyValues).to.be.an(\"array\");",
															"                pm.expect(potentialDummyValues.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyValueIndexBeCalculated\", function () {",
															"                pm.expect(dummyValueIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"            });",
															"        }",
															"",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try {",
															"            var supportedDroppingBehavior = capability[\"available-queue-list\"][0][\"available-dropping-behavior-kind-list\"][0];",
															"            if (supportedDroppingBehavior === \"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_NOT_YET_DEFINED\") {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            }",
															"            CouldSupportedDroppingBehaviorBeRead(supportedDroppingBehavior, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        } catch (error) {",
															"            CouldSupportedDroppingBehaviorBeRead();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldSupportedDroppingBehaviorBeRead(supportedDroppingBehavior, capabilitiesAreIndicatingThatFeatureNotSupported) {",
															"            pm.test(\"CouldSupportedDroppingBehaviorBeRead\", function () {",
															"                pm.expect(supportedDroppingBehavior).to.be.a(\"string\");",
															"                pm.expect(capabilitiesAreIndicatingThatFeatureNotSupported).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_NOT_YET_DEFINED\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// queue-behavior-list/wred-behavior-list/wred-profile",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------Checking Configuration of queue-behavior-list/wred-behavior-list/wred-profile-------\");",
															"        console.log(\"Testing queue-behavior-list/wred-behavior-list/wred-profile is not yet implemented.\")",
															"    }",
															"    // attributes.push(newAttribute);",
															"}",
															"",
															"// queue-behavior-list/scheduler-kind",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n---------------Checking Configuration of queue-behavior-list/scheduler-kind---------------\");",
															"",
															"        // Individual Values Definition",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"queue-name\";",
															"        try {",
															"            let availableSchedulerKinds = capability[\"available-queue-list\"][0][\"available-scheduling-kind-list\"];",
															"            keysOfDatatypeInstanceUnderTest[0].value = capability[\"available-queue-list\"][0][keysOfDatatypeInstanceUnderTest[0].key];",
															"            let dummyQueueConfigurationIndex = QueueConfigurationIndexOf(keysOfDatatypeInstanceUnderTest[0].value, configuration);",
															"",
															"            let configuredSchedulerKindName = configuration[\"queue-behavior-list\"][dummyQueueConfigurationIndex][\"scheduler-kind\"];",
															"            let configuredSchedulerKindIndex = availableSchedulerKinds.indexOf(configuredSchedulerKindName);",
															"",
															"            let potentialDummyValues = availableSchedulerKinds;",
															"            if (configuredSchedulerKindIndex >= 0) {",
															"                potentialDummyValues.splice(configuredSchedulerKindIndex, 1);",
															"            }",
															"            if (potentialDummyValues.length === 0) {",
															"                potentialDummyValues = [\"No alternatives available\"];",
															"            }",
															"",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"",
															"            CouldDummyBeCreated(availableSchedulerKinds, keysOfDatatypeInstanceUnderTest[0].value,",
															"                dummyQueueConfigurationIndex,",
															"                configuredSchedulerKindName,",
															"                configuredSchedulerKindIndex,",
															"                potentialDummyValues,",
															"                dummyValueIndex,",
															"                dummyValue);",
															"",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"queue-behavior-list\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"        var ATTRIBUTE_UNDER_TEST = \"scheduler-kind\";",
															"",
															"        // Functions",
															"        function QueueConfigurationIndexOf(queueName, configuration) {",
															"            for (let i = 0; i < (configuration[\"queue-behavior-list\"].length); i++) {",
															"                let sampleQueueName = configuration[\"queue-behavior-list\"][i][\"queue-name\"];",
															"                if (sampleQueueName === queueName) {",
															"                    return i;",
															"                }",
															"            }",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(availableSchedulerKinds, dummyQueueName,",
															"            dummyQueueConfigurationIndex,",
															"            configuredSchedulerKindName,",
															"            configuredSchedulerKindIndex,",
															"            potentialDummyValues,",
															"            dummyValueIndex,",
															"            dummyValue) {",
															"            pm.test(\"CouldAvailableSchedulerKindsBeRetrieved\", function () {",
															"                pm.expect(availableSchedulerKinds).to.be.an(\"array\");",
															"                pm.expect(availableSchedulerKinds.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyQueueNameBeRetrieved\", function () {",
															"                pm.expect(dummyQueueName).to.be.a(\"string\");",
															"                pm.expect(dummyQueueName).to.not.have.lengthOf(0);",
															"            });",
															"            pm.test(\"CouldDummyQueueConfigurationIndexBeEvaluated\", function () {",
															"                pm.expect(dummyQueueConfigurationIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldConfiguredSchedulerKindNameBeRetrieved\", function () {",
															"                pm.expect(configuredSchedulerKindName).to.be.a(\"string\");",
															"            });",
															"            pm.test(\"CouldConfiguredSchedulerKindIndexBeEvaluated\", function () {",
															"                pm.expect(configuredSchedulerKindIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldPotentialDummyValuesBeBuild\", function () {",
															"                pm.expect(potentialDummyValues).to.be.an(\"array\");",
															"                pm.expect(potentialDummyValues.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyValueIndexBeCalculated\", function () {",
															"                pm.expect(dummyValueIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try {",
															"            var supportedSchedulerKind = capability[\"available-queue-list\"][0][\"available-scheduling-kind-list\"][0];",
															"            if (supportedSchedulerKind === \"ethernet-container-2-0:SCHEDULER_KIND_TYPE_NOT_YET_DEFINED\") {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            }",
															"            CouldSupportedSchedulerKindBeRead(supportedSchedulerKind, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        } catch (error) {",
															"            CouldSupportedSchedulerKindBeRead();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldSupportedSchedulerKindBeRead(supportedSchedulerKind, capabilitiesAreIndicatingThatFeatureNotSupported) {",
															"            pm.test(\"CouldSupportedSchedulerKindBeRead\", function () {",
															"                pm.expect(supportedSchedulerKind).to.be.a(\"string\");",
															"                pm.expect(capabilitiesAreIndicatingThatFeatureNotSupported).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"ethernet-container-2-0:SCHEDULER_KIND_TYPE_NOT_YET_DEFINED\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// queue-behavior-list/weighting",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------Checking Configuration of queue-behavior-list/weighting------------------\");",
															"",
															"        // Individual Values Definition",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"queue-name\";",
															"",
															"        var dummyValue;",
															"        try {",
															"            let testQueue;",
															"            testQueue = firstWeightableQueueIndex(configuration);",
															"            if ( testQueue >= 0 ) {",
															"                dummyValue = configuration[\"queue-behavior-list\"][testQueue][\"weighting\"] - 1;",
															"",
															"                keysOfDatatypeInstanceUnderTest[0].value",
															"                        = configuration[\"queue-behavior-list\"][testQueue][keysOfDatatypeInstanceUnderTest[0].key];",
															"",
															"                console.log(\"DummyQueueName: \" + keysOfDatatypeInstanceUnderTest[0].value);",
															"                console.log(\"CurrentWeighting: \" + configuration[\"queue-behavior-list\"][testQueue][\"weighting\"]);",
															"            } else {",
															"                dummyValue = -99;",
															"                keysOfDatatypeInstanceUnderTest[0].value ",
															"                        = configuration[\"queue-behavior-list\"][0][keysOfDatatypeInstanceUnderTest[0].key];",
															"                console.log(\"ERROR: No weightable queue found.\");",
															"            }",
															" ",
															"            CouldDummyNameAndValueBeCreated(keysOfDatatypeInstanceUnderTest[0].value, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyNameAndValueBeCreated();",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"queue-behavior-list\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"        var ATTRIBUTE_UNDER_TEST = \"weighting\";",
															"",
															"        // Functions",
															"        function firstWeightableQueueIndex(configuration) {",
															"            let weightableSchedulerKinds;",
															"            weightableSchedulerKinds = [\"ethernet-container-2-0:SCHEDULER_KIND_TYPE_WFQ\",",
															"                                            \"ethernet-container-2-0:SCHEDULER_KIND_TYPE_WRR\",",
															"                                            \"ethernet-container-2-0:SCHEDULER_KIND_TYPE_DWRR\"",
															"                                        ];",
															"            ",
															"            for (let i = 0; i < (configuration[\"queue-behavior-list\"].length); i++) {",
															"                let sampleSchedulerKind;",
															"                sampleSchedulerKind = configuration[\"queue-behavior-list\"][i][\"scheduler-kind\"];",
															"                if ((weightableSchedulerKinds.includes(sampleSchedulerKind))",
															"                        && (configuration[\"queue-behavior-list\"][i][\"weighting\"] > 0)) {",
															"                            return i;",
															"                }",
															"            }",
															"            return -99;",
															"        }",
															"                ",
															"        // Self Testing Functions",
															"        function CouldDummyNameAndValueBeCreated(dummyQueueName, dummyValue) {",
															"            pm.test(\"CouldDummyNameBeCreated\", function () {",
															"                pm.expect(dummyQueueName).to.be.a(\"string\");",
															"                pm.expect(dummyQueueName).to.not.have.lengthOf(0);",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// explicit-congestion-notification-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------Checking Configuration of explicit-congestion-notification-is-on-------------\");",
															"",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        var ATTRIBUTE_UNDER_TEST = \"explicit-congestion-notification-is-on\";",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"explicit-congestion-notification-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// egress-shaping-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----------------------Checking Configuration of egress-shaping-is-on----------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"egress-shaping-is-on\";",
															"",
															"        try {",
															"            // var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];   // validating maximum-information-rate requires",
															"            var dummyValue = true;                                      // egress-shaping-is-on to be set on true as a",
															"            // preparation request. This requires static",
															"            // dummyValue = true.",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"egress-shaping-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// maximum-information-rate",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------------------Checking Configuration of maximum-information-rate--------------------\");",
															"",
															"        try {",
															"            var minimumValue = capability[\"information-rate-min\"];",
															"            var maximumValue = capability[\"information-rate-max\"];",
															"            var valueRange = maximumValue - minimumValue;",
															"            var dummyValue = Math.abs(minimumValue + Math.floor(Math.random() * valueRange));",
															"            CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue);",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"maximum-information-rate\";",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue) {",
															"            pm.test(\"CouldMinimumValueBeReadFromCapabilities\", function () {",
															"                pm.expect(minimumValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldMaximumValueBeReadFromCapabilities\", function () {",
															"                pm.expect(maximumValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldValueRangeBeCalculated\", function () {",
															"                pm.expect(valueRange).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try {",
															"            var supportedInformationRateMax = capability[\"information-rate-max\"];",
															"            if (supportedInformationRateMax === -1) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            }",
															"            CouldSupportedInformationRateBeRead(supportedInformationRateMax, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        } catch (error) {",
															"            CouldSupportedInformationRateBeRead();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldSupportedInformationRateBeRead(supportedInformationRateMax, capabilitiesAreIndicatingThatFeatureNotSupported) {",
															"            pm.test(\"CouldSupportedInformationRateBeRead\", function () {",
															"                pm.expect(supportedInformationRateMax).to.be.a(\"number\");",
															"                pm.expect(capabilitiesAreIndicatingThatFeatureNotSupported).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// maximum-burst-size",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of maximum-burst-size-----------------------\");",
															"",
															"        var dummyValue;",
															"        try {",
															"            var minimumValue = capability[\"burst-size-min\"];",
															"            var maximumValue = capability[\"burst-size-max\"];",
															"            var valueRange = maximumValue - minimumValue;",
															"            dummyValue = Math.abs(minimumValue + Math.floor(Math.random() * valueRange));",
															"            CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue);",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"maximum-burst-size\";",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue) {",
															"            pm.test(\"CouldMinimumValueBeReadFromCapabilities\", function () {",
															"                pm.expect(minimumValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldMaximumValueBeReadFromCapabilities\", function () {",
															"                pm.expect(maximumValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldValueRangeBeCalculated\", function () {",
															"                pm.expect(valueRange).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try {",
															"            var supportedBurstSizeMax = capability[\"burst-size-max\"];",
															"            if (supportedBurstSizeMax === -1) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            }",
															"            CouldSupportedBurstSizeMaxBeRead(supportedBurstSizeMax, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        } catch (error) {",
															"            CouldSupportedBurstSizeMaxBeRead();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldSupportedBurstSizeMaxBeRead(supportedBurstSizeMax, capabilitiesAreIndicatingThatFeatureNotSupported) {",
															"            pm.test(\"CouldSupportedBurstSizeMaxBeRead\", function () {",
															"                pm.expect(supportedBurstSizeMax).to.be.a(\"number\");",
															"                pm.expect(capabilitiesAreIndicatingThatFeatureNotSupported).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// bundling-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of bundling-is-on-------------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"bundling-is-on\";",
															"",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"bundling-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// header-compression-kind",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n---------------------Checking Configuration of header-compression-kind--------------------\");",
															"",
															"        try {",
															"            let supportedHeaderCompressionKindNames = [];",
															"            for (let i = 0; i < capability[\"supported-header-compression-kind-list\"].length; i++) {",
															"                let sampleName = capability[\"supported-header-compression-kind-list\"][i][\"header-compression-name\"];",
															"                supportedHeaderCompressionKindNames.push(sampleName);",
															"            }",
															"            let configuredHeaderCompressionKind = configuration[\"header-compression-kind\"];",
															"            let configuredHeaderCompressionKindIndex",
															"                = supportedHeaderCompressionKindNames.indexOf(configuredHeaderCompressionKind);",
															"            let potentialDummyValues = supportedHeaderCompressionKindNames;",
															"            if (configuredHeaderCompressionKindIndex >= 0) {",
															"                potentialDummyValues.splice(configuredHeaderCompressionKindIndex, 1);",
															"            }",
															"            if (potentialDummyValues.length === 0) {",
															"                potentialDummyValues = [\"No alternatives available\"];",
															"            }",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"            CouldDummyBeCreated(supportedHeaderCompressionKindNames, configuredHeaderCompressionKind,",
															"                configuredHeaderCompressionKindIndex,",
															"                potentialDummyValues,",
															"                dummyValueIndex,",
															"                dummyValue);",
															"",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"header-compression-kind\";",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(supportedHeaderCompressionKindNames, configuredHeaderCompressionKind,",
															"            configuredHeaderCompressionKindIndex,",
															"            potentialDummyValues,",
															"            dummyValueIndex,",
															"            dummyValue) {",
															"            pm.test(\"CouldSupportedHeaderCompressionKindNamesBeRetrieved\", function () {",
															"                pm.expect(supportedHeaderCompressionKindNames).to.be.an(\"array\");",
															"            });",
															"            pm.test(\"CouldConfiguredHeaderCompressionKindNameBeRetrieved\", function () {",
															"                pm.expect(configuredHeaderCompressionKind).to.be.a(\"string\");",
															"            });",
															"            pm.test(\"CouldConfiguredHeaderCompressionKindIndexBeEvaluated\", function () {",
															"                pm.expect(configuredHeaderCompressionKindIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldPotentialDummyValuesBeBuild\", function () {",
															"                pm.expect(potentialDummyValues).to.be.an(\"array\");",
															"                pm.expect(potentialDummyValues.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyValueIndexBeCalculated\", function () {",
															"                pm.expect(dummyValueIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try {",
															"            var supportedHeaderCompression = capability[\"supported-header-compression-kind-list\"][0][\"header-compression-name\"];",
															"            if (supportedHeaderCompression === \"no-compression\") {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            }",
															"            CouldSupportedDroppingBehaviorBeRead(supportedHeaderCompression, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        } catch (error) {",
															"            CouldSupportedDroppingBehaviorBeRead();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldSupportedDroppingBehaviorBeRead(supportedHeaderCompression, capabilitiesAreIndicatingThatFeatureNotSupported) {",
															"            pm.test(\"CouldSupportedDroppingBehaviorBeRead\", function () {",
															"                pm.expect(supportedHeaderCompression).to.be.a(\"string\");",
															"                pm.expect(capabilitiesAreIndicatingThatFeatureNotSupported).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"no-compression\";",
															"",
															"    EvaluatingResult = () => {",
															"        try {",
															"            if (Math.floor(resultCode / 100) === 2) {",
															"",
															"                if ((Math.floor(dummyCode / 100) === 2) && (resultValueString === dummyValueString)) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"OK\";",
															"",
															"                } else if ((Math.floor(dummyCode / 100) != 2)",
															"                    && (dummyValueString === JSON.stringify(\"No alternatives available\"))",
															"                    && (resultValueString === JSON.stringify(\"no-compression\"))) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"OK (not supported by hardware)\";",
															"",
															"                } else if (dummyCode === responseCodeForConfigurationError) {",
															"                    let onfErrorMessage = DistillingOnfErrorMessageFrom(dummyErrorMessage);",
															"                    let defaultValueString = JSON.stringify(\"no-compression\");",
															"                    if ((onfErrorMessage === errorMessageForNotSupported)",
															"                        && (resultValueString === defaultValueString)) {",
															"                        configurationValidationResults[NameOfAttributeUnderTest] = \"OK (not supported by hardware)\";",
															"",
															"                    } else if (onfErrorMessage === errorMessageForOutOfRange) {",
															"                        configurationValidationResults[NameOfAttributeUnderTest] = \"dummyValue out of hardware range\";",
															"",
															"                    } else if (onfErrorMessage === errorMessageForAgainstExisting) {",
															"                        configurationValidationResults[NameOfAttributeUnderTest] = \"dummyValue contradicts existing configuration\";",
															"",
															"                    } else if (onfErrorMessage === errorMessageForInconsistent) {",
															"                        configurationValidationResults[NameOfAttributeUnderTest] = \"dummyValue is inconsistent\";",
															"",
															"                    } else {",
															"                        configurationValidationResults[NameOfAttributeUnderTest] = \"Not configurable on application layer\";",
															"                    }",
															"",
															"                } else {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"Not configurable on server layer\";",
															"                }",
															"",
															"            } else {",
															"                if ( capabilitiesAreIndicatingThatFeatureNotSupported===true ) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"OK (not existing, because not supported)\";",
															"                } else {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"Not existing\";",
															"                }",
															"            }",
															"            CouldResultBeEvaluated(true);",
															"        } catch (error) {",
															"            CouldResultBeEvaluated(false);",
															"        }",
															"",
															"        // Functions",
															"        function DistillingOnfErrorMessageFrom(dummyErrorMessage) {",
															"            let indexOfStartTag = dummyErrorMessage.indexOf(\"#[onf:\");",
															"            let indexOfEndTag = dummyErrorMessage.indexOf(\"]#\");",
															"            return dummyErrorMessage.slice(indexOfStartTag, indexOfEndTag + 2);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldResultBeEvaluated(success) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// fec-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----------------------------Checking Configuration of fec-is-on---------------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"fec-is-on\";",
															"",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"fec-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// fec-word-size",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------------------------Checking Configuration of fec-word-size-------------------------\");",
															"",
															"        try {",
															"            var minimumValue = 20;",
															"            var maximumValue = capability[\"fec-word-size-max\"];",
															"            var valueRange = maximumValue - minimumValue;",
															"            var dummyValue = minimumValue + Math.floor(Math.random() * valueRange);",
															"            CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue);",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"fec-word-size\";",
															"",
															"        // Self Testing Function",
															"        function CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue) {",
															"            pm.test(\"CouldMinimumValueBeReadFromCapabilities\", function () {",
															"                pm.expect(minimumValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldMaximumValueBeReadFromCapabilities\", function () {",
															"                pm.expect(maximumValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldValueRangeBeCalculated\", function () {",
															"                pm.expect(valueRange).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try {",
															"            var supportedFecWordSizeMax = capability[\"fec-word-size-max\"];",
															"            if (supportedFecWordSizeMax === -1) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            }",
															"            CouldSupportedFecWordSizeMaxBeRead(supportedFecWordSizeMax, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        } catch (error) {",
															"            CouldSupportedFecWordSizeMaxBeRead();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldSupportedFecWordSizeMaxBeRead(supportedFecWordSizeMax, capabilitiesAreIndicatingThatFeatureNotSupported) {",
															"            pm.test(\"CouldSupportedFecWordSizeMaxBeRead\", function () {",
															"                pm.expect(supportedFecWordSizeMax).to.be.a(\"number\");",
															"                pm.expect(capabilitiesAreIndicatingThatFeatureNotSupported).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// fec-redundancy-size",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----------------------Checking Configuration of fec-redundancy-size------------------------\");",
															"",
															"        try {",
															"            let fecRedundancySizes = capability[\"supported-fec-redundancy-size-list\"];",
															"            let configuredFecRedundancySize = configuration[\"fec-redundancy-size\"];",
															"            let configuredFecRedundancySizeIndex = fecRedundancySizes.indexOf(configuredFecRedundancySize);",
															"            let potentialDummyValues = fecRedundancySizes;",
															"            if (configuredFecRedundancySizeIndex >= 0) {",
															"                potentialDummyValues.splice(configuredFecRedundancySizeIndex, 1);",
															"            }",
															"            if (potentialDummyValues.length === 0) {",
															"                potentialDummyValues = [\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_20\"];",
															"            }",
															"",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"            CouldDummyBeCreated(fecRedundancySizes, configuredFecRedundancySize,",
															"                configuredFecRedundancySizeIndex,",
															"                potentialDummyValues,",
															"                dummyValueIndex,",
															"                dummyValue);",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"fec-redundancy-size\";",
															"",
															"        // Self Testing Function",
															"        function CouldDummyBeCreated(fecRedundancySizes, configuredFecRedundancySize,",
															"            configuredFecRedundancySizeIndex,",
															"            potentialDummyValues,",
															"            dummyValueIndex,",
															"            dummyValue) {",
															"            pm.test(\"CouldFecRedundancySizesBeCreated\", function () {",
															"                pm.expect(fecRedundancySizes).to.be.an(\"array\");",
															"            });",
															"            pm.test(\"CouldConfiguredFecRedundancySizeBeRetrieved\", function () {",
															"                pm.expect(configuredFecRedundancySize).to.be.a(\"string\");",
															"            });",
															"            pm.test(\"CouldConfiguredFecRedundancySizeIndexBeEvaluated\", function () {",
															"                pm.expect(configuredFecRedundancySizeIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldPotentialDummyValuesBeBuild\", function () {",
															"                pm.expect(potentialDummyValues).to.be.an(\"array\");",
															"                pm.expect(potentialDummyValues.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyValueIndexBeCalculated\", function () {",
															"                pm.expect(dummyValueIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try {",
															"            var supportedFecRedundancySize = capability[\"supported-fec-redundancy-size-list\"][0];",
															"            if (supportedFecRedundancySize === \"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_NOT_YET_DEFINED\") {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            }",
															"            CouldSupportedFecRedundancySizeBeRead(supportedFecRedundancySize, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        } catch (error) {",
															"            CouldSupportedFecRedundancySizeBeRead();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldSupportedFecRedundancySizeBeRead(supportedFecRedundancySize, capabilitiesAreIndicatingThatFeatureNotSupported) {",
															"            pm.test(\"CouldSupportedFecRedundancySizeBeRead\", function () {",
															"                pm.expect(supportedFecRedundancySize).to.be.a(\"string\");",
															"                pm.expect(capabilitiesAreIndicatingThatFeatureNotSupported).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_NOT_YET_DEFINED\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// fec-interleaver-kind",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----------------------Checking Configuration of fec-interleaver-kind-----------------------\");",
															"",
															"        try {",
															"            let fecInterleaverKinds = capability[\"supported-fec-interleaver-kind-list\"];",
															"            let configuredFecInterleaverKind = configuration[\"fec-interleaver-kind\"];",
															"            let configuredFecInterleaverKindIndex = fecInterleaverKinds.indexOf(configuredFecInterleaverKind);",
															"            let potentialDummyValues = fecInterleaverKinds;",
															"            if (configuredFecInterleaverKindIndex >= 0) {",
															"                potentialDummyValues.splice(configuredFecInterleaverKindIndex, 1);",
															"            }",
															"            if (potentialDummyValues.length === 0) {",
															"                potentialDummyValues = [\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_CONVOLUTION\"];",
															"            }",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"            CouldDummyBeCreated(fecInterleaverKinds, configuredFecInterleaverKind,",
															"                configuredFecInterleaverKindIndex,",
															"                potentialDummyValues,",
															"                dummyValueIndex,",
															"                dummyValue);",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"fec-interleaver-kind\";",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(fecInterleaverKinds, configuredFecInterleaverKind,",
															"            configuredFecInterleaverKindIndex,",
															"            potentialDummyValues,",
															"            dummyValueIndex,",
															"            dummyValue) {",
															"            pm.test(\"CouldFecInterleaverKindsBeCreated\", function () {",
															"                pm.expect(fecInterleaverKinds).to.be.an(\"array\");",
															"            });",
															"            pm.test(\"CouldConfiguredFecInterleaverKindBeRetrieved\", function () {",
															"                pm.expect(configuredFecInterleaverKind).to.be.a(\"string\");",
															"            });",
															"            pm.test(\"CouldConfiguredFecInterleaverKindIndexBeEvaluated\", function () {",
															"                pm.expect(configuredFecInterleaverKindIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldPotentialDummyValuesBeBuild\", function () {",
															"                pm.expect(potentialDummyValues).to.be.an(\"array\");",
															"                pm.expect(potentialDummyValues.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyValueIndexBeCalculated\", function () {",
															"                pm.expect(dummyValueIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try {",
															"            var supportedFecInterleaverKind = capability[\"supported-fec-interleaver-kind-list\"][0];",
															"            if (supportedFecInterleaverKind === \"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_NOT_YET_DEFINED\") {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            }",
															"            CouldSupportedFecInterleaverKindBeRead(supportedFecInterleaverKind, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        } catch (error) {",
															"            CouldSupportedFecInterleaverKindBeRead();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldSupportedFecInterleaverKindBeRead(supportedFecInterleaverKind, capabilitiesAreIndicatingThatFeatureNotSupported) {",
															"            pm.test(\"CouldSupportedFecInterleaverKindBeRead\", function () {",
															"                pm.expect(supportedFecInterleaverKind).to.be.a(\"string\");",
															"                pm.expect(capabilitiesAreIndicatingThatFeatureNotSupported).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_NOT_YET_DEFINED\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// fec-interleaver-depth",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----------------------Checking Configuration of fec-interleaver-depth----------------------\");",
															"",
															"        try {",
															"            let fecInterleaverDepths = capability[\"supported-fec-interleaver-depth-list\"];",
															"            let configuredfecInterleaverDepth = configuration[\"fec-interleaver-depth\"];",
															"            let configuredfecInterleaverDepthIndex = fecInterleaverDepths.indexOf(configuredfecInterleaverDepth);",
															"            let potentialDummyValues = fecInterleaverDepths;",
															"            if (configuredfecInterleaverDepthIndex >= 0) {",
															"                potentialDummyValues.splice(configuredfecInterleaverDepthIndex, 1);",
															"            }",
															"            if (potentialDummyValues.length === 0) {",
															"                potentialDummyValues = [\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_96\"];",
															"            }",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"            CouldDummyBeCreated(fecInterleaverDepths, configuredfecInterleaverDepth,",
															"                configuredfecInterleaverDepthIndex,",
															"                potentialDummyValues,",
															"                dummyValueIndex,",
															"                dummyValue);",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"fec-interleaver-depth\";",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(fecInterleaverDepths, configuredfecInterleaverDepth,",
															"            configuredfecInterleaverDepthIndex,",
															"            potentialDummyValues,",
															"            dummyValueIndex,",
															"            dummyValue) {",
															"            pm.test(\"CouldFecInterleaverDepthsBeCreated\", function () {",
															"                pm.expect(fecInterleaverDepths).to.be.an(\"array\");",
															"            });",
															"            pm.test(\"CouldConfiguredFecInterleaverDepthBeRetrieved\", function () {",
															"                pm.expect(configuredfecInterleaverDepth).to.be.a(\"string\");",
															"            });",
															"            pm.test(\"CouldConfiguredFecInterleaverDepthIndexBeEvaluated\", function () {",
															"                pm.expect(configuredfecInterleaverDepthIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldPotentialDummyValuesBeBuild\", function () {",
															"                pm.expect(potentialDummyValues).to.be.an(\"array\");",
															"                pm.expect(potentialDummyValues.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyValueIndexBeCalculated\", function () {",
															"                pm.expect(dummyValueIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try {",
															"            var supportedFecInterleaverDepth = capability[\"supported-fec-interleaver-depth-list\"][0];",
															"            if (supportedFecInterleaverDepth === \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_NOT_YET_DEFINED\") {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            }",
															"            CouldSupportedFecInterleaverDepthBeRead(supportedFecInterleaverDepth, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        } catch (error) {",
															"            CouldSupportedFecInterleaverDepthBeRead();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldSupportedFecInterleaverDepthBeRead(supportedFecInterleaverDepth, capabilitiesAreIndicatingThatFeatureNotSupported) {",
															"            pm.test(\"CouldSupportedFecInterleaverDepthBeRead\", function () {",
															"                pm.expect(supportedFecInterleaverDepth).to.be.a(\"string\");",
															"                pm.expect(capabilitiesAreIndicatingThatFeatureNotSupported).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_NOT_YET_DEFINED\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// encryption-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of encryption-is-on-------------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"encryption-is-on\";",
															"",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"encryption-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// cryptographic-key",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of cryptographic-key-------------------------\");",
															"",
															"        var dummyValue = GenerateRandomString(16);",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"cryptographic-key\";",
															"",
															"        // Functions",
															"        function GenerateRandomString(length) {",
															"            let randomString = \"\";",
															"            let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
															"            let charactersLength = characters.length;",
															"            for (let i = 0; i < length; i++) {",
															"                randomString += characters.charAt(Math.floor(Math.random() * charactersLength));",
															"            }",
															"            return randomString;",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"Cryptographic key not yet defined.\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// loop-back-kind-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of loop-back-kind-on------------------------\");",
															"",
															"        try {",
															"            let supportedLoopBackKindList = capability[\"supported-loop-back-kind-list\"];",
															"            let loopBackKindOn = configuration[\"loop-back-kind-on\"];",
															"            let loopBackKindOnIndex = supportedLoopBackKindList.indexOf(loopBackKindOn);",
															"            let potentialDummyValues = supportedLoopBackKindList;",
															"            if (loopBackKindOnIndex >= 0) {",
															"                potentialDummyValues.splice(loopBackKindOnIndex, 1);",
															"            }",
															"            if (potentialDummyValues.length === 0) {",
															"                potentialDummyValues = [\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\"];",
															"            }",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"            CouldDummyBeCreated(supportedLoopBackKindList, loopBackKindOn, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"loop-back-kind-on\";",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(supportedLoopBackKindList, loopBackKindOn, dummyValue) {",
															"            pm.test(\"CouldDummyBeCreated\", function () {",
															"                pm.expect(supportedLoopBackKindList).to.be.an(\"array\");",
															"                pm.expect(loopBackKindOn).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var supportedLoopBackTypes = [];",
															"        try {",
															"            supportedLoopBackTypes = capability[\"supported-loop-back-kind-list\"];",
															"            var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"            if ((supportedLoopBackTypes.length === 1)",
															"                && ((supportedLoopBackTypes[0] === \"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\")",
															"                    || (supportedLoopBackTypes[0] === \"ethernet-container-2-0:LOOP_BACK_TYPE_NONE\"))) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            }",
															"            CouldFeaturesBeEvaluated(supportedLoopBackTypes, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        } catch (error) {",
															"            CouldFeaturesBeEvaluated(supportedLoopBackTypes, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldFeaturesBeEvaluated(supportedLoopBackTypes, capabilitiesAreIndicatingThatFeatureNotSupported) {",
															"            pm.test(\"CouldSupportedLoopBackTypesBeRead\", function () {",
															"                pm.expect(supportedLoopBackTypes).to.be.an(\"array\");",
															"                pm.expect(supportedLoopBackTypes.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldCapabilitiesAreIndicatingThatFeatureNotSupportedBeCalculated\", function () {",
															"                pm.expect(capabilitiesAreIndicatingThatFeatureNotSupported).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// maintenance-timer",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of maintenance-timer------------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"maintenance-timer\";",
															"",
															"        try {",
															"            let maintenanceTimerRange = capability[\"maintenance-timer-range\"];",
															"            let currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
															"            if (maintenanceTimerRange === \"Range of the maintenance timer not yet defined.\") {",
															"                maintenanceTimerRange = \"0-0\";",
															"            }",
															"            var dummyValue = getRandomValues(maintenanceTimerRange, currentValue);",
															"            CouldDummyValueBeDefined(maintenanceTimerRange, currentValue, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeDefined();",
															"        }",
															"",
															"        // Functions",
															"        function getRandomValues(availableValues, currentValue) {",
															"            var randomValue = 0;",
															"            if (availableValues.includes(\"-\")) {",
															"                var rangeValues = availableValues.split(\"-\");",
															"                do {",
															"                    randomValue = getRandomValueFromAvailableValues(rangeValues[0], rangeValues[1]);",
															"                } while (randomValue === currentValue);",
															"            } else if (availableValues.includes(\",\")) {",
															"                var concreteValues = availableValues.split(\",\");",
															"                do {",
															"                    var randomIndex = getRandomValueFromAvailableValues(0, concreteValues.length);",
															"                    randomValue = concreteValues[randomIndex];",
															"                } while (randomValue === currentValue);",
															"            }",
															"            else {",
															"                randomValue = availableValues;",
															"            }",
															"            return parseInt(randomValue);",
															"        }",
															"",
															"        function getRandomValueFromAvailableValues(min, max) {",
															"            return Math.floor(Math.random() * (max - min) + min);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeDefined(maintenanceTimerRange, currentValue, dummyValue) {",
															"            pm.test(\"CouldAnAvailableConfigurationValueBeRead\", function () {",
															"                pm.expect(maintenanceTimerRange).to.be.a(\"string\");",
															"                pm.expect(maintenanceTimerRange).to.not.have.lengthOf(0);",
															"            });",
															"            pm.test(\"CouldDCurrentValueBeRead\", function () {",
															"                pm.expect(currentValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(dummyValue).to.not.be.undefined;",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var supportedMaintenanceTimerRange = \"Range of the maintenance timer not yet defined.\";",
															"        try {",
															"            supportedMaintenanceTimerRange = capability[\"maintenance-timer-range\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        if (supportedMaintenanceTimerRange === \"Range of the maintenance timer not yet defined.\") {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"        } else {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// statistics-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of statistics-is-on------------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"statistics-is-on\";",
															"",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"statistics-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// problem-kind-severity-list/problem-kind-severity",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n---------Checking Configuration of problem-kind-severity-list/problem-kind-severity--------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"problem-kind-severity-list\";",
															"        var DATATYPE_INDEX_UNDER_TEST = 0;",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"problem-kind-name\";",
															"        var ATTRIBUTE_UNDER_TEST = \"problem-kind-severity\";",
															"",
															"        var dummyValue;",
															"        try {",
															"            let currentValue;",
															"            currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"            if (currentValue !== \"ethernet-container-2-0:SEVERITY_TYPE_MINOR\") {",
															"                dummyValue  = \"ethernet-container-2-0:SEVERITY_TYPE_MINOR\";",
															"            } else {",
															"                dummyValue = \"ethernet-container-2-0:SEVERITY_TYPE_MAJOR\";",
															"            }",
															"",
															"            keysOfDatatypeInstanceUnderTest[0].value",
															"                = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[0].key];",
															"        } catch (error) {",
															"            dummyValue = \"-1\";",
															"        }",
															"",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"",
															"        // Self Testing Function",
															"",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var supportedAlarmList = [];",
															"        var currentSeverityConfiguration;",
															"        try {",
															"            supportedAlarmList = capability[\"supported-alarm-list\"];",
															"            currentSeverityConfiguration = configuration[\"problem-kind-severity-list\"][0][\"problem-kind-severity\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        if ((supportedAlarmList.length > 0)",
															"            && (supportedAlarmList[0] !== \"Supported alarms not yet defined.\")",
															"            && (currentSeverityConfiguration !== \"ethernet-container-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\")) {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        } else {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"ethernet-container-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// performance-monitoring-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------Checking Configuration of performance-monitoring-is-on------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"",
															"        try {",
															"            var dummyValue = !configuration[\"performance-monitoring-is-on\"];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"performance-monitoring-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"pm.collectionVariables.set(\"attributes\", attributes);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function ConvertingThisFunctionToString(functionToBeConverted) {",
															"    let functionAsAString = String(functionToBeConverted);",
															"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
															"    return functionAsAString.slice(indexOfFirstCurly);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointEthernetContainerConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------EntryPoint of EthernetContainer Validation of Configuration-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the EthernetContainerConfiguration TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].ethernetContainerList.length;",
															"    var maximumIndexOfLtpUnderTest;",
															"    ",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.min( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointEthernetContainerConfiguration\");",
															"        console.log(\"Proceeding with terminating EthernetContainer validation for Completeness.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Provided Collection Variables ",
															"****************************************************************************************/",
															"INITIAL_INDEX_OF_ATTRIBUTE_UNDER_TEST = 0;",
															"",
															"pm.collectionVariables.set(\"indexOfAttributeUnderTest\", INITIAL_INDEX_OF_ATTRIBUTE_UNDER_TEST);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "CollectionInformationLoading",
									"item": [
										{
											"name": "UploadingInterfaceCapability",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Capabilities-------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the Interface Capabilities",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Configuration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Configuration",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceStatus",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n------------------------------Uploading Interface Status----------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Status",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"status\";          // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Displaying the Collection Variables right before starting the validation",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NetworkPreparation",
									"item": [
										{
											"name": "SettingDroppingBehaviorKind",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------------------Setting DroppingBehaviorKind to WRED type--------------------------\");\r",
															"/****************************************************************************************\r",
															"* \r",
															"* Setting DroppingBehaviorKind to DROPPING_BEHAVIOR_KIND_TYPE_WRED to test wred-behavior-list  \r",
															"* entries from the Configuration\r",
															"* \r",
															"* This Request is to make wred-behavior-list available for testing.\r",
															"*  \r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															" * Required Input Parameters\r",
															" ****************************************************************************************/\r",
															"try {\r",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");\r",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");\r",
															"    var capability = pm.collectionVariables.get(\"capability\");\r",
															"    var configuration = pm.collectionVariables.get(\"configuration\");\r",
															"    CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, capability, configuration);\r",
															"} catch (error) {\r",
															"    CouldInputForSwitchingMonitoringOnBeLoaded();\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															" * Forming the Body\r",
															" ****************************************************************************************/\r",
															"try {\r",
															"    let requestBodyString = ('{ \"' + moduleUnderTest + ':dropping-behavior-kind\":  \"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_WRED\" }');\r",
															"    var requestBody = JSON.parse(requestBodyString);\r",
															"    CouldRequestBodyBeFormed(requestBody);\r",
															"} catch (error) {\r",
															"    CouldRequestBodyBeFormed();\r",
															"}\r",
															"\r",
															" //Framing Keys of Data type       \r",
															"try {\r",
															"    var keysOfDatatypeInstanceUnderTest = [{}];\r",
															"    keysOfDatatypeInstanceUnderTest[0].key = \"queue-name\";\r",
															"    let availableDroppingBehaviorKinds \r",
															"            = capability[\"available-queue-list\"][0][\"available-dropping-behavior-kind-list\"];\r",
															"    keysOfDatatypeInstanceUnderTest[0].value \r",
															"            = capability[\"available-queue-list\"][0][keysOfDatatypeInstanceUnderTest[0].key];\r",
															"    CouldKeysOfDataTypeBeFormed(keysOfDatatypeInstanceUnderTest);\r",
															"} catch (error) {\r",
															"    CouldKeysOfDataTypeBeFormed();\r",
															"}\r",
															"/****************************************************************************************\r",
															" * Setting up Local Variables and Calling for Preparation of the Request\r",
															" ****************************************************************************************/\r",
															"pm.variables.clear();\r",
															"\r",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", \r",
															"                                            // \"status\", \"current-problems\", \"current-performance\" \r",
															"                                            // or \"historical-performances\"\r",
															"const DATATYPE_UNDER_TEST = \"queue-behavior-list\";\r",
															"var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;\r",
															"const ATTRIBUTE_UNDER_TEST = \"dropping-behavior-kind\";\r",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"\r",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;\r",
															"const FILTERED_FIELDS = \"\";\r",
															"const REQUEST_BODY = JSON.stringify(requestBody);\r",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,\r",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,\r",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);\r",
															"\r",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);\r",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);\r",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);\r",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);\r",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);\r",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);\r",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);\r",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"try {\r",
															"    eval(SettingTheRequestVariables)();\r",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);\r",
															"} catch (error) {\r",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															" * Self Testing Functions\r",
															" ****************************************************************************************/\r",
															"function CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, capability, configuration) {\r",
															"    pm.test(\"CouldInputForSwitchingMonitoringOnBeLoaded\", function() {\r",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");\r",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);\r",
															"        pm.expect(capability).to.be.an(\"object\");\r",
															"        pm.expect(configuration).to.be.an(\"object\");\r",
															"    });\r",
															"}\r",
															"\r",
															"function CouldRequestBodyBeFormed(requestBody) {\r",
															"    pm.test(\"CouldRequestBodyBeFormed\", function() {\r",
															"        pm.expect(requestBody).to.be.an(\"object\");\r",
															"    });\r",
															"}\r",
															"\r",
															"function CouldKeysOfDataTypeBeFormed(keysOfDatatypeInstanceUnderTest) {\r",
															"    pm.test(\"CouldKeysOfDataTypeBeFormed\", function() {\r",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");\r",
															"    });\r",
															"}\r",
															"\r",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, \r",
															"                                                keysOfDatatypeInstanceUnderTest,\r",
															"                                                attributeUnterTest, \r",
															"                                                contentType,\r",
															"                                                filteredDepth, \r",
															"                                                filteredFields, \r",
															"                                                requestBody) {\r",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {\r",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",\r",
															"            \"current-problems\", \"current-performance\",\r",
															"            \"historical-performances\"\r",
															"        ]);\r",
															"    });\r",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {\r",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");\r",
															"    });\r",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {\r",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");\r",
															"    });\r",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {\r",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");\r",
															"    });\r",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {\r",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);\r",
															"    });\r",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {\r",
															"        pm.expect(filteredDepth).to.be.a(\"number\");\r",
															"    });\r",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {\r",
															"        pm.expect(filteredFields).to.be.a(\"string\");\r",
															"    });\r",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {\r",
															"        pm.expect(requestBody).to.be.a(\"string\");\r",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);\r",
															"    });\r",
															"}\r",
															"\r",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {\r",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function() {\r",
															"        pm.expect(success).to.be.true;\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Required Input Parameters\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");\r",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);\r",
															"} catch (error) {\r",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting up Local Variables and Calling for Commenting the Response\r",
															"****************************************************************************************/\r",
															"pm.variables.set(\"response\", pm.response);\r",
															"pm.variables.set(\"positiveOutcome\", \" successfully configured to WRED type.\");\r",
															"pm.variables.set(\"negativeOutcome\", \" could not be configured WRED type.\");\r",
															"\r",
															"try {\r",
															"    eval(CommentingResponse)();\r",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);\r",
															"} catch (error) {\r",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Clearing Local Variables\r",
															"****************************************************************************************/\r",
															"pm.variables.clear();\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															" * Self Testing Functions\r",
															" ****************************************************************************************/\r",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {\r",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {\r",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");\r",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);\r",
															"    });\r",
															"}\r",
															"\r",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {\r",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {\r",
															"        pm.expect(success).to.be.true;\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "SwitchingOnEgressShaping",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------------Egress Shaping On----------------------------------\");",
															"/****************************************************************************************",
															" * ",
															" * Egress Shaping On",
															" * ",
															" * This Request is for activating collection of performance data on the device under",
															" * test, so the data can be retrieved during validating configuration of the implementation",
															" *  ",
															" ****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															" * Required Input Parameters",
															" ****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSwitchingEgressShapingOnBeLoaded(SettingTheRequestVariables, capability, configuration);",
															"} catch (error) {",
															"    CouldInputForSwitchingEgressShapingOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Forming the Body",
															" ****************************************************************************************/",
															"try {",
															"    let requestBodyString = ('{ \"' + moduleUnderTest + ':egress-shaping-is-on\": true }');",
															"    var requestBody = JSON.parse(requestBodyString);",
															"    CouldRequestBodyBeFormed(requestBody);",
															"} catch (error) {",
															"    CouldRequestBodyBeFormed();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Setting up Local Variables and Calling for Preparation of the Request",
															" ****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"egress-shaping-is-on\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(requestBody);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForSwitchingEgressShapingOnBeLoaded(SettingTheRequestVariables, capability, configuration) {",
															"    pm.test(\"CouldInputForSwitchingEgressShapingOnBeLoaded\", function() {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(configuration).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyBeFormed(requestBody) {",
															"    pm.test(\"CouldRequestBodyBeFormed\", function() {",
															"        pm.expect(requestBody).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, ",
															"                                                keysOfDatatypeInstanceUnderTest,",
															"                                                attributeUnterTest, ",
															"                                                contentType,",
															"                                                filteredDepth, ",
															"                                                filteredFields, ",
															"                                                requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"            \"current-problems\", \"current-performance\",",
															"            \"historical-performances\"",
															"        ]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function() {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingEgressShapingOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingEgressShapingOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully Egress shaping on.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be Egress shaping on.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingEgressShapingOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingEgressShapingOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "AttributeConfiguration",
									"item": [
										{
											"name": "EntryPointEthernetAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the AttributeConfiguration Tests ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var attributes = pm.collectionVariables.get(\"attributes\");",
															"    var indexOfAttributeUnderTest = pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
															"    ",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    ",
															"    CouldTheInputBeLoaded(attributes, indexOfAttributeUnderTest, dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"        ",
															"    if ( indexOfAttributeUnderTest < attributes.length ) {",
															"        postman.setNextRequest();",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointEthernetAttributeConfiguration\");",
															"    }",
															"        ",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(attributes, indexOfAttributeUnderTest, dummyUri) {",
															"    pm.test(\"CouldTheAttributesBeLoaded\", function () {",
															"        pm.expect(attributes).to.be.an(\"array\");",
															"    });",
															"    pm.test(\"CouldIndexOfAttributeUnderTestBeLoaded\", function () {",
															"        pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"CouldTheDummyUriBeLoaded\", function () {",
															"        pm.expect(dummyUri).to.be.a(\"string\");",
															"        pm.expect(dummyUri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Writing",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Retrieving DummyCode",
															"****************************************************************************************/",
															"try {",
															"    var dummyCode = JSON.parse(pm.response.code);",
															"    var dummyErrorMessage = \"\";",
															"    if ( Math.floor(dummyCode/100) !== 2 ) {",
															"        var dummyErrorMessage = JSON.parse(pm.response.stream).errors.error[0][\"error-message\"];",
															"    }",
															"    CouldResponseBeRetrieved(dummyCode, dummyErrorMessage);",
															"} catch (error) {",
															"    CouldResponseBeRetrieved();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting Local Variables",
															"****************************************************************************************/   ",
															"pm.variables.set(\"dummyCode\", dummyCode);",
															"pm.variables.set(\"dummyErrorMessage\", dummyErrorMessage);",
															"",
															"    ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldResponseBeRetrieved(responseCode, responseErrorMessage) {",
															"    pm.test(\"CouldTheDummyCodeOfPuttingBeReceived\", function () {",
															"        pm.expect(responseCode).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"CouldTheErrorMessagePuttingBeComposed\", function () {",
															"        pm.expect(responseErrorMessage).to.be.a(\"string\");",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Writing",
															"* ",
															"* This Request is for PUTting an boolean attribute with the alternate value and",
															"* providing this value as dummyValueString to the local Variables.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfWritingAsaString = pm.environment.get(\"PreRequestOfWritingAsaString\");",
															"    eval(PreRequestOfWritingAsaString);",
															"    CouldPreRequestOfWritingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfWritingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfWritingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfWritingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Reading",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Reading",
															"* ",
															"* This Request is for GETting the value of the attributeUnderTest and providing it ",
															"* as ResultValue to the local Variables",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfReadingAsaString = pm.environment.get(\"PreRequestOfReadingAsaString\");",
															"    eval(PreRequestOfReadingAsaString);",
															"    CouldPreRequestOfReadingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfReadingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfReadingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfReadingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PostRequestOfReadingAsaString = pm.environment.get(\"PostRequestOfReadingAsaString\");",
															"    eval(PostRequestOfReadingAsaString);",
															"    CouldPostRequestOfReadingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPostRequestOfReadingBeExecuted();",
															"}",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPostRequestOfReadingBeExecuted(success) {",
															"    pm.test(\"CouldPostRequestOfReadingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Evaluating",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Evaluating",
															"* ",
															"* This Request compares resultValue with dummyValue.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfEvaluatingAsaString = pm.environment.get(\"PreRequestOfEvaluatingAsaString\");",
															"    var dummyCode = pm.variables.get(\"dummyCode\");",
															"    ",
															"    eval(PreRequestOfEvaluatingAsaString);",
															"",
															"    if ( Math.floor(dummyCode/100) !==2 ) {",
															"        postman.setNextRequest(\"ReversalPointEthernetAttributeConfiguration\");",
															"    }",
															"    ",
															"    CouldPreRequestOfEvaluatingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfEvaluatingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfEvaluatingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfEvaluatingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Restoring",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Restoring",
															"* ",
															"* This Request is for Restoring the initial value to the attributeUnderTest",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfRestoringAsaString = pm.environment.get(\"PreRequestOfRestoringAsaString\");",
															"    eval(PreRequestOfRestoringAsaString);",
															"    CouldPreRequestOfRestoringBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfRestoringBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfRestoringBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfRestoringBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Setting Local Variables",
															"****************************************************************************************/   ",
															"pm.variables.clear();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ReversalPointEthernetAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"        ",
															"    var indexOfAttributeUnderTest = pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
															"        ",
															"    CouldTheInputBeLoaded(dummyUri, indexOfAttributeUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextAttributeUnderTest = indexOfAttributeUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfAttributeUnderTest\", indexOfPotentialNextAttributeUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointEthernetAttributeConfiguration\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfAttributeUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointEthernetAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* ExitPoint",
															"* ",
															"* This Request is terminating the Test",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NetworkRestoration",
									"item": [
										{
											"name": "SettingOriginalInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------------Restoring the Original Interface Configuration Again-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting the Original Interface Configuration Again",
															"* ",
															"* This Request is for restoring the configuration from before the interface validation ",
															"* on the device.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"        ",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration",
															"                                                   );",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    completeClassName = moduleUnderTest + \":\" + technologyUnderTest + \"-configuration\";",
															"    configuration = AddHeadlineToDataObject(configuration, completeClassName);",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched back on original values.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched back on original values.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointEthernetContainerConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------ReversalPoint of EthernetContainer Validation of Configuration---------------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Console.log of Validation Results",
															" ****************************************************************************************/",
															"let allConfigurationValidationResults = { \"allConfigurationValidationResults\" : configurationValidationResults };",
															"console.log(allConfigurationValidationResults);",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointEthernetContainerConfiguration\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointEthernetContainerConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n----------------------Terminating EthernetContainerConfiguration--------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ExitPoint",
															"* ",
															"* This Request is for clearing the Collection variables and terminating the TestCase",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Clearing all Collection Variables for Terminating the TestCase",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "HybridMwStructureValidation",
					"item": [
						{
							"name": "HybridMwStructureCompleteness",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputCompletenessHms",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n\\n============================ HybridMwStructureCompleteness.3 =============================\");",
															"/****************************************************************************************",
															"* ",
															"* RequestCollection for validating Completeness of HybridMwStructure Objects against definition ",
															"* ",
															"*                   HybridMwStructure_2.0.0-tsp.200122.1300",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/hybridMwStructure/tree/tsp",
															"* ",
															"****************************************************************************************/",
															" ",
															"",
															"/****************************************************************************************",
															"* Manual Definition of the Mode of Operation of this TestCase",
															"****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"one\"; // \"none\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"hybrid-mw-structure-2-0:hybrid-mw-structure-pac\"; // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function() {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function() {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointHybridMwStructureCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------EntryPoint of HybridMwStructure Validation for Completeness-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the HybridMwStructureCompleteness TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].hybridMwStructureList.length;",
															"    var maximumIndexOfLtpUnderTest;",
															"    ",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.min( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointHybridMwStructureCompleteness\");",
															"        console.log(\"Proceeding with terminating HybridMwStructure validation for Completeness.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceCapability",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Capabilities-------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the Interface Capabilities",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Configuration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Configuration",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Displaying the Collection Variables right before starting the validation",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "NetworkPreparation",
									"item": [
										{
											"name": "SwitchingOnMonitoring",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------------Switching Monitoring On----------------------------------\");",
															"/****************************************************************************************",
															" * ",
															" * Switching Monitoring On",
															" * ",
															" * This Request is for activating collection of performance data on the device under",
															" * test, so the data can be retrieved during validating completeness of the implementation",
															" *  ",
															" ****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															" * Required Input Parameters",
															" ****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, capability, configuration);",
															"} catch (error) {",
															"    CouldInputForSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Forming the Body",
															" ****************************************************************************************/",
															"try {",
															"    let requestBodyString = ('{ \"' + moduleUnderTest + ':performance-monitoring-is-on\": true }');",
															"    var requestBody = JSON.parse(requestBodyString);",
															"    CouldRequestBodyBeFormed(requestBody);",
															"} catch (error) {",
															"    CouldRequestBodyBeFormed();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Setting up Local Variables and Calling for Preparation of the Request",
															" ****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(requestBody);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, capability, configuration) {",
															"    pm.test(\"CouldInputForSwitchingMonitoringOnBeLoaded\", function() {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(configuration).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyBeFormed(requestBody) {",
															"    pm.test(\"CouldRequestBodyBeFormed\", function() {",
															"        pm.expect(requestBody).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, ",
															"                                                keysOfDatatypeInstanceUnderTest,",
															"                                                attributeUnterTest, ",
															"                                                contentType,",
															"                                                filteredDepth, ",
															"                                                filteredFields, ",
															"                                                requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"            \"current-problems\", \"current-performance\",",
															"            \"historical-performances\"",
															"        ]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function() {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched on.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched on.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "ValidationRequests",
									"item": [
										{
											"name": "LtpCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------------Checking HybridMwStructureLtp for Completeness------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* This Request is for validating HybridMwStructureLtp objects against definition ",
															"*",
															"* ONF Core IM 1.4",
															"*",
															"* as it can be found on https://github.com/openBackhaul/core/tree/tsp",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"\";",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 5;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let ETHERNET_CONTAINER_LTP_SCHEMA = {",
															"    \"type\": \"object\",",
															"\t\"properties\": {",
															"        \"core-model-1-4:logical-termination-point\": {",
															"            \"type\": \"array\",",
															"            \"items\": {",
															"                \"type\": \"object\",",
															"                \"properties\": {",
															"                    \"physical-port-reference\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"string\",",
															"                        },",
															"                    },                    ",
															"                    \"connected-ltp\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                    \"supporting-pc\": \t\t\t\t            \t            { \"type\": \"string\" },",
															"                    \"client-ltp\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"string\",",
															"                        },",
															"                    },",
															"                    \"server-ltp\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"string\",",
															"                        },",
															"                    },",
															"                    \"ltp-direction\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                    \"transfer-capacity-pac\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"embedded-clock\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"run-mode\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"encompassed-clock\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },",
															"                                \"encapsulated-fc\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": {",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"uuid\": \t\t\t\t\t                    { \"type\": \"string\" },",
															"                                            \"local-id\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"lifecycle-state\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                                            \"layer-protocol-name\": \t\t\t                { \"type\": \"string\" },",
															"                                            \"administrative-state\":    \t\t\t\t\t    { \"type\": \"string\" },",
															"                                            \"name\": {",
															"                                                \"type\": \"array\",",
															"                                                \"items\": { ",
															"                                                    \"type\": \"object\",",
															"                                                    \"properties\": {",
															"                                                    },",
															"                                                },",
															"                                            },",
															"                                            \"fc-route\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"operational-state\":     \t\t\t\t\t    { \"type\": \"string\" },",
															"                                            \"administrative-control\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                            \"supporting-pc\": \t\t\t\t            \t{ \"type\": \"string\" },",
															"                                            \"service-priority\": \t\t\t                { \"type\": \"string\" },",
															"                                            \"forwarding-direction\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                            \"fc-port\": {",
															"                                                \"type\": \"array\",",
															"                                                \"items\": {",
															"                                                    \"type\": \"object\",",
															"                                                    \"properties\": {",
															"                                                    },",
															"                                                },",
															"                                            },",
															"                                            \"is-protection-lock-out\": \t\t\t\t\t    { \"type\": \"boolean\" },                    ",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"sync-ltp\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },                                ",
															"                                \"encapsulated-casc\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },",
															"                                \"phase-aligned-clock\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },",
															"                                \"local-id\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"configured-client-capacity\": \t\t\t\t\t{ \"type\": \"string\" },",
															"                                \"fc-blocks-signal-to-lp\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                \"lifecycle-state\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                                \"layer-protocol-name\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                                \"termination-state\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                                \"administrative-state\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                \"lp-direction\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                                \"is-protection-lock-out\":            \t\t\t{ \"type\": \"boolean\" },                    ",
															"                                \"operational-state\":     \t\t\t            { \"type\": \"string\" },",
															"                                \"administrative-control\": \t\t\t\t\t    { \"type\": \"string\" },                                ",
															"                                \"name\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"label\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"extension\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"operational-state\":     \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"administrative-control\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"administrative-state\":    \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"lifecycle-state\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                                \"address\": \t\t\t\t\t                                { \"type\": \"string\" },",
															"                            },",
															"                        },",
															"                    },                  ",
															"                    \"peer-ltp\":              \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"ltp-in-other-view\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"string\",",
															"                        },",
															"                    },",
															"                    \"ltp-augment-1-0:ltp-augment-pac\": {",
															"                        \"type\": \"object\",",
															"                        \"properties\": {",
															"                            \"ltp-augment-capability\": {",
															"                                \"type\": \"object\",",
															"                                \"properties\": {",
															"                                    \"equipment\": {",
															"                                        \"type\": \"array\",",
															"                                        \"items\": { ",
															"                                            \"type\": \"string\",",
															"                                        },",
															"                                    },                    ",
															"                                    \"connector\":                                 { \"type\": \"string\" },",
															"                                },",
															"                                \"required\": [",
															"                                    \"equipment\", ",
															"                                    \"connector\",",
															"                                ],",
															"                            },",
															"                        },",
															"                        \"required\": [",
															"                            \"ltp-augment-capability\", ",
															"                        ],",
															"                    },",
															"                    \"layer-protocol\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": {",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"layer-protocol-name\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                                \"configured-client-capacity\": \t\t\t\t\t{ \"type\": \"string\" },",
															"                                \"lp-direction\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                                \"termination-state\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                                \"configuration-and-switch-control\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },",
															"                                \"is-protection-lock-out\":            \t\t\t{ \"type\": \"boolean\" },",
															"                                \"fc-blocks-signal-to-lp\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                \"hybrid-mw-structure-2-0:hybrid-mw-structure-pac\": {",
															"                                    \"type\": \"object\",",
															"                                    \"properties\": {",
															"                                        \"hybrid-mw-structure-capability\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"supported-alarm-list\": { \"type\": \"array\" },",
															"                                                \"supported-tdm-structure-kind-list\": { \"type\": \"array\" },",
															"                                                \"performance-monitoring-is-avail\": { \"type\": \"boolean\" },",
															"                                            },",
															"                                        },",
															"                                        \"hybrid-mw-structure-configuration\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"tdm-structure-kind\": { \"type\": \"string\" },",
															"                                                \"number-of-tdm-segments-to-be-reserved\": { \"type\": \"number\" },",
															"                                                \"problem-kind-severity-list\": { \"type\": \"array\" },",
															"                                                \"g-826-threshold-cross-alarm-list\": { \"type\": \"array\" },",
															"                                                \"clearing-threshold-cross-alarms-is-on\": { \"type\": \"boolean\" },",
															"                                                \"performance-monitoring-is-on\": { \"type\": \"boolean\" },",
															"                                            },",
															"                                        },",
															"                                        \"hybrid-mw-structure-status\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"segment-status-list\": { \"type\": \"array\" },",
															"                                                \"performance-monitoring-is-up\": { \"type\": \"boolean\" },",
															"                                            },",
															"                                        },",
															"                                        \"hybrid-mw-structure-current-problems\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"current-problem-list\": { \"type\": \"array\" },",
															"                                                \"number-of-current-problems\": { \"type\": \"number\" },",
															"                                                \"time-of-latest-change\": { \"type\": \"string\" },",
															"                                            },",
															"                                        },",
															"                                        \"hybrid-mw-structure-current-performance\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"current-performance-data-list\": { \"type\": \"array\" },",
															"                                                \"number-of-current-performance-sets\": { \"type\": \"number\" },",
															"                                            },",
															"                                        },",
															"                                        \"hybrid-mw-structure-historical-performances\":{",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"historical-performance-data-list\": { \"type\": \"array\" },",
															"                                                \"number-of-historical-performance-sets\": { \"type\": \"number\" },",
															"                                                \"time-of-latest-change\": { \"type\": \"string\" },",
															"                                            },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"local-id\": \t\t\t\t\t                            { \"type\": \"string\" },",
															"                                \"name\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"label\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"extension\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"operational-state\":     \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"administrative-control\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"administrative-state\":    \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"lifecycle-state\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                                \"address\": \t\t\t\t\t                                { \"type\": \"string\" },",
															"                            },",
															"                            \"required\": [",
															"                                \"layer-protocol-name\",",
															"                                \"hybrid-mw-structure-2-0:hybrid-mw-structure-pac\",",
															"                                \"local-id\",",
															"                            ],",
															"                        },",
															"                    },",
															"                    \"external-managed-id\": {",
															"                        \"type\": \"object\",",
															"                        \"properties\": {",
															"                            \"manager-identifier\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                            \"external-managed-uuid\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                        },",
															"                    },",
															"                    \"local-id\": \t\t\t\t\t                            { \"type\": \"string\" },",
															"                    \"uuid\": \t\t\t\t\t                                { \"type\": \"string\" },",
															"                    \"name\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"value\":                                        { \"type\": \"string\" },",
															"                            },",
															"                        },",
															"                    },",
															"                    \"label\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"value\":                                        { \"type\": \"string\" },",
															"                            },",
															"                        },",
															"                    },",
															"                    \"extension\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"value\":                                        { \"type\": \"string\" },",
															"                            },",
															"                        },",
															"                    },",
															"                    \"operational-state\":     \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"administrative-control\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"administrative-state\":    \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"lifecycle-state\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                    \"address\": \t\t\t\t\t                                { \"type\": \"string\" },",
															"                },",
															"                \"required\": [",
															"                    \"server-ltp\",",
															"                    \"layer-protocol\",",
															"                    \"uuid\",",
															"                    \"name\",",
															"                ],",
															"            },",
															"        },",
															"    },",
															"    \"required\": [",
															"        \"core-model-1-4:logical-termination-point\",",
															"    ]",
															"};",
															"pm.variables.set(\"schema\", ETHERNET_CONTAINER_LTP_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\", \"\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PacCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------Checking HybridMwStructure_Pac for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* PacCompleteness",
															"* ",
															"* This Request is for validating HybridMwStructure Pac Objects against definition ",
															"* HybridMwStructure_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/hybridMwStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the *_Pac class",
															"*  - availability of all attributes in this particular class",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"pac\";             // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 3;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let HYBRID_MW_STRUCTURE_PAC_SCHEMA = {",
															"    \"type\": \"object\",",
															"    \"properties\": {",
															"        \"hybrid-mw-structure-capability\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"supported-alarm-list\": { \"type\": \"array\" },",
															"                \"supported-tdm-structure-kind-list\": { \"type\": \"array\" },",
															"                \"performance-monitoring-is-avail\": { \"type\": \"boolean\" },",
															"            },",
															"        },",
															"        \"hybrid-mw-structure-configuration\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"tdm-structure-kind\": { \"type\": \"string\" },",
															"                \"number-of-tdm-segments-to-be-reserved\": { \"type\": \"number\" },",
															"                \"problem-kind-severity-list\": { \"type\": \"array\" },",
															"                \"g-826-threshold-cross-alarm-list\": { \"type\": \"array\" },",
															"                \"clearing-threshold-cross-alarms-is-on\": { \"type\": \"boolean\" },",
															"                \"performance-monitoring-is-on\": { \"type\": \"boolean\" },",
															"            },",
															"        },",
															"        \"hybrid-mw-structure-status\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"segment-status-list\": { \"type\": \"array\" },",
															"                \"performance-monitoring-is-up\": { \"type\": \"boolean\" },",
															"            },",
															"        },",
															"        \"hybrid-mw-structure-current-problems\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"current-problem-list\": { \"type\": \"array\" },",
															"                \"number-of-current-problems\": { \"type\": \"number\" },",
															"                \"time-of-latest-change\": { \"type\": \"string\" },",
															"            },",
															"        },",
															"        \"hybrid-mw-structure-current-performance\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"current-performance-data-list\": { \"type\": \"array\" },",
															"                \"number-of-current-performance-sets\": { \"type\": \"number\" },",
															"            },",
															"        },",
															"        \"hybrid-mw-structure-historical-performances\":{",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"historical-performance-data-list\": { \"type\": \"array\" },",
															"                \"number-of-historical-performance-sets\": { \"type\": \"number\" },",
															"                \"time-of-latest-change\": { \"type\": \"string\" },",
															"            },",
															"        },",
															"    },",
															"    \"required\": [\"hybrid-mw-structure-capability\",",
															"                    \"hybrid-mw-structure-configuration\",",
															"                    \"hybrid-mw-structure-status\",",
															"                    \"hybrid-mw-structure-current-problems\",",
															"                    \"hybrid-mw-structure-current-performance\",",
															"                    \"hybrid-mw-structure-historical-performances\",",
															"    ]",
															"};",
															"pm.variables.set(\"schema\", HYBRID_MW_STRUCTURE_PAC_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CapabilityCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------------Checking hybridMwStructureCapability for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* CapabilityCompleteness",
															"* ",
															"* This Request is for validating HybridMwStructure Capability Objects against definition ",
															"* HybridMwStructure_2.0.0-tsp.200122.1300",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/hybridMwStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Capability class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let HYBRID_MW_STRUCTURE_CAPABILITY_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"supported-alarm-list\": {",
															"            \"type\": \"array\",",
															"            \"item\":                                     { \"type\": \"string\" }",
															"\t\t},\t",
															"\t\t\"supported-tdm-structure-kind-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": { ",
															"\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\"tdm-structure-name\":     \t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"tdm-segment-size\":     \t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\"max-number-of-segments-reservable\":{ \"type\": \"number\" }",
															"\t\t        },",
															"\t\t        \"required\": [\"tdm-structure-name\", ",
															"\t\t\t\t            \t\"tdm-segment-size\",",
															"\t\t\t\t            \t\"max-number-of-segments-reservable\"",
															"\t\t\t\t\t          ]\t",
															"\t        \t}\t",
															"\t\t},\t\t",
															"\t\t\"performance-monitoring-is-avail\":\t \t\t\t{ \"type\": \"boolean\" }",
															"\t},",
															"\t\"required\": [ \"supported-alarm-list\", ",
															"\t\t\t\t    \"supported-tdm-structure-kind-list\",",
															"\t\t\t\t    \"performance-monitoring-is-avail\"\t\t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t\t",
															"\t]",
															"};",
															"",
															"pm.variables.set(\"schema\", HYBRID_MW_STRUCTURE_CAPABILITY_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ConfigurationCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n----------------Checking HybridMwStructureConfiguration for Completeness------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ConfigurationCompleteness",
															"* ",
															"* This Request is for validating HybridMwStructure Configuration Objects against definition ",
															"* HybridMwStructure_2.0.0-tsp.200122.1300",
															"* as it can be found on https://github.com/openBackhaul/hybridMwStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Configuration class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(RemoveAttributeFromRequired, SettingTheRequestVariables, capability);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let HYBRID_MW_STRUCTURE_CONFIGURATION_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"tdm-structure-kind\":                       { \"type\": \"string\" },",
															"\t\t\"number-of-tdm-segments-to-be-reserved\": \t{ \"type\": \"number\" },",
															" \t\t\"problem-kind-severity-list\": {",
															"            \"type\": \"array\",",
															"\t\t\t\"items\": {",
															"        \t\t\"type\": \"object\", ",
															"        \t\t\"properties\": {",
															"        \t\t\t\"problem-kind-name\":            { \"type\": \"string\" },",
															"        \t\t\t\"problem-kind-severity\": { \"enum\": [",
															"                                                \"hybrid-mw-structure-2-0:SEVERITY_TYPE_NON_ALARMED\",",
															"                                                \"hybrid-mw-structure-2-0:SEVERITY_TYPE_WARNING\",",
															"                                                \"hybrid-mw-structure-2-0:SEVERITY_TYPE_MINOR\",",
															"                                                \"hybrid-mw-structure-2-0:SEVERITY_TYPE_MAJOR\",",
															"                                                \"hybrid-mw-structure-2-0:SEVERITY_TYPE_CRITICAL\",",
															"                                                \"hybrid-mw-structure-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\"",
															"                                               ]",
															"        \t\t\t}",
															"        \t\t},",
															"                \"required\": [\"problem-kind-name\",",
															"                                \"problem-kind-severity\"",
															"                ]",
															"\t\t\t}",
															"\t\t}, \t\t",
															"\t\t\"g-826-threshold-cross-alarm-list\": {",
															"            \"type\": \"array\",",
															"\t\t\t\"items\": {",
															"                \"type\": \"object\", ",
															"                \"properties\": {",
															"                    \"g-826-value-kind\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:G_826_TYPE_ES\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:G_826_TYPE_SES\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:G_826_TYPE_CSES\",",
															"\t\t\t\t    \t\t\t\t\t\t\"hybrid-mw-structure-2-0:G_826_TYPE_UAS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:G_826_TYPE_NOT_SPECIFIED\"",
															"\t\t\t\t\t\t\t\t\t\t  ]",
															"                    },",
															"                    \"alarm-raising-threshold\":      { \"type\": \"number\" },",
															"                    \"alarm-clearing-threshold\":     { \"type\": \"number\" },",
															"                    \"granularity-period\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:GRANULARITY_PERIOD_TYPE_PERIOD_15_MIN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:GRANULARITY_PERIOD_TYPE_PERIOD_24_HOURS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t\t]",
															"                    }",
															"                },",
															"                \"required\": [\"g-826-value-kind\",",
															"                                \"alarm-raising-threshold\",",
															"\t\t\t\t\t\t\t\t\"alarm-clearing-threshold\",",
															"\t\t\t\t\t\t\t\t\"granularity-period\"",
															"\t\t\t\t]",
															"            }",
															"\t\t},",
															"\t\t\"clearing-threshold-cross-alarms-is-on\": \t{ \"type\": \"boolean\" },",
															"\t\t\"performance-monitoring-is-on\": \t\t\t{ \"type\": \"boolean\" }",
															"\t},",
															"\t\"required\": [ \"tdm-structure-kind\",",
															"\t                \"number-of-tdm-segments-to-be-reserved\",",
															"\t\t\t\t\t\"problem-kind-severity-list\",",
															"\t\t\t\t\t\"g-826-threshold-cross-alarm-list\",",
															"\t\t\t\t\t\"clearing-threshold-cross-alarms-is-on\",",
															"\t\t\t\t\t\"performance-monitoring-is-on\"",
															"    ]",
															"};",
															"",
															"try {",
															"    if (capability[\"supported-alarm-list\"][0] === \"Supported alarms not yet defined.\") {",
															"        pm.variables.set(\"schemaToBeShortened\", HYBRID_MW_STRUCTURE_CONFIGURATION_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"problem-kind-severity-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        HYBRID_MW_STRUCTURE_CONFIGURATION_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"",
															"        pm.variables.set(\"schemaToBeShortened\", HYBRID_MW_STRUCTURE_CONFIGURATION_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"g-826-threshold-cross-alarm-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        HYBRID_MW_STRUCTURE_CONFIGURATION_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"",
															"        CouldHybridMwStructureConfigurationBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldHybridMwStructureConfigurationBeShortened(false);",
															"}",
															"",
															"pm.variables.set(\"schema\", HYBRID_MW_STRUCTURE_CONFIGURATION_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputBeLoaded(RemoveAttributeFromRequired, SettingTheRequestVariables, capability) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(capability).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldHybridMwStructureConfigurationBeShortened(success) {",
															"    pm.test(\"CouldHybridMwStructureConfigurationBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "StatusCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------------Checking HybridMwStructureStatus for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* StatusCompleteness",
															"* ",
															"* This Request is for validating HybridMwStructure Status Objects against definition ",
															"* HybridMwStructure_2.0.0-tsp.200122.1300",
															"* as it can be found on https://github.com/openBackhaul/hybridMwStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Status class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"status\";          // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let HYBRID_MW_STRUCTURE_STATUS_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"segment-status-list\": { ",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": { ",
															"\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\"segment-status-type-id\": \t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\"segment-is-reserved-for-tdm\":\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\t\"operational-status\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:OPERATIONAL_STATE_TYPE_ENABLED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:OPERATIONAL_STATE_TYPE_DISABLED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:OPERATIONAL_STATE_TYPE_NOT_YET_DEFINED\"\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t\t}",
															"\t\t\t\t},",
															"\t\t\t\t\"required\": [ \"segment-status-type-id\", ",
															"\t\t\t\t\t\t\t\"segment-is-reserved-for-tdm\",",
															"\t\t\t\t\t\t\t\"operational-status\"\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\t\t]\t",
															"\t\t\t}",
															"\t\t},\t\t",
															"\t\t\"performance-monitoring-is-up\": { \"type\": \"boolean\" }\t\t\t\t",
															"\t},",
															"\t\"required\": [ \"segment-status-list\", ",
															"\t\t\t\t\"performance-monitoring-is-up\"\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t]\t",
															"};",
															"",
															"pm.variables.set(\"schema\", HYBRID_MW_STRUCTURE_STATUS_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentProblemsCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------Checking HybridMwStructureCurrentProblems for Completeness-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* CurrentProblemsCompleteness",
															"* ",
															"* This Request is for validating HybridMwStructure CurrentProblems Objects against definition ",
															"* HybridMwStructure_2.0.0-tsp.200122.1300",
															"* as it can be found on https://github.com/openBackhaul/eybridMwStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the CurrentProblems class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(RemoveAttributeFromRequired, SettingTheRequestVariables, capability);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"current-problems\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let HYBRID_MW_STRUCTURE_CURRENT_PROBLEMS_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"current-problem-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"\t\t\t\t\t\"problem-name\": \t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"sequence-number\": \t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\"timestamp\": \t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"problem-severity\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:SEVERITY_TYPE_NON_ALARMED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:SEVERITY_TYPE_WARNING\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:SEVERITY_TYPE_MINOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:SEVERITY_TYPE_MAJOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:SEVERITY_TYPE_CRITICAL\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\"\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t  ]",
															"\t\t\t\t\t}",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"problem-name\", ",
															"\t\t\t\t\t\t\t    \"sequence-number\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\t\t    \"timestamp\",",
															"\t\t\t\t\t\t\t    \"problem-severity\"\t",
															"\t\t\t\t]\t\t\t\t\t\t",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-current-problems\": \t\t\t{ \"type\": \"number\" },",
															"\t\t\"time-of-latest-change\": \t\t\t\t{ \"type\": \"string\" }",
															"\t},",
															"\t\"required\": [ \"current-problem-list\",",
															"\t                \"number-of-current-problems\",",
															"\t                \"time-of-latest-change\"",
															"\t]",
															"};",
															"",
															"try {",
															"    if (capability[\"supported-alarm-list\"][0] === \"Supported alarms not yet defined.\") {",
															"        pm.variables.set(\"schemaToBeShortened\", HYBRID_MW_STRUCTURE_CURRENT_PROBLEMS_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"current-problem-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        HYBRID_MW_STRUCTURE_CURRENT_PROBLEMS_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"        CouldHybridMwStructureCurrentProblemsBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldHybridMwStructureCurrentProblemsBeShortened(false);",
															"}",
															"",
															"pm.variables.set(\"schema\", HYBRID_MW_STRUCTURE_CURRENT_PROBLEMS_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputBeLoaded(RemoveAttributeFromRequired, SettingTheRequestVariables, capability) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(capability).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldHybridMwStructureCurrentProblemsBeShortened(success) {",
															"    pm.test(\"CouldHybridMwStructureCurrentProblemsBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentPerformanceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------Checking HybridMwStructureCurrentPerformance for Completeness----------------\");",
															"/****************************************************************************************",
															"* ",
															"* CurrentPerformanceCompleteness",
															"* ",
															"* This Request is for validating HybridMwStructure CurrentPerformance Objects against definition ",
															"* HybridMwStructure_2.0.0-tsp.200122.1300",
															"* as it can be found on https://github.com/openBackhaul/hybridMwStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the CurrentPerformance class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"current-performance\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let HYBRID_MW_STRUCTURE_CURRENT_PERFORMANCE_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"current-performance-data-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"\t\t\t\t\t\"performance-data\": {",
															"\t\t\t\t\t\t\"type\": \"object\", ",
															"\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\"time-period\": \t\t\t\t\t{ \"type\": \"number\" }, \t\t\t\t",
															"\t\t\t\t\t\t\t\"es\": \t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"ses\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, \t\t",
															"\t\t\t\t\t\t\t\"cses\": \t\t\t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"unavailability\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rx-level-min\": \t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"rx-level-max\": \t\t\t\t{ \"type\": \"number\" },\t\t",
															"\t\t\t\t\t\t\t\"rx-level-avg\": \t\t\t\t{ \"type\": \"number\" } \t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\"required\": [ \"time-period\",",
															"    \t\t\t\t\t\t\t\t\t\"es\", ",
															"    \t\t\t\t\t\t\t\t\t\"ses\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"    \t\t\t\t\t\t\t\t\t\"cses\",",
															"    \t\t\t\t\t\t\t\t\t\"unavailability\",\t",
															"    \t\t\t\t\t\t\t\t\t\"rx-level-min\",",
															"    \t\t\t\t\t\t\t\t\t\"rx-level-max\",",
															"    \t\t\t\t\t\t\t\t\t\"rx-level-avg\"",
															"\t\t\t\t\t\t]\t\t\t\t",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"timestamp\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"suspect-interval-flag\": \t\t\t{ \"type\": \"boolean\" },\t\t\t",
															"\t\t\t\t\t\"elapsed-time\": \t\t\t\t\t{ \"type\": \"string\" },\t\t",
															"\t\t\t\t\t\"scanner-id\": \t\t\t\t\t\t{ \"type\": \"string\" },\t ",
															"\t\t\t\t\t\"granularity-period\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t \"hybrid-mw-structure-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\t\t\t \"hybrid-mw-structure-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"\t\t\t\t\t\t\t\t\t\t\t \"hybrid-mw-structure-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"\t\t\t\t\t\t\t\t\t\t\t \"hybrid-mw-structure-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t    ]",
															"\t\t\t\t\t}",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"performance-data\",",
															"    \t\t\t\t\t\t\t\"timestamp\",",
															"    \t\t\t\t\t\t\t\"suspect-interval-flag\",",
															"    \t\t\t\t\t\t\t\"elapsed-time\",",
															"    \t\t\t\t\t\t\t\"scanner-id\",",
															"    \t\t\t\t\t\t\t\"granularity-period\"",
															"\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-current-performance-sets\":\t\t    { \"type\": \"number\" }\t\t",
															"\t},",
															"\t\"required\":\t[ \"current-performance-data-list\",",
															"\t                \"number-of-current-performance-sets\"",
															"\t]",
															"};",
															"",
															"try {",
															"    if (capability[\"performance-monitoring-is-avail\"]===false) {",
															"        pm.variables.set(\"schemaToBeShortened\", HYBRID_MW_STRUCTURE_CURRENT_PERFORMANCE_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"current-performance-data-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        HYBRID_MW_STRUCTURE_CURRENT_PERFORMANCE_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"        CouldHybridMwStructureCurrentPerformanceBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldHybridMwStructureCurrentPerformanceBeShortened(false);",
															"}",
															"pm.variables.set(\"schema\", HYBRID_MW_STRUCTURE_CURRENT_PERFORMANCE_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldHybridMwStructureCurrentPerformanceBeShortened(success) {",
															"    pm.test(\"CouldHybridMwStructureCurrentPerformanceBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "HistoricalPerformancesCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------Checking HybridMwStructureHistoricalPerformances for Completeness---------------\");",
															"/*******************************************************************************",
															"* ",
															"* HistoricalPerformancesCompleteness",
															"* ",
															"* This Request is for validating HybridMwStructure HistoricalPerformances Objects against definition ",
															"* HybridMwStructure_2.0.0-tsp.200122.1300",
															"* as it can be found on https://github.com/openBackhaul/hybridMwStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the HistoricalPerformances class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"*******************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"historical-performances\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let HYBRID_MW_STRUCTURE_HISTORICAL_PERFORMANCES_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"historical-performance-data-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"\t\t\t\t\t\"performance-data\": {",
															"\t\t\t\t\t\t\"type\": \"object\", ",
															"\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\"time-period\": \t\t\t\t\t{ \"type\": \"number\" }, \t\t\t\t",
															"\t\t\t\t\t\t\t\"es\": \t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"ses\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, \t\t",
															"\t\t\t\t\t\t\t\"cses\": \t\t\t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"unavailability\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rx-level-min\": \t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"rx-level-max\": \t\t\t\t{ \"type\": \"number\" },\t\t",
															"\t\t\t\t\t\t\t\"rx-level-avg\": \t\t\t\t{ \"type\": \"number\" }",
															"\t\t\t\t\t\t},\t\t\t\t\t\t",
															"\t\t\t\t\t\t\"required\": [ \"time-period\",",
															"\t\t\t\t\t\t\t\t\t    \"es\", ",
															"\t\t\t\t\t\t\t\t\t    \"ses\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\t\t\t\t    \"cses\",",
															"\t\t\t\t\t\t\t\t\t    \"unavailability\",\t",
															"\t\t\t\t\t\t\t\t\t    \"rx-level-min\",",
															"\t\t\t\t\t\t\t\t\t    \"rx-level-max\",",
															"\t\t\t\t\t\t\t\t\t    \"rx-level-avg\"",
															"\t\t\t\t\t\t]\t\t\t\t\t",
															"\t\t\t\t\t},\t\t",
															"\t\t\t\t\t\"suspect-interval-flag\": \t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\t\"history-data-id\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"period-end-time\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"granularity-period\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t \"hybrid-mw-structure-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\t\t\t \"hybrid-mw-structure-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"\t\t\t\t\t\t\t\t\t\t\t \"hybrid-mw-structure-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"\t\t\t\t\t\t\t\t\t\t\t \"hybrid-mw-structure-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t    ]",
															"\t\t\t\t\t}",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"performance-data\",",
															"\t\t\t\t\t\t\t    \"suspect-interval-flag\",",
															"\t\t\t\t\t\t\t    \"history-data-id\",",
															"\t\t\t\t\t\t\t    \"period-end-time\",",
															"\t\t\t\t\t\t\t    \"granularity-period\"",
															"\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-historical-performance-sets\":\t\t{ \"type\": \"number\" },",
															"\t\t\"time-of-latest-change\": \t\t\t\t        { \"type\": \"string\" }\t",
															"\t},",
															"\t\"required\":\t[ \"historical-performance-data-list\",",
															"\t                \"number-of-historical-performance-sets\",",
															"\t                \"time-of-latest-change\"",
															"\t]",
															"};",
															"",
															"try {",
															"    if (capability[\"performance-monitoring-is-avail\"]===false) {",
															"        pm.variables.set(\"schemaToBeShortened\", HYBRID_MW_STRUCTURE_HISTORICAL_PERFORMANCES_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"historical-performance-data-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        HYBRID_MW_STRUCTURE_HISTORICAL_PERFORMANCES_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"        CouldHybridMwStructureHistoricalPerformancesBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldHybridMwStructureHistoricalPerformancesBeShortened(false);",
															"}",
															"pm.variables.set(\"schema\", HYBRID_MW_STRUCTURE_HISTORICAL_PERFORMANCES_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldHybridMwStructureHistoricalPerformancesBeShortened(success) {",
															"    pm.test(\"CouldHybridMwStructureHistoricalPerformancesBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NetworkRestoration",
									"item": [
										{
											"name": "SettingOriginalInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------------Restoring the Original Interface Configuration Again-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting the Original Interface Configuration Again",
															"* ",
															"* This Request is for restoring the configuration from before the interface validation ",
															"* on the device.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"        ",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration",
															"                                                   );",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    completeClassName = moduleUnderTest + \":\" + technologyUnderTest + \"-configuration\";",
															"    configuration = AddHeadlineToDataObject(configuration, completeClassName);",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched back on original values.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched back on original values.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointHybridMwStructureCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------ReversalPoint of HybridMwStructure Validation for Completeness---------------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointHybridMwStructureCompleteness\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointHybridMwStructureCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-----------------------Terminating HybridMwStructureCompleteness--------------------------\");",
															"/****************************************************************************************",
															" * ",
															" * ExitPoint",
															" * ",
															" * This Request is for clearing the Collection variables and terminating the TestCase",
															" * ",
															" ****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															" * Required Input Parameters",
															" ****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Clearing all Collection Variables for Terminating the TestCase",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Setting up Local Variables and Preparing the Request",
															" ****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({",
															"        key: \"Accept\",",
															"        value: \"application/json\"",
															"    });",
															"} catch (error) {}",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, controller, indexOfDeviceUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function() {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function() {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "HybridMwStructureConfiguration",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n\\n============================ HybridMwStructureConfiguration.1 =============================\");",
															"/****************************************************************************************",
															"* ",
															"* RequestCollection for validating Configuration of HybridMwStructure Objects against definition ",
															"* ",
															"*                   HybridMwStructure_2.0.0-tsp.200122.1300",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/hybridMwStructure/tree/tsp",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Manual Definition of the Mode of Operation of this TestCase",
															"* ",
															"* It is recommended to apply this TestCase on devices on the local (not remote) site",
															"* of the microwave connection, otherwise the management connection might break and ",
															"* configurations, which are done during the validation, cannot be reversed.",
															"* ",
															"****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"one\"; // \"none\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"hybrid-mw-structure-2-0:hybrid-mw-structure-pac\"; // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"CONFIGURATION_VALIDATION_RESULTS = {};",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"pm.collectionVariables.set(\"configurationValidationResults\", CONFIGURATION_VALIDATION_RESULTS);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function () {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function () {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DefiningDummyValuesAndEvaluations()",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n----------Defining DummyValues and Evaluation Criteria in Configuration Validation--------\");",
															"/****************************************************************************************",
															"* ",
															"* Definition of DefiningDummyValuesAndEvaluations()",
															"*  ",
															"* Functions for Defining DummyValues and Evaluation Criteria in all Configuration Validations.",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Provided Collection Variables ",
															"****************************************************************************************/",
															"class Attribute {",
															"    constructor(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString) {",
															"        this.CreatingDummyValueAsaString = CreatingDummyValueAsaString;",
															"        this.EvaluatingFeatureSupportAsaString = EvaluatingFeatureSupportAsaString;",
															"        this.defaultValueForStandardEvaluation = defaultValueForStandardEvaluation;",
															"        this.EvaluatingResultAsaString = EvaluatingResultAsaString;",
															"    }",
															"}",
															"var attributes = [];",
															"",
															"var CreatingDummyValueAsaString;",
															"var EvaluatingFeatureSupportAsaString;",
															"var defaultValueForStandardEvaluation;",
															"var EvaluatingResultAsaString;",
															"var newAttribute;",
															"",
															"// tdm-structure-kind",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of tdm-structure-kind-----------------------\");",
															"",
															"        try {",
															"            let supportedTdmStructureKinds = [];",
															"            for (let i = 0; i < capability[\"supported-tdm-structure-kind-list\"].length; i++) {",
															"                let sampleName = capability[\"supported-tdm-structure-kind-list\"][i][\"tdm-structure-name\"];",
															"                supportedTdmStructureKinds.push(sampleName);",
															"            }",
															"            let configuredTdmStructureKind = configuration[\"tdm-structure-kind\"];",
															"            let configuredTdmStructureKindIndex = supportedTdmStructureKinds.indexOf(configuredTdmStructureKind);",
															"            let potentialDummyValues = supportedTdmStructureKinds;",
															"            if (configuredTdmStructureKindIndex >= 0) {",
															"                potentialDummyValues.splice(configuredTdmStructureKindIndex, 1);",
															"            }",
															"            if (potentialDummyValues.length === 0) {",
															"                potentialDummyValues = [\"cpri7\"];",
															"            }",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"            CouldDummyBeCreated(supportedTdmStructureKinds, configuredTdmStructureKind,",
															"                configuredTdmStructureKindIndex,",
															"                potentialDummyValues,",
															"                dummyValueIndex,",
															"                dummyValue",
															"            );",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"tdm-structure-kind\";",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(supportedTdmStructureKinds, configuredTdmStructureKind,",
															"            configuredTdmStructureKindIndex,",
															"            potentialDummyValues,",
															"            dummyValueIndex,",
															"            dummyValue) {",
															"            pm.test(\"CouldsupportedTdmStructureKindsBeRetrieved\", function () {",
															"                pm.expect(supportedTdmStructureKinds).to.be.an(\"array\");",
															"            });",
															"            pm.test(\"CouldconfiguredTdmStructureKindNameBeRetrieved\", function () {",
															"                pm.expect(configuredTdmStructureKind).to.be.a(\"string\");",
															"            });",
															"            pm.test(\"CouldconfiguredTdmStructureKindIndexBeEvaluated\", function () {",
															"                pm.expect(configuredTdmStructureKindIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldPotentialDummyValuesBeBuild\", function () {",
															"                pm.expect(potentialDummyValues).to.be.an(\"array\");",
															"                pm.expect(potentialDummyValues.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyValueIndexBeCalculated\", function () {",
															"                pm.expect(dummyValueIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var supportedTdmStructureKindList = [];",
															"        var potentialTdmStructureKinds = [\"e1\", \"t1\", \"j1\", \"e3\", \"ds3\", \"stm1\", \"cpri1\",",
															"            \"cpri2\", \"cpri3\", \"cpri4\", \"cpri5\", \"cpri6\", \"cpri7\"",
															"        ];",
															"        var firstSupportedIsFromListOfPotential = false;",
															"        try {",
															"            supportedTdmStructureKindList = capability[\"supported-tdm-structure-kind-list\"];",
															"            if (potentialTdmStructureKinds.includes(supportedTdmStructureKindList[0][\"tdm-structure-name\"]) === true) {",
															"                firstSupportedIsFromListOfPotential = true;",
															"            }",
															"            if ((supportedTdmStructureKindList.length > 0) && (firstSupportedIsFromListOfPotential === true)) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            }",
															"            CouldSupportBeEvaluated(supportedTdmStructureKindList, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        } catch (error) {",
															"            CouldSupportBeEvaluated(supportedTdmStructureKindList, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldSupportBeEvaluated(supportedTdmStructureKindList, capabilitiesAreIndicatingThatFeatureNotSupported) {",
															"            pm.test(\"CouldSupportBeEvaluated\", function () {",
															"                pm.expect(supportedTdmStructureKindList).to.be.an(\"array\");",
															"                pm.expect(supportedTdmStructureKindList.length).to.be.at.least(1);",
															"                pm.expect(capabilitiesAreIndicatingThatFeatureNotSupported).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// number-of-tdm-segments-to-be-reserved",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------------Checking Configuration of number-of-tdm-segments-to-be-reserved--------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"number-of-tdm-segments-to-be-reserved\";",
															"",
															"        try {",
															"            var currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldCurrentConfigurationValuesBeRead(true);",
															"        } catch (error) {",
															"            CouldCurrentConfigurationValuesBeRead(false);",
															"        }",
															"        try {",
															"            var dummyValue = currentValue + ( (Math.floor(Math.random() * 3)) + 1 );",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Function",
															"        function CouldCurrentConfigurationValuesBeRead(success) {",
															"            pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// problem-kind-severity-list/problem-kind-severity",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n---------Checking Configuration of problem-kind-severity-list/problem-kind-severity--------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"problem-kind-severity-list\";",
															"        var DATATYPE_INDEX_UNDER_TEST = 0;",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"problem-kind-name\";",
															"        var ATTRIBUTE_UNDER_TEST = \"problem-kind-severity\";",
															"",
															"        var dummyValue;",
															"        try {",
															"            let currentValue;",
															"            currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"            if (currentValue !== \"pure-ethernet-structure-2-0:SEVERITY_TYPE_MINOR\") {",
															"                dummyValue  = \"pure-ethernet-structure-2-0:SEVERITY_TYPE_MINOR\";",
															"            } else {",
															"                dummyValue = \"pure-ethernet-structure-2-0:SEVERITY_TYPE_MAJOR\";",
															"            }",
															"",
															"            keysOfDatatypeInstanceUnderTest[0].value",
															"                = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[0].key];",
															"        } catch (error) {",
															"            dummyValue = \"-1\";",
															"        }",
															"",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"",
															"        // Self Testing Function",
															"",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var supportedAlarmList = [];",
															"        try {",
															"            supportedAlarmList = capability[\"supported-alarm-list\"];",
															"            if ((supportedAlarmList.length > 0) && (supportedAlarmList[0] !== \"Supported alarms not yet defined.\")) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            }",
															"            CouldSupportedAlarmListBeEvaluated(supportedAlarmList, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        } catch (error) {",
															"            CouldSupportedAlarmListBeEvaluated(supportedAlarmList, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldSupportedAlarmListBeEvaluated(supportedAlarmList, capabilitiesAreIndicatingThatFeatureNotSupported) {",
															"            pm.test(\"CouldSupportedAlarmListBeEvaluated\", function () {",
															"                pm.expect(supportedAlarmList).to.be.an(\"array\");",
															"                pm.expect(supportedAlarmList.length).to.be.at.least(1);",
															"                pm.expect(capabilitiesAreIndicatingThatFeatureNotSupported).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"hybrid-mw-structure-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// g-826-threshold-cross-alarm-list/alarm-raising-threshold",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----Checking Configuration of g-826-threshold-cross-alarm-list/alarm-raising-threshold-----\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"g-826-threshold-cross-alarm-list\";",
															"        var DATATYPE_INDEX_UNDER_TEST = 0;",
															"        var keysOfDatatypeInstanceUnderTest = [{}, {}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"g-826-value-kind\";",
															"        keysOfDatatypeInstanceUnderTest[1].key = \"granularity-period\";",
															"        var ATTRIBUTE_UNDER_TEST = \"alarm-raising-threshold\";",
															"",
															"        var dummyValue;",
															"        try {",
															"            let currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"            dummyValue = currentValue + 1 + Math.floor(Math.random() * 9);",
															"",
															"            keysOfDatatypeInstanceUnderTest[0].value =",
															"                configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[0].key];",
															"            keysOfDatatypeInstanceUnderTest[1].value =",
															"                configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[1].key];",
															"        } catch (error) {",
															"            dummyValue = -1;",
															"        }",
															"",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"",
															"        // Self Testing Function",
															"",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var supportedAlarmList = [];",
															"        try {",
															"            supportedAlarmList = capability[\"supported-alarm-list\"];",
															"            if ((supportedAlarmList.length > 0) && (supportedAlarmList[0] !== \"Supported alarms not yet defined.\")) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            }",
															"            CouldSupportedAlarmListBeEvaluated(supportedAlarmList, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        } catch (error) {",
															"            CouldSupportedAlarmListBeEvaluated(supportedAlarmList, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldSupportedAlarmListBeEvaluated(supportedAlarmList, capabilitiesAreIndicatingThatFeatureNotSupported) {",
															"            pm.test(\"CouldSupportedAlarmListBeEvaluated\", function () {",
															"                pm.expect(supportedAlarmList).to.be.an(\"array\");",
															"                pm.expect(supportedAlarmList.length).to.be.at.least(1);",
															"                pm.expect(capabilitiesAreIndicatingThatFeatureNotSupported).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// g-826-threshold-cross-alarm-list/alarm-clearing-threshold",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----Checking Configuration of g-826-threshold-cross-alarm-list/alarm-clearing-threshold----\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"g-826-threshold-cross-alarm-list\";",
															"        var DATATYPE_INDEX_UNDER_TEST = 0;",
															"        var keysOfDatatypeInstanceUnderTest = [{}, {}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"g-826-value-kind\";",
															"        keysOfDatatypeInstanceUnderTest[1].key = \"granularity-period\";",
															"        var ATTRIBUTE_UNDER_TEST = \"alarm-clearing-threshold\";",
															"",
															"        var dummyValue;",
															"        try {",
															"            let currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"            dummyValue = currentValue + 1 + Math.floor(Math.random() * 9);",
															"",
															"            keysOfDatatypeInstanceUnderTest[0].value =",
															"                configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[0].key];",
															"            keysOfDatatypeInstanceUnderTest[1].value =",
															"                configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[1].key];",
															"        } catch (error) {",
															"            dummyValue = -1;",
															"        }",
															"",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"",
															"        // Self Testing Function",
															"",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var supportedAlarmList = [];",
															"        try {",
															"            supportedAlarmList = capability[\"supported-alarm-list\"];",
															"            if ((supportedAlarmList.length > 0) && (supportedAlarmList[0] !== \"Supported alarms not yet defined.\")) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            }",
															"            CouldSupportedAlarmListBeEvaluated(supportedAlarmList, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        } catch (error) {",
															"            CouldSupportedAlarmListBeEvaluated(supportedAlarmList, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldSupportedAlarmListBeEvaluated(supportedAlarmList, capabilitiesAreIndicatingThatFeatureNotSupported) {",
															"            pm.test(\"CouldSupportedAlarmListBeEvaluated\", function () {",
															"                pm.expect(supportedAlarmList).to.be.an(\"array\");",
															"                pm.expect(supportedAlarmList.length).to.be.at.least(1);",
															"                pm.expect(capabilitiesAreIndicatingThatFeatureNotSupported).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// clearing-threshold-cross-alarms-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n---------------Checking Configuration of clearing-threshold-cross-alarms-is-on-------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"clearing-threshold-cross-alarms-is-on\";",
															"",
															"        // Individual Values Definition ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var supportedAlarmList = [];",
															"        try {",
															"            supportedAlarmList = capability[\"supported-alarm-list\"];",
															"            if ((supportedAlarmList.length > 0) && (supportedAlarmList[0] !== \"Supported alarms not yet defined.\")) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            }",
															"            CouldSupportedAlarmListBeEvaluated(supportedAlarmList, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        } catch (error) {",
															"            CouldSupportedAlarmListBeEvaluated(supportedAlarmList, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldSupportedAlarmListBeEvaluated(supportedAlarmList, capabilitiesAreIndicatingThatFeatureNotSupported) {",
															"            pm.test(\"CouldSupportedAlarmListBeEvaluated\", function () {",
															"                pm.expect(supportedAlarmList).to.be.an(\"array\");",
															"                pm.expect(supportedAlarmList.length).to.be.at.least(1);",
															"                pm.expect(capabilitiesAreIndicatingThatFeatureNotSupported).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// performance-monitoring-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------Checking Configuration of performance-monitoring-is-on------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"",
															"        try {",
															"            var dummyValue = !configuration[\"performance-monitoring-is-on\"];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        try {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"performance-monitoring-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"",
															"pm.collectionVariables.set(\"attributes\", attributes);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function ConvertingThisFunctionToString(functionToBeConverted) {",
															"    let functionAsAString = String(functionToBeConverted);",
															"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
															"    return functionAsAString.slice(indexOfFirstCurly);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointHybridMwStructureConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n------------EntryPoint of HybridMwStructure Validation of Configuration--------------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the HybridMwStructureConfiguration TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].hybridMwStructureList.length;",
															"    var maximumIndexOfLtpUnderTest;",
															"    ",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.min( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointHybridMwStructureConfiguration\");",
															"        console.log(\"Proceeding with terminating HybridMwStructure validation for Configurability.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Provided Collection Variables ",
															"****************************************************************************************/",
															"INITIAL_INDEX_OF_ATTRIBUTE_UNDER_TEST = 0;",
															"",
															"pm.collectionVariables.set(\"indexOfAttributeUnderTest\", INITIAL_INDEX_OF_ATTRIBUTE_UNDER_TEST);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "CollectionInformationLoading",
									"item": [
										{
											"name": "UploadingInterfaceCapability",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Capabilities-------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the Interface Capabilities",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Configuration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Configuration",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceStatus",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n------------------------------Uploading Interface Status----------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Status",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"status\";          // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Displaying the Collection Variables right before starting the validation",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NetworkPreparation",
									"item": [],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "AttributeConfiguration",
									"item": [
										{
											"name": "EntryPointHmsAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the AttributeConfiguration Tests ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var attributes = pm.collectionVariables.get(\"attributes\");",
															"    var indexOfAttributeUnderTest = pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
															"    ",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    ",
															"    CouldTheInputBeLoaded(attributes, indexOfAttributeUnderTest, dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"        ",
															"    if ( indexOfAttributeUnderTest < attributes.length ) {",
															"        postman.setNextRequest();",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointHmsAttributeConfiguration\");",
															"    }",
															"        ",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(attributes, indexOfAttributeUnderTest, dummyUri) {",
															"    pm.test(\"CouldTheAttributesBeLoaded\", function () {",
															"        pm.expect(attributes).to.be.an(\"array\");",
															"    });",
															"    pm.test(\"CouldIndexOfAttributeUnderTestBeLoaded\", function () {",
															"        pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"CouldTheDummyUriBeLoaded\", function () {",
															"        pm.expect(dummyUri).to.be.a(\"string\");",
															"        pm.expect(dummyUri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Writing",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Retrieving DummyCode",
															"****************************************************************************************/",
															"try {",
															"    var dummyCode = JSON.parse(pm.response.code);",
															"    var dummyErrorMessage = \"\";",
															"    if ( Math.floor(dummyCode/100) !== 2 ) {",
															"        var dummyErrorMessage = JSON.parse(pm.response.stream).errors.error[0][\"error-message\"];",
															"    }",
															"    CouldResponseBeRetrieved(dummyCode, dummyErrorMessage);",
															"} catch (error) {",
															"    CouldResponseBeRetrieved();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting Local Variables",
															"****************************************************************************************/   ",
															"pm.variables.set(\"dummyCode\", dummyCode);",
															"pm.variables.set(\"dummyErrorMessage\", dummyErrorMessage);",
															"",
															"    ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldResponseBeRetrieved(responseCode, responseErrorMessage) {",
															"    pm.test(\"CouldTheDummyCodeOfPuttingBeReceived\", function () {",
															"        pm.expect(responseCode).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"CouldTheErrorMessagePuttingBeComposed\", function () {",
															"        pm.expect(responseErrorMessage).to.be.a(\"string\");",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Writing",
															"* ",
															"* This Request is for PUTting an boolean attribute with the alternate value and",
															"* providing this value as dummyValueString to the local Variables.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfWritingAsaString = pm.environment.get(\"PreRequestOfWritingAsaString\");",
															"    eval(PreRequestOfWritingAsaString);",
															"    CouldPreRequestOfWritingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfWritingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfWritingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfWritingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Reading",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Reading",
															"* ",
															"* This Request is for GETting the value of the attributeUnderTest and providing it ",
															"* as ResultValue to the local Variables",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfReadingAsaString = pm.environment.get(\"PreRequestOfReadingAsaString\");",
															"    eval(PreRequestOfReadingAsaString);",
															"    CouldPreRequestOfReadingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfReadingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfReadingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfReadingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PostRequestOfReadingAsaString = pm.environment.get(\"PostRequestOfReadingAsaString\");",
															"    eval(PostRequestOfReadingAsaString);",
															"    CouldPostRequestOfReadingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPostRequestOfReadingBeExecuted();",
															"}",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPostRequestOfReadingBeExecuted(success) {",
															"    pm.test(\"CouldPostRequestOfReadingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Evaluating",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Evaluating",
															"* ",
															"* This Request compares resultValue with dummyValue.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfEvaluatingAsaString = pm.environment.get(\"PreRequestOfEvaluatingAsaString\");",
															"    var dummyCode = pm.variables.get(\"dummyCode\");",
															"    ",
															"    eval(PreRequestOfEvaluatingAsaString);",
															"",
															"    if ( Math.floor(dummyCode/100) !==2 ) {",
															"        postman.setNextRequest(\"ReversalPointHmsAttributeConfiguration\");",
															"    }",
															"    ",
															"    CouldPreRequestOfEvaluatingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfEvaluatingBeExecuted();",
															"}",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfEvaluatingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfEvaluatingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Restoring",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Restoring",
															"* ",
															"* This Request is for Restoring the initial value to the attributeUnderTest",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfRestoringAsaString = pm.environment.get(\"PreRequestOfRestoringAsaString\");",
															"    eval(PreRequestOfRestoringAsaString);",
															"    CouldPreRequestOfRestoringBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfRestoringBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfRestoringBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfRestoringBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Setting Local Variables",
															"****************************************************************************************/   ",
															"pm.variables.clear();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ReversalPointHmsAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"        ",
															"    var indexOfAttributeUnderTest = pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
															"        ",
															"    CouldTheInputBeLoaded(dummyUri, indexOfAttributeUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextAttributeUnderTest = indexOfAttributeUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfAttributeUnderTest\", indexOfPotentialNextAttributeUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointHmsAttributeConfiguration\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfAttributeUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointHmsAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* ExitPoint",
															"* ",
															"* This Request is terminating the Test",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NetworkRestoration",
									"item": [
										{
											"name": "SettingOriginalInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------------Restoring the Original Interface Configuration Again-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting the Original Interface Configuration Again",
															"* ",
															"* This Request is for restoring the configuration from before the interface validation ",
															"* on the device.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"        ",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration",
															"                                                   );",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    completeClassName = moduleUnderTest + \":\" + technologyUnderTest + \"-configuration\";",
															"    configuration = AddHeadlineToDataObject(configuration, completeClassName);",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched back on original values.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched back on original values.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointHybridMwStructureConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------ReversalPoint of HybridMwStructure Validation of Configuration----------------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Console.log of Validation Results",
															" ****************************************************************************************/",
															"let allConfigurationValidationResults = { \"allConfigurationValidationResults\" : configurationValidationResults };",
															"console.log(allConfigurationValidationResults);",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointHybridMwStructureConfiguration\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointHybridMwStructureConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n------------------------Terminating HybridMwStructureConfiguration---------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ExitPoint",
															"* ",
															"* This Request is for clearing the Collection variables and terminating the TestCase",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Clearing all Collection Variables for Terminating the TestCase",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, controller, indexOfDeviceUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "MacInterfaceValidation",
					"item": [
						{
							"name": "MacInterfaceCompleteness",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputCompletenessMac",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n\\n============================ MacInterfaceCompleteness.3 =============================\");",
															"/****************************************************************************************",
															"* ",
															"* RequestCollection for validating Completeness of MacInterface Objects against definition ",
															"* ",
															"*                   MacInterface_1.0.0-tsp.200123.1415",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/macInterface/tree/tsp",
															"* ",
															"****************************************************************************************/",
															" ",
															"",
															"/****************************************************************************************",
															"* Manual Definition of the Mode of Operation of this TestCase",
															"****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"one\"; // \"none\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"mac-interface-1-0:mac-interface-pac\"; // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function() {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function() {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointMacInterfaceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------EntryPoint of MacInterface Validation for Completeness-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the MacInterfaceCompleteness TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].macInterfaceList.length;",
															"    var maximumIndexOfLtpUnderTest;",
															"    ",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.min( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointMacInterfaceCompleteness\");",
															"        console.log(\"Proceeding with terminating MacInterface validation for Completeness.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceCapability",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Capabilities-------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the Interface Capabilities",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Configuration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Configuration",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Displaying the Collection Variables right before starting the validation",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "NetworkPreparation",
									"item": [
										{
											"name": "SwitchingOnMonitoring",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------------Switching Monitoring On----------------------------------\");",
															"/****************************************************************************************",
															" * ",
															" * Switching Monitoring On",
															" * ",
															" * This Request is for activating collection of performance data on the device under",
															" * test, so the data can be retrieved during validating completeness of the implementation",
															" *  ",
															" ****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															" * Required Input Parameters",
															" ****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, capability, configuration);",
															"} catch (error) {",
															"    CouldInputForSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Forming the Body",
															" ****************************************************************************************/",
															"try {",
															"    let requestBodyString = ('{ \"' + moduleUnderTest + ':performance-monitoring-is-on\": true }');",
															"    var requestBody = JSON.parse(requestBodyString);",
															"    CouldRequestBodyBeFormed(requestBody);",
															"} catch (error) {",
															"    CouldRequestBodyBeFormed();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Setting up Local Variables and Calling for Preparation of the Request",
															" ****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(requestBody);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, capability, configuration) {",
															"    pm.test(\"CouldInputForSwitchingMonitoringOnBeLoaded\", function() {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(configuration).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyBeFormed(requestBody) {",
															"    pm.test(\"CouldRequestBodyBeFormed\", function() {",
															"        pm.expect(requestBody).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, ",
															"                                                keysOfDatatypeInstanceUnderTest,",
															"                                                attributeUnterTest, ",
															"                                                contentType,",
															"                                                filteredDepth, ",
															"                                                filteredFields, ",
															"                                                requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"            \"current-problems\", \"current-performance\",",
															"            \"historical-performances\"",
															"        ]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function() {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched on.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched on.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "ValidationRequests",
									"item": [
										{
											"name": "LtpCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-----------------------Checking MacInterfaceLtp for Completeness--------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* This Request is for validating MacInterfaceLtp objects against definition ",
															"*",
															"* ONF Core IM 1.4",
															"*",
															"* as it can be found on https://github.com/openBackhaul/core/tree/tsp",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"\";",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 5;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let MAC_INTERFACE_LTP_SCHEMA = {",
															"    \"type\": \"object\",",
															"\t\"properties\": {",
															"        \"core-model-1-4:logical-termination-point\": {",
															"            \"type\": \"array\",",
															"            \"items\": {",
															"                \"type\": \"object\",",
															"                \"properties\": {",
															"                    \"physical-port-reference\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"string\",",
															"                        },",
															"                    },                    ",
															"                    \"connected-ltp\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                    \"supporting-pc\": \t\t\t\t            \t            { \"type\": \"string\" },",
															"                    \"client-ltp\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"string\",",
															"                        },",
															"                    },",
															"                    \"server-ltp\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"string\",",
															"                        },",
															"                    },",
															"                    \"ltp-direction\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                    \"transfer-capacity-pac\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"embedded-clock\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"run-mode\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"encompassed-clock\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },",
															"                                \"encapsulated-fc\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": {",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"uuid\": \t\t\t\t\t                    { \"type\": \"string\" },",
															"                                            \"local-id\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"lifecycle-state\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                                            \"layer-protocol-name\": \t\t\t                { \"type\": \"string\" },",
															"                                            \"administrative-state\":    \t\t\t\t\t    { \"type\": \"string\" },",
															"                                            \"name\": {",
															"                                                \"type\": \"array\",",
															"                                                \"items\": { ",
															"                                                    \"type\": \"object\",",
															"                                                    \"properties\": {",
															"                                                    },",
															"                                                },",
															"                                            },",
															"                                            \"fc-route\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"operational-state\":     \t\t\t\t\t    { \"type\": \"string\" },",
															"                                            \"administrative-control\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                            \"supporting-pc\": \t\t\t\t            \t{ \"type\": \"string\" },",
															"                                            \"service-priority\": \t\t\t                { \"type\": \"string\" },",
															"                                            \"forwarding-direction\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                            \"fc-port\": {",
															"                                                \"type\": \"array\",",
															"                                                \"items\": {",
															"                                                    \"type\": \"object\",",
															"                                                    \"properties\": {",
															"                                                    },",
															"                                                },",
															"                                            },",
															"                                            \"is-protection-lock-out\": \t\t\t\t\t    { \"type\": \"boolean\" },                    ",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"sync-ltp\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },                                ",
															"                                \"encapsulated-casc\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },",
															"                                \"phase-aligned-clock\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },",
															"                                \"local-id\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"configured-client-capacity\": \t\t\t\t\t{ \"type\": \"string\" },",
															"                                \"fc-blocks-signal-to-lp\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                \"lifecycle-state\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                                \"layer-protocol-name\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                                \"termination-state\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                                \"administrative-state\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                \"lp-direction\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                                \"is-protection-lock-out\":            \t\t\t{ \"type\": \"boolean\" },                    ",
															"                                \"operational-state\":     \t\t\t            { \"type\": \"string\" },",
															"                                \"administrative-control\": \t\t\t\t\t    { \"type\": \"string\" },                                ",
															"                                \"name\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"label\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"extension\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"operational-state\":     \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"administrative-control\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"administrative-state\":    \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"lifecycle-state\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                                \"address\": \t\t\t\t\t                                { \"type\": \"string\" },",
															"                            },",
															"                        },",
															"                    },                  ",
															"                    \"peer-ltp\":              \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"ltp-in-other-view\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"string\",",
															"                        },",
															"                    },",
															"                    \"ltp-augment-1-0:ltp-augment-pac\": {",
															"                        \"type\": \"object\",",
															"                        \"properties\": {",
															"                            \"ltp-augment-capability\": {",
															"                                \"type\": \"object\",",
															"                                \"properties\": {",
															"                                    \"equipment\": {",
															"                                        \"type\": \"array\",",
															"                                        \"items\": { ",
															"                                            \"type\": \"string\",",
															"                                        },",
															"                                    },                    ",
															"                                    \"connector\":                                 { \"type\": \"string\" },",
															"                                },",
															"                                \"required\": [",
															"                                    \"equipment\", ",
															"                                    \"connector\",",
															"                                ],",
															"                            },",
															"                        },",
															"                        \"required\": [",
															"                            \"ltp-augment-capability\", ",
															"                        ],",
															"                    },",
															"                    \"layer-protocol\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": {",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"layer-protocol-name\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                                \"configured-client-capacity\": \t\t\t\t\t{ \"type\": \"string\" },",
															"                                \"lp-direction\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                                \"termination-state\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                                \"configuration-and-switch-control\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },",
															"                                \"is-protection-lock-out\":            \t\t\t{ \"type\": \"boolean\" },",
															"                                \"fc-blocks-signal-to-lp\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                \"mac-interface-1-0:mac-interface-pac\": {",
															"                                    \"type\": \"object\",",
															"                                    \"properties\": {",
															"                                        \"mac-interface-capability\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": { ",
															"                                                \"hardware-mac-address\": \t\t\t\t{ \"type\": \"string\" },",
															"                                                \"mac-address-configuration-is-avail\": \t{ \"type\": \"boolean\" },",
															"                                                \"maximum-frame-size-min\": \t\t\t\t{ \"type\": \"number\" }, ",
															"                                                \"maximum-frame-size-max\": \t\t\t\t{ \"type\": \"number\" }, ",
															"                                                \"supported-frame-format-list\": \t\t\t{ \"type\": \"array\"   },",
															"                                                \"supported-flow-control-mode-list\": \t{ \"type\": \"array\"   },",
															"                                                \"link-loss-forwarding-is-avail\": \t\t{ \"type\": \"boolean\" },",
															"                                                \"broadcast-frame-suppression-is-avail\": { \"type\": \"boolean\" },",
															"                                                \"loop-port-shut-down-is-avail\": \t\t{ \"type\": \"boolean\" },",
															"                                                \"loop-detection-is-avail\": \t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"admin-shut-down-is-avail\": \t\t\t{ \"type\": \"boolean\" },",
															"                                                \"supported-loop-back-kind-list\": \t\t{ \"type\": \"array\"   },",
															"                                                \"maintenance-timer-range\": \t\t\t\t{ \"type\": \"string\" },",
															"                                                \"statistics-is-avail\": \t\t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"supported-alarm-list\": \t\t\t\t{ \"type\": \"array\"   },",
															"                                                \"performance-monitoring-is-avail\": \t\t{ \"type\": \"boolean\" }",
															"                                                }",
															"                                        },",
															"                                        \"mac-interface-configuration\":{",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": { ",
															"                                                \"interface-name\": \t\t\t\t\t\t{ \"type\": \"string\" }, ",
															"                                                \"interface-is-on\": \t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"                                                \"mac-address-configuration-is-on\": \t\t{ \"type\": \"boolean\" }, ",
															"                                                \"configured-mac-address\": \t\t\t\t{ \"type\": \"string\" }, ",
															"                                                \"maximum-frame-size\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"                                                \"fragmentation-allowed\": { \"enum\": [",
															"                                                        \"mac-interface-1-0:FRAGMENTATION_TYPE_DISABLE\",",
															"                                                        \"mac-interface-1-0:FRAGMENTATION_TYPE_ENABLE_256_BYTE\",",
															"                                                        \"mac-interface-1-0:FRAGMENTATION_TYPE_ENABLE_512_BYTE\",",
															"                                                        \"mac-interface-1-0:FRAGMENTATION_TYPE_NOT_YET_DEFINED\"",
															"                                                    ]",
															"                                                },",
															"                                                \"transmitted-frame-format\":  { \"enum\": [",
															"                                                        \"mac-interface-1-0:FRAME_FORMAT_TYPE_ETHERNET_2\",",
															"                                                        \"mac-interface-1-0:FRAME_FORMAT_TYPE_802.2_SNAP\",",
															"                                                        \"mac-interface-1-0:FRAME_FORMAT_TYPE_802.2_LLC\",",
															"                                                        \"mac-interface-1-0:FRAME_FORMAT_TYPE_802.3\",",
															"                                                        \"mac-interface-1-0:FRAME_FORMAT_TYPE_NOT_YET_DEFINED\"",
															"                                                    ]",
															"                                                },",
															"                                                \"flow-control-mode\":  { \"enum\": [",
															"                                                        \"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_NONE\",",
															"                                                        \"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_SEND_ONLY\",",
															"                                                        \"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_RECEIVE_ONLY\",",
															"                                                        \"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_SEND_AND_RECEIVE\",",
															"                                                        \"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_AUTO_NEGOTIATION\",",
															"                                                        \"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_NOT_YET_DEFINED\"",
															"                                                    ]",
															"                                                },",
															"                                                \"link-loss-forwarding-is-on\": \t\t\t{ \"type\": \"boolean\" }, ",
															"                                                \"link-loss-forwarding-delay\": \t\t\t{ \"type\": \"number\" }, ",
															"                                                \"broadcast-frame-suppression-is-on\": \t{ \"type\": \"boolean\" }, ",
															"                                                \"maximum-share-of-broadcast-frames\": \t{ \"type\": \"number\" }, ",
															"                                                \"loop-port-shut-down-is-on\": \t\t\t{ \"type\": \"boolean\" },",
															"                                                \"loop-detection-is-on\": \t\t\t\t{ \"type\": \"boolean\" }, ",
															"                                                \"loop-back-kind-on\": { \"enum\": [ ",
															"                                                        \"mac-interface-1-0:LOOP_BACK_TYPE_NONE\",",
															"                                                        \"mac-interface-1-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\",",
															"                                                        \"mac-interface-1-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\",",
															"                                                        \"mac-interface-1-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"",
															"                                                    ]",
															"                                                },",
															"                                                \"maintenance-timer\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"                                                \"statistics-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"                                                \"problem-kind-severity-list\": \t\t\t{ \"type\": \"array\"   },",
															"                                                \"performance-monitoring-is-on\": \t\t{ \"type\": \"boolean\" }",
															"                                            }",
															"                                        },",
															"                                        \"mac-interface-status\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": { ",
															"                                                \"interface-status\": { \"enum\": [ ",
															"                                                        \"mac-interface-1-0:INTERFACE_STATUS_TYPE_UP\",",
															"                                                        \"mac-interface-1-0:INTERFACE_STATUS_TYPE_DOWN\",",
															"                                                        \"mac-interface-1-0:INTERFACE_STATUS_TYPE_SHUT_DUE_LOOP\",",
															"                                                        \"mac-interface-1-0:INTERFACE_STATUS_TYPE_TESTING\",",
															"                                                        \"mac-interface-1-0:INTERFACE_STATUS_TYPE_UNKNOWN\",",
															"                                                        \"mac-interface-1-0:INTERFACE_STATUS_TYPE_DORMANT\",",
															"                                                        \"mac-interface-1-0:INTERFACE_STATUS_TYPE_NOT_PRESENT\",",
															"                                                        \"mac-interface-1-0:INTERFACE_STATUS_TYPE_LOWER_LAYER_DOWN\",",
															"                                                        \"mac-interface-1-0:INTERFACE_STATUS_TYPE_ADMIN_DOWN\",",
															"                                                        \"mac-interface-1-0:INTERFACE_STATUS_TYPE_NOT_YET_DEFINED\"",
															"                                                    ] ",
															"                                                },",
															"                                                \"mac-address-cur\": \t\t\t\t\t\t{ \"type\": \"string\" }, ",
															"                                                \"received-ethernet-frame-format-cur\": \t{ \"type\": \"string\" }, ",
															"                                                \"flow-control-mode-cur\": { \"enum\": [ ",
															"                                                        \"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_NONE\",",
															"                                                        \"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_SEND_ONLY\",",
															"                                                        \"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_RECEIVE_ONLY\",",
															"                                                        \"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_SEND_AND_RECEIVE\",",
															"                                                        \"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_AUTO_NEGOTIATION\",",
															"                                                        \"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_NOT_YET_DEFINED\"",
															"                                                    ] ",
															"                                                },",
															"                                                \"loop-detection-result\": { \"enum\": [ ",
															"                                                        \"mac-interface-1-0:LOOP_DETECTION_RESULT_TYPE_LOOP_DETECTED\",",
															"                                                        \"mac-interface-1-0:LOOP_DETECTION_RESULT_TYPE_NO_LOOP_DETECTED\",",
															"                                                        \"mac-interface-1-0:LOOP_DETECTION_RESULT_TYPE_DETECTION_SWITCHED_OFF\",",
															"                                                        \"mac-interface-1-0:LOOP_DETECTION_RESULT_TYPE_NOT_YET_DEFINED\"",
															"                                                    ] ",
															"                                                },",
															"                                                \"loop-back-kind-up\": \t\t\t\t\t{ \"type\": \"string\"}, ",
															"                                                \"statistics-is-up\": \t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"                                                \"performance-monitoring-is-up\": \t\t{ \"type\": \"boolean\" }, ",
															"                                                \"timestamp\": \t\t\t\t\t\t\t{ \"type\": \"string\" }, ",
															"                                                \"last-10-sec-frame-input-rate\": \t\t{ \"type\": \"number\" }, ",
															"                                                \"last-10-sec-frame-output-rate\": \t\t{ \"type\": \"number\" }, ",
															"                                                \"total-frames-input\": \t\t\t\t\t{ \"type\": \"string\" }, ",
															"                                                \"total-frames-output\": \t\t\t\t\t{ \"type\": \"string\" }, ",
															"                                                \"forwarded-frames-input\": \t\t\t\t{ \"type\": \"string\" }, ",
															"                                                \"forwarded-frames-output\": \t\t\t\t{ \"type\": \"string\"},",
															"                                                \"unicast-frames-input\": \t\t\t\t{ \"type\": \"string\" }, ",
															"                                                \"unicast-frames-output\": \t\t\t\t{ \"type\": \"string\" },",
															"                                                \"multicast-frames-input\": \t\t\t\t{ \"type\": \"number\" }, ",
															"                                                \"multicast-frames-output\": \t\t\t\t{ \"type\": \"number\" },  ",
															"                                                \"broadcast-frames-input\": \t\t\t\t{ \"type\": \"number\"},",
															"                                                \"broadcast-frames-output\": \t\t\t\t{ \"type\": \"number\" },",
															"                                                \"fragmented-frames-input\": \t\t\t\t{ \"type\": \"number\" },",
															"                                                \"errored-frames-input\": \t\t\t\t{ \"type\": \"number\" },  ",
															"                                                \"errored-frames-output\": \t\t\t\t{ \"type\": \"number\" }, ",
															"                                                \"dropped-frames-input\": \t\t\t\t{ \"type\": \"number\" }, ",
															"                                                \"dropped-frames-output\": \t\t\t\t{ \"type\": \"number\" } ",
															"                                            }",
															"                                        },",
															"                                        \"mac-interface-current-problems\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"current-problem-list\": \t\t\t\t{ \"type\": \"array\"  },",
															"                                                \"number-of-current-problems\": \t\t\t{ \"type\": \"number\" },",
															"                                                \"time-of-latest-change\": \t\t\t\t{ \"type\": \"string\" }",
															"                                            }",
															"                                        },",
															"                                        \"mac-interface-current-performance\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"current-performance-data-list\":\t\t{ \"type\": \"array\"  },",
															"                                                \"number-of-current-performance-sets\": \t{ \"type\": \"number\" }",
															"                                            }",
															"                                        },",
															"                                        \"mac-interface-historical-performances\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"historical-performance-data-list\": \t{ \"type\": \"array\"  },",
															"                                                \"number-of-historical-performance-sets\":{ \"type\": \"number\" },",
															"                                                \"time-of-latest-change\": \t\t\t\t{ \"type\": \"string\" }",
															"                                            }",
															"                                        }",
															"                                    },",
															"                                },",
															"                                \"local-id\": \t\t\t\t\t                            { \"type\": \"string\" },",
															"                                \"name\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"label\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"extension\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"operational-state\":     \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"administrative-control\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"administrative-state\":    \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"lifecycle-state\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                                \"address\": \t\t\t\t\t                                { \"type\": \"string\" },",
															"                            },",
															"                            \"required\": [",
															"                                \"layer-protocol-name\",",
															"                                \"mac-interface-1-0:mac-interface-pac\",",
															"                                \"local-id\",",
															"                            ],",
															"                        },",
															"                    },",
															"                    \"external-managed-id\": {",
															"                        \"type\": \"object\",",
															"                        \"properties\": {",
															"                            \"manager-identifier\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                            \"external-managed-uuid\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                        },",
															"                    },",
															"                    \"local-id\": \t\t\t\t\t                            { \"type\": \"string\" },",
															"                    \"uuid\": \t\t\t\t\t                                { \"type\": \"string\" },",
															"                    \"name\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"value\":                                        { \"type\": \"string\" },",
															"                            },",
															"                        },",
															"                    },",
															"                    \"label\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"value\":                                        { \"type\": \"string\" },",
															"                            },",
															"                        },",
															"                    },",
															"                    \"extension\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"value\":                                        { \"type\": \"string\" },",
															"                            },",
															"                        },",
															"                    },",
															"                    \"operational-state\":     \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"administrative-control\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"administrative-state\":    \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"lifecycle-state\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                    \"address\": \t\t\t\t\t                                { \"type\": \"string\" },",
															"                },",
															"                \"required\": [",
															"                    \"server-ltp\",",
															"                    \"layer-protocol\",",
															"                    \"uuid\",",
															"                    \"name\",",
															"                ],",
															"            },",
															"        },",
															"    },",
															"    \"required\": [",
															"        \"core-model-1-4:logical-termination-point\",",
															"    ]",
															"};",
															"pm.variables.set(\"schema\", MAC_INTERFACE_LTP_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\", \"\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PacCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------Checking MacInterface_Pac for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* PacCompleteness",
															"* ",
															"* This Request is for validating MacInterface Pac Objects against definition ",
															"* MacInterface_1.0.0-tsp.200123.1415",
															"* as it can be found on https://github.com/openBackhaul/macInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the *_Pac class",
															"*  - availability of all attributes in this particular class",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"pac\";         // choose from \"pac\", \"capability\", \"configuration\", ",
															"\t\t\t\t\t\t\t\t\t\t// \"status\", \"current-problems\", \"current-performance\" ",
															"\t\t\t\t\t\t\t\t\t\t// or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 3;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"    \t\t\t\t\t\t\t\tKEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"    \t\t\t\t\t\t\t\tFILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let MAC_INTERFACE_PAC_SCHEMA = {",
															"    \"type\": \"object\",",
															"\t\"properties\": {",
															"        \"mac-interface-capability\": {",
															"\t\t\t\"type\": \"object\",",
															"            \"properties\": { ",
															"\t\t\t\t\"hardware-mac-address\": \t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\"mac-address-configuration-is-avail\": \t{ \"type\": \"boolean\" },",
															"\t\t\t\t\"maximum-frame-size-min\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\"maximum-frame-size-max\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\"supported-frame-format-list\": \t\t\t{ \"type\": \"array\"   },",
															"\t\t\t\t\"supported-flow-control-mode-list\": \t{ \"type\": \"array\"   },",
															"\t\t\t\t\"link-loss-forwarding-is-avail\": \t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\"broadcast-frame-suppression-is-avail\": { \"type\": \"boolean\" },",
															"\t\t\t\t\"loop-port-shut-down-is-avail\": \t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\"loop-detection-is-avail\": \t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\"admin-shut-down-is-avail\": \t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\"supported-loop-back-kind-list\": \t\t{ \"type\": \"array\"   },",
															"\t\t\t\t\"maintenance-timer-range\": \t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\"statistics-is-avail\": \t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\"supported-alarm-list\": \t\t\t\t{ \"type\": \"array\"   },",
															"\t\t\t\t\"performance-monitoring-is-avail\": \t\t{ \"type\": \"boolean\" }",
															"\t\t\t\t}",
															"\t\t},",
															"\t\t\"mac-interface-configuration\":{",
															"\t\t\t\"type\": \"object\",",
															"            \"properties\": { ",
															"\t\t\t\t\"interface-name\": \t\t\t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\t\t\"interface-is-on\": \t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\t\t\"mac-address-configuration-is-on\": \t\t{ \"type\": \"boolean\" }, ",
															"\t\t\t\t\"configured-mac-address\": \t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\t\t\"maximum-frame-size\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\"fragmentation-allowed\": { \"enum\": [",
															"\t\t\t\t\t\t\"mac-interface-1-0:FRAGMENTATION_TYPE_DISABLE\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:FRAGMENTATION_TYPE_ENABLE_256_BYTE\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:FRAGMENTATION_TYPE_ENABLE_512_BYTE\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:FRAGMENTATION_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t]",
															"\t\t\t\t},",
															"\t\t\t\t\"transmitted-frame-format\":  { \"enum\": [",
															"\t\t\t\t\t\t\"mac-interface-1-0:FRAME_FORMAT_TYPE_ETHERNET_2\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:FRAME_FORMAT_TYPE_802.2_SNAP\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:FRAME_FORMAT_TYPE_802.2_LLC\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:FRAME_FORMAT_TYPE_802.3\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:FRAME_FORMAT_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t]",
															"\t\t\t\t},",
															"\t\t\t\t\"flow-control-mode\":  { \"enum\": [",
															"\t\t\t\t\t\t\"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_NONE\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_SEND_ONLY\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_RECEIVE_ONLY\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_SEND_AND_RECEIVE\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_AUTO_NEGOTIATION\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t]",
															"\t\t\t\t},",
															"\t\t\t\t\"link-loss-forwarding-is-on\": \t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\t\t\"link-loss-forwarding-delay\": \t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\"broadcast-frame-suppression-is-on\": \t{ \"type\": \"boolean\" }, ",
															"\t\t\t\t\"maximum-share-of-broadcast-frames\": \t{ \"type\": \"number\" }, ",
															"\t\t\t\t\"loop-port-shut-down-is-on\": \t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\"loop-detection-is-on\": \t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\t\t\"loop-back-kind-on\": { \"enum\": [ ",
															"\t\t\t\t\t\t\"mac-interface-1-0:LOOP_BACK_TYPE_NONE\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t]",
															"\t\t\t\t},",
															"\t\t\t\t\"maintenance-timer\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\"statistics-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\t\t\"problem-kind-severity-list\": \t\t\t{ \"type\": \"array\"   },",
															"\t\t\t\t\"performance-monitoring-is-on\": \t\t{ \"type\": \"boolean\" }",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"mac-interface-status\": {",
															"\t\t\t\"type\": \"object\",",
															"            \"properties\": { ",
															"\t\t\t\t\"interface-status\": { \"enum\": [ ",
															"\t\t\t\t\t\t\"mac-interface-1-0:INTERFACE_STATUS_TYPE_UP\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:INTERFACE_STATUS_TYPE_DOWN\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:INTERFACE_STATUS_TYPE_SHUT_DUE_LOOP\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:INTERFACE_STATUS_TYPE_TESTING\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:INTERFACE_STATUS_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:INTERFACE_STATUS_TYPE_DORMANT\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:INTERFACE_STATUS_TYPE_NOT_PRESENT\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:INTERFACE_STATUS_TYPE_LOWER_LAYER_DOWN\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:INTERFACE_STATUS_TYPE_ADMIN_DOWN\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:INTERFACE_STATUS_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t] ",
															"\t\t\t\t},",
															"\t\t\t\t\"mac-address-cur\": \t\t\t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\t\t\"received-ethernet-frame-format-cur\": \t{ \"type\": \"string\" }, ",
															"\t\t\t\t\"flow-control-mode-cur\": { \"enum\": [ ",
															"\t\t\t\t\t\t\"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_NONE\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_SEND_ONLY\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_RECEIVE_ONLY\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_SEND_AND_RECEIVE\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_AUTO_NEGOTIATION\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t] ",
															"\t\t\t\t},",
															"\t\t\t\t\"loop-detection-result\": { \"enum\": [ ",
															"\t\t\t\t\t\t\"mac-interface-1-0:LOOP_DETECTION_RESULT_TYPE_LOOP_DETECTED\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:LOOP_DETECTION_RESULT_TYPE_NO_LOOP_DETECTED\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:LOOP_DETECTION_RESULT_TYPE_DETECTION_SWITCHED_OFF\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:LOOP_DETECTION_RESULT_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t] ",
															"\t\t\t\t},",
															"\t\t\t\t\"loop-back-kind-up\": \t\t\t\t\t{ \"type\": \"string\"}, ",
															"\t\t\t\t\"statistics-is-up\": \t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\t\t\"performance-monitoring-is-up\": \t\t{ \"type\": \"boolean\" }, ",
															"\t\t\t\t\"timestamp\": \t\t\t\t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\t\t\"last-10-sec-frame-input-rate\": \t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\"last-10-sec-frame-output-rate\": \t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\"total-frames-input\": \t\t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\t\t\"total-frames-output\": \t\t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\t\t\"forwarded-frames-input\": \t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\t\t\"forwarded-frames-output\": \t\t\t\t{ \"type\": \"string\"},",
															"\t\t\t\t\"unicast-frames-input\": \t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\t\t\"unicast-frames-output\": \t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\"multicast-frames-input\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\"multicast-frames-output\": \t\t\t\t{ \"type\": \"number\" },  ",
															"\t\t\t\t\"broadcast-frames-input\": \t\t\t\t{ \"type\": \"number\"},",
															"\t\t\t\t\"broadcast-frames-output\": \t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\"fragmented-frames-input\": \t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\"errored-frames-input\": \t\t\t\t{ \"type\": \"number\" },  ",
															"\t\t\t\t\"errored-frames-output\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\"dropped-frames-input\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\"dropped-frames-output\": \t\t\t\t{ \"type\": \"number\" } ",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"mac-interface-current-problems\": {",
															"\t\t\t\"type\": \"object\",",
															"            \"properties\": {",
															"\t\t\t\t\"current-problem-list\": \t\t\t\t{ \"type\": \"array\"  },",
															"\t\t\t\t\"number-of-current-problems\": \t\t\t{ \"type\": \"number\" },",
															"                \"time-of-latest-change\": \t\t\t\t{ \"type\": \"string\" }",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"mac-interface-current-performance\": {",
															"\t\t\t\"type\": \"object\",",
															"            \"properties\": {",
															"\t\t\t\t\"current-performance-data-list\":\t\t{ \"type\": \"array\"  },",
															"\t\t\t\t\"number-of-current-performance-sets\": \t{ \"type\": \"number\" }",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"mac-interface-historical-performances\": {",
															"\t\t\t\"type\": \"object\",",
															"            \"properties\": {",
															"\t\t\t\t\"historical-performance-data-list\": \t{ \"type\": \"array\"  },",
															"\t\t\t\t\"number-of-historical-performance-sets\":{ \"type\": \"number\" },",
															"                \"time-of-latest-change\": \t\t\t\t{ \"type\": \"string\" }",
															"\t\t\t}",
															"\t\t}",
															"\t},",
															"\t\"required\": [\"mac-interface-capability\",",
															"\t\t\t\t\t\"mac-interface-configuration\",",
															"\t\t\t\t\t\"mac-interface-status\",",
															"\t\t\t\t\t\"mac-interface-current-problems\",",
															"\t\t\t\t\t\"mac-interface-current-performance\",",
															"\t\t\t\t\t\"mac-interface-historical-performances\"",
															"\t\t\t\t]",
															"};",
															"pm.variables.set(\"schema\", MAC_INTERFACE_PAC_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"    attributeUnterTest, contentType,",
															"    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function () {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"            \"current-problems\", \"current-performance\",",
															"            \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function () {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function () {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function () {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function () {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function () {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function () {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function () {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CapabilityCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------------Checking MacInterfaceCapability for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* CapabilityCompleteness",
															"* ",
															"* This Request is for validating MacInterface Capability Objects against definition ",
															"* MacInterface_1.0.0-tsp.200123.1415",
															"* as it can be found on https://github.com/openBackhaul/macInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Capability class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"\tvar SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"\tCouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"\tCouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"\t\t\t\t\t\t\t\t\t\t\t// \"status\", \"current-problems\", \"current-performance\" ",
															"\t\t\t\t\t\t\t\t\t\t\t// or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"\t\t\t\t\t\t\t\t\tKEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"\t\t\t\t\t\t\t\t\tFILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let MAC_INTERFACE_CAPABILITY_SCHEMA = {",
															"\t\"type\": \"object\", ",
															"\t\"properties\": { ",
															"\t\t\"hardware-mac-address\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\"mac-address-configuration-is-avail\": \t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"maximum-frame-size-min\": \t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"maximum-frame-size-max\": \t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"supported-frame-format-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": { \"enum\": [ ",
															"\t\t\t\t\t\t\"mac-interface-1-0:FRAME_FORMAT_TYPE_ETHERNET_2\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:FRAME_FORMAT_TYPE_802.2_SNAP\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:FRAME_FORMAT_TYPE_802.2_LLC\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:FRAME_FORMAT_TYPE_802.3\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:FRAME_FORMAT_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t] ",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"supported-flow-control-mode-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": { \"enum\": [ ",
															"\t\t\t\t\t\t\"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_NONE\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_SEND_ONLY\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_RECEIVE_ONLY\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_SEND_AND_RECEIVE\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_AUTO_NEGOTIATION\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t] ",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"link-loss-forwarding-is-avail\": \t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"broadcast-frame-suppression-is-avail\": \t\t{ \"type\": \"boolean\" },",
															"\t\t\"loop-port-shut-down-is-avail\": \t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"loop-detection-is-avail\": \t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"admin-shut-down-is-avail\": \t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"supported-loop-back-kind-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": { \"enum\": [ ",
															"\t\t\t\t\t\t\"mac-interface-1-0:LOOP_BACK_TYPE_NONE\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t] ",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"maintenance-timer-range\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\"statistics-is-avail\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"supported-alarm-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\t\"items\": {",
															"\t\t\t} ",
															"\t\t},",
															"\t\t\"performance-monitoring-is-avail\": \t\t\t\t{ \"type\": \"boolean\" }",
															"\t},",
															"\t\"required\": [  \"hardware-mac-address\",",
															"\t\t\t\t\t\"mac-address-configuration-is-avail\", ",
															"\t\t\t\t\t\"maximum-frame-size-min\", ",
															"\t\t\t\t\t\"maximum-frame-size-max\", ",
															"\t\t\t\t\t\"supported-frame-format-list\",",
															"\t\t\t\t\t\"supported-flow-control-mode-list\",\t",
															"\t\t\t\t\t\"link-loss-forwarding-is-avail\", ",
															"\t\t\t\t\t\"broadcast-frame-suppression-is-avail\", ",
															"\t\t\t\t\t\"loop-port-shut-down-is-avail\", ",
															"\t\t\t\t\t\"loop-detection-is-avail\", ",
															"\t\t\t\t\t\"admin-shut-down-is-avail\", ",
															"\t\t\t\t\t\"supported-loop-back-kind-list\",",
															"\t\t\t\t\t\"maintenance-timer-range\",",
															"\t\t\t\t\t\"statistics-is-avail\", ",
															"\t\t\t\t\t\"supported-alarm-list\",",
															"\t\t\t\t\t\"performance-monitoring-is-avail\"",
															"\t\t\t  ]",
															"};",
															"pm.variables.set(\"schema\", MAC_INTERFACE_CAPABILITY_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"\teval(SettingTheRequestVariables)();",
															"\tCouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"\tCouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"\tpm.test(\"CouldInputBeLoaded\", function () {",
															"\t\tpm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"\t\tpm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"\t});",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"\tattributeUnterTest, contentType,",
															"\tfilteredDepth, filteredFields, requestBody) {",
															"\tpm.test(\"IsValueOfClassUnderTestCorrect\", function () {",
															"\t\tpm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"\t\t\t\"current-problems\", \"current-performance\",",
															"\t\t\t\"historical-performances\"]);",
															"\t});",
															"\tpm.test(\"IsValueOfDatatypeUnderTestCorrect\", function () {",
															"\t\tpm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function () {",
															"\t\tpm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"\t});",
															"\tpm.test(\"IsValueOfAttributeUnderTestCorrect\", function () {",
															"\t\tpm.expect(attributeUnterTest).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfContentTypeCorrect\", function () {",
															"\t\tpm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"\t});",
															"\tpm.test(\"IsValueOfFilteredDepthCorrect\", function () {",
															"\t\tpm.expect(filteredDepth).to.be.a(\"number\");",
															"\t});",
															"\tpm.test(\"IsValueOfFilteredFieldsCorrect\", function () {",
															"\t\tpm.expect(filteredFields).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfRequestBodyCorrect\", function () {",
															"\t\tpm.expect(requestBody).to.be.a(\"string\");",
															"\t});",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"\tpm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"\t\tpm.expect(success).to.be.true;",
															"\t});",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ConfigurationCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n----------------Checking MacInterfaceConfiguration for Completeness------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ConfigurationCompleteness",
															"* ",
															"* This Request is for validating MacInterface Configuration Objects against definition ",
															"* MacInterface_1.0.0-tsp.200123.1415",
															"* as it can be found on https://github.com/openBackhaul/macInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Configuration class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"\t\t\t\t\t\t\t\t\t\t\t// \"status\", \"current-problems\", \"current-performance\" ",
															"\t\t\t\t\t\t\t\t\t\t\t// or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"\t\t\t\t\t\t\t\t\tKEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"\t\t\t\t\t\t\t\t\tFILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let MAC_INTERFACE_CONFIGURATION_SCHEMA = {",
															"   \"type\": \"object\",",
															"   \"properties\": {",
															"\t\t\"interface-name\": \t\t\t\t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\"interface-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"mac-address-configuration-is-on\": \t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"configured-mac-address\": \t\t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\"maximum-frame-size\": \t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"fragmentation-allowed\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"mac-interface-1-0:FRAGMENTATION_TYPE_DISABLE\",",
															"\t\t\t\t\t\t\t\t\t\"mac-interface-1-0:FRAGMENTATION_TYPE_ENABLE_256_BYTE\",",
															"\t\t\t\t\t\t\t\t\t\"mac-interface-1-0:FRAGMENTATION_TYPE_ENABLE_512_BYTE\",",
															"\t\t\t\t\t\t\t\t\t\"mac-interface-1-0:FRAGMENTATION_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t]",
															"\t\t},",
															"\t\t\"transmitted-frame-format\":  { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"mac-interface-1-0:FRAME_FORMAT_TYPE_ETHERNET_2\",",
															"\t\t\t\t\t\t\t\t\t\"mac-interface-1-0:FRAME_FORMAT_TYPE_802.2_SNAP\",",
															"\t\t\t\t\t\t\t\t\t\"mac-interface-1-0:FRAME_FORMAT_TYPE_802.2_LLC\",",
															"\t\t\t\t\t\t\t\t\t\"mac-interface-1-0:FRAME_FORMAT_TYPE_802.3\",",
															"\t\t\t\t\t\t\t\t\t\"mac-interface-1-0:FRAME_FORMAT_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t]",
															"\t\t},",
															"\t\t\"flow-control-mode\":  { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\t\"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_SEND_ONLY\",",
															"\t\t\t\t\t\t\t\t\t\"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_RECEIVE_ONLY\",",
															"\t\t\t\t\t\t\t\t\t\"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_SEND_AND_RECEIVE\",",
															"\t\t\t\t\t\t\t\t\t\"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_AUTO_NEGOTIATION\",",
															"\t\t\t\t\t\t\t\t\t\"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t]",
															"\t\t},",
															"\t\t\"link-loss-forwarding-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"link-loss-forwarding-delay\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"broadcast-frame-suppression-is-on\": \t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"maximum-share-of-broadcast-frames\": \t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"loop-port-shut-down-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"loop-detection-is-on\": \t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"loop-back-kind-on\": { \"enum\": [ ",
															"\t\t\t\t\t\t\t\"mac-interface-1-0:LOOP_BACK_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\"mac-interface-1-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\"mac-interface-1-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\"mac-interface-1-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t]",
															"\t\t}, ",
															"\t\t\"maintenance-timer\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"statistics-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"problem-kind-severity-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\"problem-kind-name\": \t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"problem-kind-severity\": { \"enum\": [ ",
															"\t\t\t\t\t\t\"mac-interface-1-0:SEVERITY_TYPE_NON-ALARMED\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:SEVERITY_TYPE_WARNING\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:SEVERITY_TYPE_MAJOR\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:SEVERITY_TYPE_MINOR\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:SEVERITY_TYPE_CRITICAL\",",
															"\t\t\t\t\t\t\"mac-interface-1-0:SEVERITY_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t]",
															"\t\t\t\t\t}",
															"\t\t\t\t},",
															"\t\t\t\t\"required\": [ \"problem-kind-name\",",
															"\t\t\t\t\t\t\t\t\"problem-kind-severity\"",
															"\t\t\t\t\t\t\t]",
															"\t\t\t}",
															"\t\t}, ",
															"\t\t\"performance-monitoring-is-on\": \t\t\t\t{ \"type\": \"boolean\" }",
															"\t},",
															"\t\"required\": [ \"interface-name\", ",
															"\t\t\t\t\t\"interface-is-on\", ",
															"\t\t\t\t\t\"mac-address-configuration-is-on\", ",
															"\t\t\t\t\t\"configured-mac-address\", ",
															"\t\t\t\t\t\"maximum-frame-size\", ",
															"\t\t\t\t\t\"fragmentation-allowed\",",
															"\t\t\t\t\t\"transmitted-frame-format\",",
															"\t\t\t\t\t\"flow-control-mode\",",
															"\t\t\t\t\t\"link-loss-forwarding-is-on\", ",
															"\t\t\t\t\t\"link-loss-forwarding-delay\", ",
															"\t\t\t\t\t\"broadcast-frame-suppression-is-on\",",
															"\t\t\t\t\t\"maximum-share-of-broadcast-frames\",",
															"\t\t\t\t\t\"loop-port-shut-down-is-on\",",
															"\t\t\t\t\t\"loop-detection-is-on\", ",
															"\t\t\t\t\t\"loop-back-kind-on\",",
															"\t\t\t\t\t\"maintenance-timer\",",
															"\t\t\t\t\t\"statistics-is-on\", ",
															"\t\t\t\t\t\"problem-kind-severity-list\",",
															"\t\t\t\t\t\"performance-monitoring-is-on\"",
															"\t\t\t]",
															"};",
															"",
															"try {",
															"    if (capability[\"supported-alarm-list\"][0] === \"Supported alarms not yet defined.\") {",
															"        pm.variables.set(\"schemaToBeShortened\", MAC_INTERFACE_CONFIGURATION_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"problem-kind-severity-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        MAC_INTERFACE_CONFIGURATION_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"        CouldMacInterfaceConfigurationBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldMacInterfaceConfigurationBeShortened(false);",
															"}",
															"",
															"pm.variables.set(\"schema\", MAC_INTERFACE_CONFIGURATION_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"\teval(SettingTheRequestVariables)();",
															"\tCouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"\tCouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"\tattributeUnterTest, contentType,",
															"\tfilteredDepth, filteredFields, requestBody) {",
															"\tpm.test(\"IsValueOfClassUnderTestCorrect\", function () {",
															"\t\tpm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"\t\t\t\"current-problems\", \"current-performance\",",
															"\t\t\t\"historical-performances\"]);",
															"\t});",
															"\tpm.test(\"IsValueOfDatatypeUnderTestCorrect\", function () {",
															"\t\tpm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function () {",
															"\t\tpm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"\t});",
															"\tpm.test(\"IsValueOfAttributeUnderTestCorrect\", function () {",
															"\t\tpm.expect(attributeUnterTest).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfContentTypeCorrect\", function () {",
															"\t\tpm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"\t});",
															"\tpm.test(\"IsValueOfFilteredDepthCorrect\", function () {",
															"\t\tpm.expect(filteredDepth).to.be.a(\"number\");",
															"\t});",
															"\tpm.test(\"IsValueOfFilteredFieldsCorrect\", function () {",
															"\t\tpm.expect(filteredFields).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfRequestBodyCorrect\", function () {",
															"\t\tpm.expect(requestBody).to.be.a(\"string\");",
															"\t});",
															"}",
															"",
															"function CouldMacInterfaceConfigurationBeShortened(success) {",
															"    pm.test(\"CouldMacInterfaceConfigurationBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"\tpm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"\t\tpm.expect(success).to.be.true;",
															"\t});",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "StatusCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------------Checking MacInterfaceStatus for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* StatusCompleteness",
															"* ",
															"* This Request is for validating MacInterface Status Objects against definition ",
															"* MacInterface_1.0.0-tsp.200123.1415",
															"* as it can be found on https://github.com/openBackhaul/macInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Status class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"status\";          // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let MAC_INTERFACE_STATUS_SCHEMA = {",
															"\t\"type\": \"object\", ",
															"\t\"properties\": { ",
															"\t\t\"interface-status\": { \"enum\": [ ",
															"\t\t\t\t\"mac-interface-1-0:INTERFACE_STATUS_TYPE_UP\",",
															"\t\t\t\t\"mac-interface-1-0:INTERFACE_STATUS_TYPE_DOWN\",",
															"\t\t\t\t\"mac-interface-1-0:INTERFACE_STATUS_TYPE_SHUT_DUE_LOOP\",",
															"\t\t\t\t\"mac-interface-1-0:INTERFACE_STATUS_TYPE_TESTING\",",
															"\t\t\t\t\"mac-interface-1-0:INTERFACE_STATUS_TYPE_UNKNOWN\",",
															"\t\t\t\t\"mac-interface-1-0:INTERFACE_STATUS_TYPE_DORMANT\",",
															"\t\t\t\t\"mac-interface-1-0:INTERFACE_STATUS_TYPE_NOT_PRESENT\",",
															"\t\t\t\t\"mac-interface-1-0:INTERFACE_STATUS_TYPE_LOWER_LAYER_DOWN\",",
															"\t\t\t\t\"mac-interface-1-0:INTERFACE_STATUS_TYPE_ADMIN_DOWN\",",
															"\t\t\t\t\"mac-interface-1-0:INTERFACE_STATUS_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t] ",
															"\t\t}, ",
															"\t\t\"mac-address-cur\": \t\t\t\t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\"received-ethernet-frame-format-cur\": \t\t{ \"type\": \"string\" }, ",
															"\t\t\"flow-control-mode-cur\": { \"enum\": [ ",
															"\t\t\t\t\"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_NONE\",",
															"\t\t\t\t\"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_SEND_ONLY\",",
															"\t\t\t\t\"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_RECEIVE_ONLY\",",
															"\t\t\t\t\"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_SEND_AND_RECEIVE\",",
															"\t\t\t\t\"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_AUTO_NEGOTIATION\",",
															"\t\t\t\t\"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t] ",
															"\t\t},",
															"\t\t\"loop-detection-result\": { \"enum\": [ ",
															"\t\t\t\t\"mac-interface-1-0:LOOP_DETECTION_RESULT_TYPE_LOOP_DETECTED\",",
															"\t\t\t\t\"mac-interface-1-0:LOOP_DETECTION_RESULT_TYPE_NO_LOOP_DETECTED\",",
															"\t\t\t\t\"mac-interface-1-0:LOOP_DETECTION_RESULT_TYPE_DETECTION_SWITCHED_OFF\",",
															"\t\t\t\t\"mac-interface-1-0:LOOP_DETECTION_RESULT_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t] ",
															"\t\t},",
															"\t\t\"loop-back-kind-up\": \t\t\t\t\t\t{ \"type\": \"string\"}, ",
															"\t\t\"statistics-is-up\": \t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"performance-monitoring-is-up\": \t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"timestamp\": \t\t\t\t\t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\"last-10-sec-frame-input-rate\": \t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"last-10-sec-frame-output-rate\": \t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"total-frames-input\": \t\t\t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\"total-frames-output\": \t\t\t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\"forwarded-frames-input\": \t\t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\"forwarded-frames-output\": \t\t\t\t\t{ \"type\": \"string\"},",
															"\t\t\"unicast-frames-input\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\"unicast-frames-output\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\"multicast-frames-input\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"multicast-frames-output\": \t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"broadcast-frames-input\": \t\t\t\t\t{ \"type\": \"number\"},",
															"\t\t\"broadcast-frames-output\": \t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"fragmented-frames-input\": \t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"errored-frames-input\": \t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"errored-frames-output\": \t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"dropped-frames-input\": \t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"dropped-frames-output\": \t\t\t\t\t{ \"type\": \"number\" } ",
															"\t},",
															"\t\"required\": [ \"interface-status\", ",
															"\t\t\t\t\t\"mac-address-cur\", ",
															"\t\t\t\t\t\"received-ethernet-frame-format-cur\", ",
															"\t\t\t\t\t\"flow-control-mode-cur\",",
															"\t\t\t\t\t\"loop-detection-result\",",
															"\t\t\t\t\t\"loop-back-kind-up\", ",
															"\t\t\t\t\t\"statistics-is-up\", ",
															"\t\t\t\t\t\"performance-monitoring-is-up\", ",
															"\t\t\t\t\t\"timestamp\", ",
															"\t\t\t\t\t\"last-10-sec-frame-input-rate\", ",
															"\t\t\t\t\t\"last-10-sec-frame-output-rate\", ",
															"\t\t\t\t\t\"total-frames-input\", ",
															"\t\t\t\t\t\"total-frames-output\", ",
															"\t\t\t\t\t\"forwarded-frames-input\", ",
															"\t\t\t\t\t\"forwarded-frames-output\",",
															"\t\t\t\t\t\"unicast-frames-input\", ",
															"\t\t\t\t\t\"unicast-frames-output\",",
															"\t\t\t\t\t\"multicast-frames-input\", ",
															"\t\t\t\t\t\"multicast-frames-output\",  ",
															"\t\t\t\t\t\"broadcast-frames-input\",",
															"\t\t\t\t\t\"broadcast-frames-output\",",
															"\t\t\t\t\t\"fragmented-frames-input\",",
															"\t\t\t\t\t\"errored-frames-input\",  ",
															"\t\t\t\t\t\"errored-frames-output\", ",
															"\t\t\t\t\t\"dropped-frames-input\", ",
															"\t\t\t\t\t\"dropped-frames-output\"",
															"  \t\t\t\t]",
															"};",
															"pm.variables.set(\"schema\", MAC_INTERFACE_STATUS_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentProblemsCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------Checking MacInterfaceCurrentProblems for Completeness-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* CurrentProblemsCompleteness",
															"* ",
															"* This Request is for validating MacInterface CurrentProblems Objects against definition ",
															"* MacInterface_1.0.0-tsp.200123.1415",
															"* as it can be found on https://github.com/openBackhaul/macInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the CurrentProblems class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"current-problems\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let MAC_INTERFACE_CURRENT_PROBLEMS_SCHEMA = {",
															"   \"type\": \"object\", ",
															"   \"properties\": {",
															"\t\t\"current-problem-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\"problem-name\":           \t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"sequence-number\": \t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\"timestamp\": \t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"problem-severity\": { \"enum\": [ ",
															"\t\t\t\t\t\t\t\t\t\t\"mac-interface-1-0:SEVERITY_TYPE_NON-ALARMED\",",
															"\t\t\t\t\t\t\t\t\t\t\"mac-interface-1-0:SEVERITY_TYPE_WARNING\",",
															"\t\t\t\t\t\t\t\t\t\t\"mac-interface-1-0:SEVERITY_TYPE_MAJOR\",",
															"\t\t\t\t\t\t\t\t\t\t\"mac-interface-1-0:SEVERITY_TYPE_MINOR\",",
															"\t\t\t\t\t\t\t\t\t\t\"mac-interface-1-0:SEVERITY_TYPE_CRITICAL\",",
															"\t\t\t\t\t\t\t\t\t\t\"mac-interface-1-0:SEVERITY_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t\t}",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"problem-name\", ",
															"\t\t\t\t\t\t\t    \"sequence-number\",",
															"\t\t\t\t\t\t\t    \"timestamp\",",
															"\t\t\t\t\t\t\t    \"problem-severity\"",
															"\t\t\t\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-current-problems\": \t\t\t{ \"type\": \"number\" },",
															"\t\t\"time-of-latest-change\": \t\t\t\t{ \"type\": \"string\" }",
															"\t},",
															"\t\"required\": [ \"current-problem-list\",",
															"\t                \"number-of-current-problems\",",
															"\t                \"time-of-latest-change\"",
															"\t]",
															"};",
															"",
															"try {",
															"    if (capability[\"supported-alarm-list\"][0] === \"Supported alarms not yet defined.\") {",
															"        pm.variables.set(\"schemaToBeShortened\", MAC_INTERFACE_CURRENT_PROBLEMS_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"current-problem-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        MAC_INTERFACE_CURRENT_PROBLEMS_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"        CouldMacInterfaceCurrentProblemsBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldMacInterfaceCurrentProblemsBeShortened(false);",
															"}",
															"pm.variables.set(\"schema\", MAC_INTERFACE_CURRENT_PROBLEMS_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldMacInterfaceCurrentProblemsBeShortened(success) {",
															"    pm.test(\"CouldMacInterfaceCurrentProblemsBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentPerformanceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------Checking MacInterfaceCurrentPerformance for Completeness----------------\");",
															"/****************************************************************************************",
															"* ",
															"* CurrentPerformanceCompleteness",
															"* ",
															"* This Request is for validating MacInterface CurrentPerformance Objects against definition ",
															"* MacInterface_1.0.0-tsp.200123.1415",
															"* as it can be found on https://github.com/openBackhaul/macInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the CurrentPerformance class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"\tvar RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"\tvar SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"\tvar capability = pm.collectionVariables.get(\"capability\");",
															"\tCouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"\tCouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"current-performance\"; // choose from \"pac\", \"capability\", \"configuration\", ",
															"\t\t\t\t\t\t\t\t\t\t\t\t// \"status\", \"current-problems\", \"current-performance\" ",
															"\t\t\t\t\t\t\t\t\t\t\t\t// or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"\t\t\t\t\t\t\t\t\tKEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"\t\t\t\t\t\t\t\t\tFILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let MAC_INTERFACE_CURRENT_PERFORMANCE_SCHEMA = {",
															"\t\"type\": \"object\",",
															"\t\"properties\": {",
															"\t\t\"current-performance-data-list\": {",
															"\t\t    \"type\": \"array\",",
															"\t\t    \"items\": {",
															"\t\t\t   \"type\": \"object\",",
															"\t\t\t   \"properties\": {",
															"\t\t\t\t\t\"performance-data\": {",
															"\t\t\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\t\t\"properties\": { ",
															"\t\t\t\t\t\t\t \"mac-control-frames-ingress\": \t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t \"mac-pause-frames-ingress\": \t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t \"oversized-frames-ingress\": \t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t \"undersized-frames-ingress\": \t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t \"jabber-frames-ingres\": \t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t \"fragmented-frames-ingress\": \t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t \"tagged-frames-ingress\": \t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t \"mac-control-frames-egress\": \t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t \"mac-pause-frames-egress\": \t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t \"tagged-frames-egress\": \t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t \"frames-of-64-byte\": \t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t \"frames-of-65-to-127-byte\": \t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t \"frames-of-128-to-255-byte\": \t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t \"frames-of-256-to-511-byte\": \t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t \"frames-of-512-to-1023-byte\": \t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t \"frames-of-1024-to-1518-byte\": \t{ \"type\": \"string\" }",
															"\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\"required\": [ \"mac-control-frames-ingress\",\t",
															"\t\t\t\t\t\t\t\t\t\t \"mac-pause-frames-ingress\",",
															"\t\t\t\t\t\t\t\t\t\t \"oversized-frames-ingress\",",
															"\t\t\t\t\t\t\t\t\t\t \"undersized-frames-ingress\",",
															"\t\t\t\t\t\t\t\t\t\t \"jabber-frames-ingres\",",
															"\t\t\t\t\t\t\t\t\t\t \"fragmented-frames-ingress\",",
															"\t\t\t\t\t\t\t\t\t\t \"tagged-frames-ingress\",",
															"\t\t\t\t\t\t\t\t\t\t \"mac-control-frames-egress\",",
															"\t\t\t\t\t\t\t\t\t\t \"mac-pause-frames-egress\",",
															"\t\t\t\t\t\t\t\t\t\t \"tagged-frames-egress\",",
															"\t\t\t\t\t\t\t\t\t\t \"frames-of-64-byte\",",
															"\t\t\t\t\t\t\t\t\t\t \"frames-of-65-to-127-byte\",",
															"\t\t\t\t\t\t\t\t\t\t \"frames-of-128-to-255-byte\",",
															"\t\t\t\t\t\t\t\t\t\t \"frames-of-256-to-511-byte\",",
															"\t\t\t\t\t\t\t\t\t\t \"frames-of-512-to-1023-byte\",",
															"\t\t\t\t\t\t\t\t\t\t \"frames-of-1024-to-1518-byte\"",
															"\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"timestamp\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"suspect-interval-flag\": \t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\t\"elapsed-time\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"scanner-id\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"granularity-period\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t \"mac-interface-1-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t \"mac-interface-1-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t \"mac-interface-1-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t \"mac-interface-1-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t\t}",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"performance-data\",",
															"    \t\t\t\t\t\t\t\"timestamp\",",
															"    \t\t\t\t\t\t\t\"suspect-interval-flag\",",
															"    \t\t\t\t\t\t\t\"elapsed-time\",",
															"    \t\t\t\t\t\t\t\"scanner-id\",",
															"    \t\t\t\t\t\t\t\"granularity-period\"",
															"\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-current-performance-sets\":\t\t    { \"type\": \"number\" }",
															"\t},",
															"\t\"required\":\t[ \"current-performance-data-list\",",
															"\t                \"number-of-current-performance-sets\"",
															"\t]",
															"};",
															"try {",
															"\tif (capability[\"performance-monitoring-is-avail\"] === false) {",
															"\t\tpm.variables.set(\"schemaToBeShortened\", MAC_INTERFACE_CURRENT_PERFORMANCE_SCHEMA);",
															"\t\tpm.variables.set(\"unRequiredAttribute\", \"current-performance-data-list\");",
															"\t\teval(RemoveAttributeFromRequired)();",
															"\t\tMAC_INTERFACE_CURRENT_PERFORMANCE_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"\t\tCouldMacInterfaceCurrentPerformanceBeShortened(true);",
															"\t}",
															"} catch (error) {",
															"\tCouldMacInterfaceCurrentPerformanceBeShortened(false);",
															"}",
															"pm.variables.set(\"schema\", MAC_INTERFACE_CURRENT_PERFORMANCE_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"\teval(SettingTheRequestVariables)();",
															"\tCouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"\tCouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"\tpm.test(\"CouldInputBeLoaded\", function () {",
															"\t\tpm.expect(capability).to.be.an(\"object\");",
															"\t\tpm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"\t\tpm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"\t\tpm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"\t\tpm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"\t});",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"\tattributeUnterTest, contentType,",
															"\tfilteredDepth, filteredFields, requestBody) {",
															"\tpm.test(\"IsValueOfClassUnderTestCorrect\", function () {",
															"\t\tpm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"\t\t\t\"current-problems\", \"current-performance\",",
															"\t\t\t\"historical-performances\"]);",
															"\t});",
															"\tpm.test(\"IsValueOfDatatypeUnderTestCorrect\", function () {",
															"\t\tpm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function () {",
															"\t\tpm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"\t});",
															"\tpm.test(\"IsValueOfAttributeUnderTestCorrect\", function () {",
															"\t\tpm.expect(attributeUnterTest).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfContentTypeCorrect\", function () {",
															"\t\tpm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"\t});",
															"\tpm.test(\"IsValueOfFilteredDepthCorrect\", function () {",
															"\t\tpm.expect(filteredDepth).to.be.a(\"number\");",
															"\t});",
															"\tpm.test(\"IsValueOfFilteredFieldsCorrect\", function () {",
															"\t\tpm.expect(filteredFields).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfRequestBodyCorrect\", function () {",
															"\t\tpm.expect(requestBody).to.be.a(\"string\");",
															"\t});",
															"}",
															"",
															"function CouldMacInterfaceCurrentPerformanceBeShortened(success) {",
															"\tpm.test(\"CouldMacInterfaceCurrentPerformanceBeShortened\", function () {",
															"\t\tpm.expect(success).to.be.true;",
															"\t});",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"\tpm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"\t\tpm.expect(success).to.be.true;",
															"\t});",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "HistoricalPerformancesCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n------------Checking MacInterfaceHistoricalPerformances for Completeness-------------\");",
															"/*******************************************************************************",
															"* ",
															"* HistoricalPerformancesCompleteness",
															"* ",
															"* This Request is for validating MacInterface HistoricalPerformances Objects against definition ",
															"* MacInterface_1.0.0-tsp.200123.1415",
															"* as it can be found on https://github.com/openBackhaul/macInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the HistoricalPerformances class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"*******************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"\tvar RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"\tvar SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"\tvar capability = pm.collectionVariables.get(\"capability\");",
															"\tCouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"\tCouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"historical-performances\"; // choose from \"pac\", \"capability\", \"configuration\", ",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t// \"status\", \"current-problems\", \"current-performance\" ",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t// or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"\t\t\t\t\t\t\t\t\tKEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"\t\t\t\t\t\t\t\t\tFILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let MAC_INTERFACE_HISTORICAL_PERFORMANCES_SCHEMA = {",
															"   \"type\": \"object\", ",
															"   \"properties\": {",
															"\t\t\"historical-performance-data-list\": {",
															"\t\t   \"type\": \"array\",",
															"\t\t   \"items\": {",
															"\t\t\t   \"type\": \"object\", ",
															"\t\t\t   \"properties\": {",
															"\t\t\t\t\t\"performance-data\": {",
															"\t\t\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\"mac-control-frames-ingress\": \t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"mac-pause-frames-ingress\": \t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"oversized-frames-ingress\": \t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"undersized-frames-ingress\": \t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"jabber-frames-ingres\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"fragmented-frames-ingress\": \t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\"tagged-frames-ingress\": \t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\"mac-control-frames-egress\": \t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"mac-pause-frames-egress\": \t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"tagged-frames-egress\": \t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\t\t\t\t\t\"frames-of-64-byte\": \t\t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\t\t\t\t\t\"frames-of-65-to-127-byte\": \t\t\t{ \"type\": \"string\" }, ",
															"\t\t\t\t\t\t\t\"frames-of-128-to-255-byte\": \t\t\t{ \"type\": \"string\" }, ",
															"\t\t\t\t\t\t\t\"frames-of-256-to-511-byte\": \t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\"frames-of-512-to-1023-byte\": \t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\"frames-of-1024-to-1518-byte\": \t\t{ \"type\": \"string\" }",
															"\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\"required\": [ \"mac-control-frames-ingress\",",
															"\t\t\t\t\t\t\t\t\t \"mac-pause-frames-ingress\",",
															"\t\t\t\t\t\t\t\t\t \"oversized-frames-ingress\",",
															"\t\t\t\t\t\t\t\t\t \"undersized-frames-ingress\",",
															"\t\t\t\t\t\t\t\t\t \"jabber-frames-ingres\",",
															"\t\t\t\t\t\t\t\t\t \"fragmented-frames-ingress\",",
															"\t\t\t\t\t\t\t\t\t \"tagged-frames-ingress\",",
															"\t\t\t\t\t\t\t\t\t \"mac-control-frames-egress\",",
															"\t\t\t\t\t\t\t\t\t \"mac-pause-frames-egress\",",
															"\t\t\t\t\t\t\t\t\t \"tagged-frames-egress\",",
															"\t\t\t\t\t\t\t\t\t \"frames-of-64-byte\",",
															"\t\t\t\t\t\t\t\t\t \"frames-of-65-to-127-byte\",",
															"\t\t\t\t\t\t\t\t\t \"frames-of-128-to-255-byte\",",
															"\t\t\t\t\t\t\t\t\t \"frames-of-256-to-511-byte\", ",
															"\t\t\t\t\t\t\t\t\t \"frames-of-512-to-1023-byte\",",
															"\t\t\t\t\t\t\t\t\t \"frames-of-1024-to-1518-byte\"",
															"\t\t\t\t\t\t\t\t\t]\t\t\t\t\t",
															"\t\t\t\t\t},",
															"\t\t\t\t\t \"suspect-interval-flag\": \t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\t \"history-data-id\": \t\t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t \"period-end-time\": \t\t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t \"granularity-period\":{ \"enum\": [",
															"\t\t\t\t\t\t\t\"mac-interface-1-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\"mac-interface-1-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"\t\t\t\t\t\t\t\"mac-interface-1-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"\t\t\t\t\t\t\t\"mac-interface-1-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t]",
															"\t\t\t\t\t}",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"performance-data\",",
															"\t\t\t\t\t\t\t    \"suspect-interval-flag\",",
															"\t\t\t\t\t\t\t    \"history-data-id\",",
															"\t\t\t\t\t\t\t    \"period-end-time\",",
															"\t\t\t\t\t\t\t    \"granularity-period\"",
															"\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-historical-performance-sets\":\t\t{ \"type\": \"number\" },",
															"\t\t\"time-of-latest-change\": \t\t\t\t        { \"type\": \"string\" }",
															"\t},",
															"\t\"required\":\t[ \"historical-performance-data-list\",",
															"\t                \"number-of-historical-performance-sets\",",
															"\t                \"time-of-latest-change\"",
															"\t]",
															"};",
															"try {",
															"\tif (capability[\"performance-monitoring-is-avail\"] === false) {",
															"\t\tpm.variables.set(\"schemaToBeShortened\", MAC_INTERFACE_HISTORICAL_PERFORMANCES_SCHEMA);",
															"\t\tpm.variables.set(\"unRequiredAttribute\", \"historical-performance-data-list\");",
															"\t\teval(RemoveAttributeFromRequired)();",
															"\t\tMAC_INTERFACE_HISTORICAL_PERFORMANCES_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"\t\tCouldMacInterfaceHistoricalPerformancesBeShortened(true);",
															"\t}",
															"} catch (error) {",
															"\tCouldMacInterfaceHistoricalPerformancesBeShortened(false);",
															"}",
															"pm.variables.set(\"schema\", MAC_INTERFACE_HISTORICAL_PERFORMANCES_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"\teval(SettingTheRequestVariables)();",
															"\tCouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"\tCouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"\tpm.test(\"CouldInputBeLoaded\", function () {",
															"\t\tpm.expect(capability).to.be.an(\"object\");",
															"\t\tpm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"\t\tpm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"\t\tpm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"\t\tpm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"\t});",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"\tattributeUnterTest, contentType,",
															"\tfilteredDepth, filteredFields, requestBody) {",
															"\tpm.test(\"IsValueOfClassUnderTestCorrect\", function () {",
															"\t\tpm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"\t\t\t\"current-problems\", \"current-performance\",",
															"\t\t\t\"historical-performances\"]);",
															"\t});",
															"\tpm.test(\"IsValueOfDatatypeUnderTestCorrect\", function () {",
															"\t\tpm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function () {",
															"\t\tpm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"\t});",
															"\tpm.test(\"IsValueOfAttributeUnderTestCorrect\", function () {",
															"\t\tpm.expect(attributeUnterTest).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfContentTypeCorrect\", function () {",
															"\t\tpm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"\t});",
															"\tpm.test(\"IsValueOfFilteredDepthCorrect\", function () {",
															"\t\tpm.expect(filteredDepth).to.be.a(\"number\");",
															"\t});",
															"\tpm.test(\"IsValueOfFilteredFieldsCorrect\", function () {",
															"\t\tpm.expect(filteredFields).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfRequestBodyCorrect\", function () {",
															"\t\tpm.expect(requestBody).to.be.a(\"string\");",
															"\t});",
															"}",
															"",
															"function CouldMacInterfaceHistoricalPerformancesBeShortened(success) {",
															"\tpm.test(\"CouldMacInterfaceHistoricalPerformancesBeShortened\", function () {",
															"\t\tpm.expect(success).to.be.true;",
															"\t});",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"\tpm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"\t\tpm.expect(success).to.be.true;",
															"\t});",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NetworkRestoration",
									"item": [
										{
											"name": "SettingOriginalInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------------Restoring the Original Interface Configuration Again-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting the Original Interface Configuration Again",
															"* ",
															"* This Request is for restoring the configuration from before the interface validation ",
															"* on the device.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"        ",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration",
															"                                                   );",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    completeClassName = moduleUnderTest + \":\" + technologyUnderTest + \"-configuration\";",
															"    configuration = AddHeadlineToDataObject(configuration, completeClassName);",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched back on original values.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched back on original values.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointMacInterfaceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------ReversalPoint of MacInterface Validation for Completeness---------------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointMacInterfaceCompleteness\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointMacInterfaceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-----------------------Terminating MacInterfaceCompleteness--------------------------\");",
															"/****************************************************************************************",
															" * ",
															" * ExitPoint",
															" * ",
															" * This Request is for clearing the Collection variables and terminating the TestCase",
															" * ",
															" ****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															" * Required Input Parameters",
															" ****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Clearing all Collection Variables for Terminating the TestCase",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Setting up Local Variables and Preparing the Request",
															" ****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({",
															"        key: \"Accept\",",
															"        value: \"application/json\"",
															"    });",
															"} catch (error) {}",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, controller, indexOfDeviceUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function() {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function() {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "MacInterfaceConfiguration",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n\\n============================ MacInterfaceConfiguration.1 =============================\");",
															"/****************************************************************************************",
															"* ",
															"* RequestCollection for validating Configuration of MacInterface Objects against definition ",
															"* ",
															"*                   MacInterface_1.0.0-tsp.200123.1415",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/macInterface/tree/tsp",
															"* ",
															"****************************************************************************************/",
															" ",
															"",
															"/****************************************************************************************",
															"* Manual Definition of the Mode of Operation of this TestCase",
															"* ",
															"* It is recommended to apply this TestCase on devices on the local (not remote) site",
															"* of the microwave connection, otherwise the management connection might break and ",
															"* configurations, which are done during the validation, cannot be reversed.",
															"* ",
															"****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"one\"; // \"none\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"mac-interface-1-0:mac-interface-pac\"; // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"CONFIGURATION_VALIDATION_RESULTS = {};",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"pm.collectionVariables.set(\"configurationValidationResults\", CONFIGURATION_VALIDATION_RESULTS);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function() {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function() {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DefiningDummyValuesAndEvaluations()",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n----------Defining DummyValues and Evaluation Criteria in Configuration Validation--------\");",
															"/****************************************************************************************",
															"* ",
															"* Definition of DefiningDummyValuesAndEvaluations()",
															"*  ",
															"* Functions for Defining DummyValues and Evaluation Criteria in all Configuration Validations.",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Provided Collection Variables ",
															"****************************************************************************************/",
															"class Attribute {",
															"    constructor(CreatingDummyValueAsaString,",
															"                    EvaluatingFeatureSupportAsaString,",
															"                    defaultValueForStandardEvaluation,",
															"                    EvaluatingResultAsaString) {",
															"        this.CreatingDummyValueAsaString = CreatingDummyValueAsaString;",
															"        this.EvaluatingFeatureSupportAsaString = EvaluatingFeatureSupportAsaString;",
															"        this.defaultValueForStandardEvaluation = defaultValueForStandardEvaluation;",
															"        this.EvaluatingResultAsaString = EvaluatingResultAsaString;",
															"    }",
															"}",
															"var attributes = [];",
															"",
															"var CreatingDummyValueAsaString;",
															"var EvaluatingFeatureSupportAsaString;",
															"var defaultValueForStandardEvaluation;",
															"var EvaluatingResultAsaString;",
															"var newAttribute;",
															"",
															"// interface-name",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of interface-name--------------------------\");",
															"",
															"        // Individual Values Definition ",
															"        var dummyValue = \"Dummy \" + String(Math.floor(Math.random() * 999));",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"interface-name\";",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"Interface name not yet defined.\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// interface-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of interface-is-on-----------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"interface-is-on\";",
															"",
															"        // Individual Values Definition ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try { ",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"admin-shut-down-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// mac-address-configuration-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------Checking Configuration of mac-address-configuration-is-on---------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"mac-address-configuration-is-on\";",
															"",
															"        // Individual Values Definition ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try { ",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"mac-address-configuration-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// configured-mac-address",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n---------------------Checking Configuration of configured-mac-address----------------------\");",
															"",
															"        // Individual Values Definition",
															"        var dummyValue = GenerateRandomString(2);",
															"        for ( let i=0; i<5; i++ ) {",
															"            dummyValue += \":\";",
															"            dummyValue += GenerateRandomString(2);",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"configured-mac-address\";",
															"",
															"        // Functions",
															"        function GenerateRandomString(length) {",
															"            let randomString = \"\";",
															"            let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";",
															"            let charactersLength = characters.length;",
															"            for ( let i=0; i<length; i++ ) {",
															"                randomString += characters.charAt(Math.floor(Math.random() * charactersLength));",
															"            }",
															"            return randomString;",
															"        }",
															"",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try { ",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"mac-address-configuration-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"00:00:00:00:00:00\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// maximum-frame-size",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of maximum-frame-size------------------------\");",
															"        ",
															"        var dummyValue;",
															"        try {",
															"            let minimumValue = capability[\"maximum-frame-size-min\"];",
															"            let maximumValue = capability[\"maximum-frame-size-max\"];",
															"            let valueRange = maximumValue - minimumValue; ",
															"            dummyValue = minimumValue + Math.floor(Math.random() * valueRange); ",
															"            ",
															"            CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue);",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"maximum-frame-size\";",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue) {",
															"            pm.test(\"CouldMinimumValueBeReadFromCapabilities\", function () {",
															"                pm.expect(minimumValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldMaximumValueBeReadFromCapabilities\", function () {",
															"                pm.expect(maximumValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldValueRangeBeCalculated\", function () {",
															"                pm.expect(valueRange).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try { ",
															"            var supportedMaxFrameSizeMin = capability[\"maximum-frame-size-min\"];",
															"            var supportedMaxFrameSizeMax = capability[\"maximum-frame-size-max\"];",
															"            if ( (supportedMaxFrameSizeMin===-1) && (supportedMaxFrameSizeMax===-1) ) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            }",
															"            CouldSupportedInformationRateBeRead(supportedMaxFrameSizeMin, ",
															"                                                    supportedMaxFrameSizeMax,",
															"                                                    capabilitiesAreIndicatingThatFeatureNotSupported",
															"                                                );",
															"        } catch (error) {",
															"            CouldSupportedInformationRateBeRead();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldSupportedInformationRateBeRead(supportedMaxFrameSizeMin,",
															"                                                        supportedMaxFrameSizeMax,",
															"                                                        capabilitiesAreIndicatingThatFeatureNotSupported) {",
															"            pm.test(\"CouldSupportedInformationRateBeRead\", function () {",
															"                pm.expect(supportedMaxFrameSizeMin).to.be.a(\"number\");",
															"                pm.expect(supportedMaxFrameSizeMax).to.be.a(\"number\");",
															"                pm.expect(capabilitiesAreIndicatingThatFeatureNotSupported).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// fragmentation-allowed",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----------------------Checking Configuration of fragmentation-allowed----------------------\");",
															"",
															"        try {",
															"            let alternativeFragmentations = [\"mac-interface-1-0:FRAGMENTATION_TYPE_DISABLE\",",
															"                                                \"mac-interface-1-0:FRAGMENTATION_TYPE_ENABLE_256_BYTE\",",
															"                                                \"mac-interface-1-0:FRAGMENTATION_TYPE_ENABLE_512_BYTE\",",
															"                                            ];",
															"            let configuredFragmentation = configuration[\"fragmentation-allowed\"];",
															"            let configuredFragmentationIndex = alternativeFragmentations.indexOf(configuredFragmentation);",
															"            let potentialDummyValues = alternativeFragmentations;",
															"            if (configuredFragmentationIndex >= 0) {",
															"                potentialDummyValues.splice(configuredFragmentationIndex, 1);",
															"            }",
															"        ",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"",
															"            CouldDummyBeCreated(alternativeFragmentations, configuredFragmentation,",
															"                                    configuredFragmentationIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue",
															"                                );",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"fragmentation-allowed\";",
															"",
															"        // Self Testing Function",
															"        function CouldDummyBeCreated(alternativeFragmentations, configuredFragmentation,",
															"                                        configuredFragmentationIndex,",
															"                                        potentialDummyValues,",
															"                                        dummyValueIndex,",
															"                                        dummyValue) {",
															"            pm.test(\"CouldalternativeFragmentationsBeCreated\", function () {",
															"                pm.expect(alternativeFragmentations).to.be.an(\"array\");",
															"            });",
															"            pm.test(\"CouldconfiguredFragmentationBeRetrieved\", function () {",
															"                pm.expect(configuredFragmentation).to.be.a(\"string\");",
															"            });",
															"            pm.test(\"CouldconfiguredFragmentationIndexBeEvaluated\", function () {",
															"                pm.expect(configuredFragmentationIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldPotentialDummyValuesBeBuild\", function () {",
															"                pm.expect(potentialDummyValues).to.be.an(\"array\");",
															"                pm.expect(potentialDummyValues.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyValueIndexBeCalculated\", function () {",
															"                pm.expect(dummyValueIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"mac-interface-1-0:FRAGMENTATION_TYPE_NOT_YET_DEFINED\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// transmitted-frame-format",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------Checking Configuration of transmitted-frame-format----------------------\");",
															"",
															"        try {",
															"            let supportedTransmittedFrameFormats = capability[\"supported-frame-format-list\"];",
															"            let configuredTransmittedFrameFormat = configuration[\"transmitted-frame-format\"];",
															"            let configuredTransmittedFrameFormatIndex = ",
															"                                    supportedTransmittedFrameFormats.indexOf(configuredTransmittedFrameFormat);",
															"            let potentialDummyValues = supportedTransmittedFrameFormats;",
															"            if (configuredTransmittedFrameFormatIndex >= 0) {",
															"                potentialDummyValues.splice(configuredTransmittedFrameFormatIndex, 1);",
															"            }",
															"            if (potentialDummyValues.length === 0) {",
															"                potentialDummyValues = [\"mac-interface-1-0:FRAME_FORMAT_TYPE_802.2_SNAP\"];",
															"            }",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"            CouldDummyBeCreated(supportedTransmittedFrameFormats, potentialDummyValues,",
															"                                    configuredTransmittedFrameFormat, ",
															"                                    dummyValue",
															"                                );",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"transmitted-frame-format\";",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(supportedTransmittedFrameFormats, potentialDummyValues, ",
															"                                        configuredTransmittedFrameFormat, ",
															"                                        dummyValue) {",
															"            pm.test(\"CouldDummyBeCreated\", function () {",
															"                pm.expect(supportedTransmittedFrameFormats).to.be.an(\"array\");",
															"                pm.expect(potentialDummyValues).to.be.an(\"array\");",
															"                pm.expect(potentialDummyValues.length).to.be.at.least(1);",
															"                pm.expect(configuredTransmittedFrameFormat).to.be.a(\"string\");",
															"                pm.expect(configuredTransmittedFrameFormat).to.not.have.lengthOf(0);",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try { ",
															"            var supportedFrameFormats = capability[\"supported-frame-format-list\"];",
															"            if ( supportedFrameFormats.length === 1 ) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            }",
															"            CouldSupportedInformationRateBeRead(supportedFrameFormats, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        } catch (error) {",
															"            CouldSupportedInformationRateBeRead();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldSupportedInformationRateBeRead(supportedFrameFormats, capabilitiesAreIndicatingThatFeatureNotSupported) {",
															"            pm.test(\"CouldSupportedFrameFormatsBeRead\", function () {",
															"                pm.expect(supportedFrameFormats).to.be.an(\"array\");",
															"                pm.expect(capabilitiesAreIndicatingThatFeatureNotSupported).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"mac-interface-1-0:FRAME_FORMAT_TYPE_NOT_YET_DEFINED\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// flow-control-mode",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of flow-control-mode-------------------------\");",
															"",
															"        try {",
															"            let supportedFlowControlModes = capability[\"supported-flow-control-mode-list\"];",
															"            let configuredFlowControlMode = configuration[\"flow-control-mode\"];",
															"            let configuredFlowControlModeIndex = supportedFlowControlModes.indexOf(configuredFlowControlMode);",
															"            let potentialDummyValues = supportedFlowControlModes;",
															"            if (configuredFlowControlModeIndex >= 0) {",
															"                potentialDummyValues.splice(configuredFlowControlModeIndex, 1);",
															"            }",
															"            if (potentialDummyValues.length === 0) {",
															"                potentialDummyValues = [\"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_SEND_AND_RECEIVE\"];",
															"            }",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"            CouldDummyBeCreated(supportedFlowControlModes, configuredFlowControlMode, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"flow-control-mode\";",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(supportedFlowControlModes, configuredFlowControlMode, dummyValue) {",
															"            pm.test(\"CouldDummyBeCreated\", function () {",
															"                pm.expect(supportedFlowControlModes).to.be.an(\"array\");",
															"                pm.expect(supportedFlowControlModes.length).to.be.at.least(1);",
															"                pm.expect(configuredFlowControlMode).to.be.a(\"string\");",
															"                pm.expect(configuredFlowControlMode).to.not.have.lengthOf(0);",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try { ",
															"            var supportedFlowControlModes = capability[\"supported-flow-control-mode-list\"];",
															"            if ( (supportedFlowControlModes.length===1) ",
															"                    && ( (supportedFlowControlModes[0]===\"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_NOT_YET_DEFINED\")",
															"                            || (supportedFlowControlModes[0]===\"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_NONE\") ) ) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            }",
															"            CouldSupportedInformationRateBeRead(supportedFlowControlModes, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        } catch (error) {",
															"            CouldSupportedInformationRateBeRead();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldSupportedInformationRateBeRead(supportedFlowControlModes, capabilitiesAreIndicatingThatFeatureNotSupported) {",
															"            pm.test(\"CouldsupportedFlowControlModesBeRead\", function () {",
															"                pm.expect(supportedFlowControlModes).to.be.an(\"array\");",
															"                pm.expect(capabilitiesAreIndicatingThatFeatureNotSupported).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"mac-interface-1-0:FLOW_CONTROL_MODE_TYPE_NOT_YET_DEFINED\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// link-loss-forwarding-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------------------Checking Configuration of link-loss-forwarding-is-on-------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"link-loss-forwarding-is-on\";",
															"",
															"        // Individual Values Definition ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try { ",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"link-loss-forwarding-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// link-loss-forwarding-delay",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------------------Checking Configuration of link-loss-forwarding-delay-------------------\");",
															"",
															"        try {",
															"            var dummyValue = 1 + Math.floor(Math.random() * 9);",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"link-loss-forwarding-delay\";",
															"",
															"        // Self Testing Function",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try { ",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"link-loss-forwarding-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// broadcast-frame-suppression-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----------------Checking Configuration of broadcast-frame-suppression-is-on----------------\");",
															"        ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"broadcast-frame-suppression-is-on\";",
															"",
															"        // Individual Values Definition ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try { ",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"broadcast-frame-suppression-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// maximum-share-of-broadcast-frames",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----------------Checking Configuration of maximum-share-of-broadcast-frames----------------\");",
															"",
															"        try {",
															"            var dummyValue = 1 + Math.floor(Math.random() * 99);",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"maximum-share-of-broadcast-frames\";",
															"",
															"        // Self Testing Function",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// loop-port-shut-down-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------------------Checking Configuration of loop-port-shut-down-is-on--------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"loop-port-shut-down-is-on\";",
															"",
															"        // Individual Values Definition ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try { ",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"loop-port-shut-down-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// loop-detection-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----------------------Checking Configuration of loop-detection-is-on-----------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"loop-detection-is-on\";",
															"",
															"        // Individual Values Definition ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try { ",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"loop-detection-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// loop-back-kind-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of loop-back-kind-on------------------------\");",
															"",
															"        try {",
															"            let supportedLoopBackKindList = capability[\"supported-loop-back-kind-list\"];",
															"            let loopBackKindOn = configuration[\"loop-back-kind-on\"];",
															"            let loopBackKindOnIndex = supportedLoopBackKindList.indexOf(loopBackKindOn);",
															"            let potentialDummyValues = supportedLoopBackKindList;",
															"            if (loopBackKindOnIndex >= 0) {",
															"                potentialDummyValues.splice(loopBackKindOnIndex, 1);",
															"            }",
															"            if (potentialDummyValues.length === 0) {",
															"                potentialDummyValues = [\"mac-interface-1-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\"];",
															"            }",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"            CouldDummyBeCreated(supportedLoopBackKindList, loopBackKindOn, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"loop-back-kind-on\";",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(supportedLoopBackKindList, loopBackKindOn, dummyValue) {",
															"            pm.test(\"CouldDummyBeCreated\", function () {",
															"                pm.expect(supportedLoopBackKindList).to.be.an(\"array\");",
															"                pm.expect(loopBackKindOn).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var supportedLoopBackTypes = [];",
															"        try {",
															"            supportedLoopBackTypes = capability[\"supported-loop-back-kind-list\"];",
															"            var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"            if ( (supportedLoopBackTypes.length===1) ",
															"                    && ( (supportedLoopBackTypes[0]===\"mac-interface-1-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\")",
															"                            || (supportedLoopBackTypes[0]===\"mac-interface-1-0:LOOP_BACK_TYPE_NONE\") ) ) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            }",
															"            CouldFeaturesBeEvaluated(supportedLoopBackTypes, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        } catch (error) {",
															"            CouldFeaturesBeEvaluated(supportedLoopBackTypes, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        }",
															"        ",
															"        // Self Testing Functions",
															"        function CouldFeaturesBeEvaluated(supportedLoopBackTypes, capabilitiesAreIndicatingThatFeatureNotSupported) {",
															"            pm.test(\"CouldSupportedLoopBackTypesBeRead\", function () {",
															"                pm.expect(supportedLoopBackTypes).to.be.an(\"array\");",
															"                pm.expect(supportedLoopBackTypes.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldCapabilitiesAreIndicatingThatFeatureNotSupportedBeCalculated\", function () {",
															"                pm.expect(capabilitiesAreIndicatingThatFeatureNotSupported).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"mac-interface-1-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// maintenance-timer",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of maintenance-timer------------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"maintenance-timer\";",
															"",
															"        try {",
															"            let maintenanceTimerRange = capability[\"maintenance-timer-range\"];",
															"            let currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
															"            if (maintenanceTimerRange === \"Range of the maintenance timer not yet defined.\") {",
															"                maintenanceTimerRange = \"0-0\";",
															"            }",
															"            var dummyValue = getRandomValues(maintenanceTimerRange, currentValue);",
															"            CouldDummyValueBeDefined(maintenanceTimerRange, currentValue, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeDefined();",
															"        }",
															"",
															"        // Functions",
															"        function getRandomValues(availableValues, currentValue) {",
															"            var randomValue = 0;",
															"            if (availableValues.includes(\"-\")) {",
															"                var rangeValues = availableValues.split(\"-\");",
															"                do {",
															"                    randomValue = getRandomValueFromAvailableValues(rangeValues[0], rangeValues[1]);",
															"                } while (randomValue === currentValue);",
															"            } else if (availableValues.includes(\",\")) {",
															"                var concreteValues = availableValues.split(\",\");",
															"                do {",
															"                    var randomIndex = getRandomValueFromAvailableValues(0, concreteValues.length);",
															"                    randomValue = concreteValues[randomIndex];",
															"                } while (randomValue === currentValue);",
															"            }",
															"            else {",
															"                randomValue = availableValues;",
															"            }",
															"            return parseInt(randomValue);",
															"        }",
															"",
															"        function getRandomValueFromAvailableValues(min, max) {",
															"            return Math.floor(Math.random() * (max - min) + min);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeDefined(maintenanceTimerRange, currentValue, dummyValue) {",
															"            pm.test(\"CouldAnAvailableConfigurationValueBeRead\", function () {",
															"                pm.expect(maintenanceTimerRange).to.be.a(\"string\");",
															"                pm.expect(maintenanceTimerRange).to.not.have.lengthOf(0);",
															"            });",
															"            pm.test(\"CouldDCurrentValueBeRead\", function () {",
															"                pm.expect(currentValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(dummyValue).to.not.be.undefined;",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var supportedMaintenanceTimerRange = \"Range of the maintenance timer not yet defined.\";",
															"        try {",
															"            supportedMaintenanceTimerRange = capability[\"maintenance-timer-range\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        if ( supportedMaintenanceTimerRange === \"Range of the maintenance timer not yet defined.\" ) {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"        } else {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// statistics-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of statistics-is-on------------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"statistics-is-on\";",
															"            ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try { ",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"statistics-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// performance-monitoring-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------Checking Configuration of performance-monitoring-is-on------------------\");",
															"        ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"",
															"        try {",
															"            var dummyValue = !configuration[\"performance-monitoring-is-on\"];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try { ",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"performance-monitoring-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}  attributes.push(newAttribute);",
															"",
															"pm.collectionVariables.set(\"attributes\", attributes);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function ConvertingThisFunctionToString(functionToBeConverted) {",
															"    let functionAsAString = String(functionToBeConverted);",
															"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
															"    return functionAsAString.slice(indexOfFirstCurly);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointMacInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------EntryPoint of MacInterface Validation of Configuration-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the MacInterfaceConfiguration TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].macInterfaceList.length;",
															"    var maximumIndexOfLtpUnderTest;",
															"    ",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.min( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointMacInterfaceConfiguration\");",
															"        console.log(\"Proceeding with terminating MacInterface validation for Completeness.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Provided Collection Variables ",
															"****************************************************************************************/",
															"INITIAL_INDEX_OF_ATTRIBUTE_UNDER_TEST = 0;",
															"",
															"pm.collectionVariables.set(\"indexOfAttributeUnderTest\", INITIAL_INDEX_OF_ATTRIBUTE_UNDER_TEST);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "CollectionInformationLoading",
									"item": [
										{
											"name": "UploadingInterfaceCapability",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Capabilities-------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the Interface Capabilities",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Configuration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Configuration",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceStatus",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n------------------------------Uploading Interface Status----------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Status",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"status\";          // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Displaying the Collection Variables right before starting the validation",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NetworkPreparation",
									"item": [],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "ValidationRequests",
									"item": [
										{
											"name": "AttributeConfiguration",
											"item": [
												{
													"name": "EntryPointMacAttributeConfiguration",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* EntryPoint",
																	"* ",
																	"* Manages the number of iterations of the AttributeConfiguration Tests ",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var attributes = pm.collectionVariables.get(\"attributes\");",
																	"    var indexOfAttributeUnderTest = pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
																	"    ",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    ",
																	"    CouldTheInputBeLoaded(attributes, indexOfAttributeUnderTest, dummyUri);",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the next Step ",
																	"****************************************************************************************/",
																	"try {",
																	"        ",
																	"    if ( indexOfAttributeUnderTest < attributes.length ) {",
																	"        postman.setNextRequest();",
																	"    } else {",
																	"        postman.setNextRequest(\"ExitPointMacAttributeConfiguration\");",
																	"    }",
																	"        ",
																	"    CouldFurtherProceedingBeDetermined(true);",
																	"} catch (error) {",
																	"    CouldFurtherProceedingBeDetermined(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(attributes, indexOfAttributeUnderTest, dummyUri) {",
																	"    pm.test(\"CouldTheAttributesBeLoaded\", function () {",
																	"        pm.expect(attributes).to.be.an(\"array\");",
																	"    });",
																	"    pm.test(\"CouldIndexOfAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldTheDummyUriBeLoaded\", function () {",
																	"        pm.expect(dummyUri).to.be.a(\"string\");",
																	"        pm.expect(dummyUri).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFurtherProceedingBeDetermined(success) {",
																	"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Writing",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyCode = JSON.parse(pm.response.code);",
																	"    var dummyErrorMessage = \"\";",
																	"    if ( Math.floor(dummyCode/100) !== 2 ) {",
																	"        var dummyErrorMessage = JSON.parse(pm.response.stream).errors.error[0][\"error-message\"];",
																	"    }",
																	"    CouldResponseBeRetrieved(dummyCode, dummyErrorMessage);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", dummyCode);",
																	"pm.variables.set(\"dummyErrorMessage\", dummyErrorMessage);",
																	"",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode, responseErrorMessage) {",
																	"    pm.test(\"CouldTheDummyCodeOfPuttingBeReceived\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldTheErrorMessagePuttingBeComposed\", function () {",
																	"        pm.expect(responseErrorMessage).to.be.a(\"string\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an boolean attribute with the alternate value and",
																	"* providing this value as dummyValueString to the local Variables.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters and Execution",
																	"****************************************************************************************/",
																	"try {",
																	"    var PreRequestOfWritingAsaString = pm.environment.get(\"PreRequestOfWritingAsaString\");",
																	"    eval(PreRequestOfWritingAsaString);",
																	"    CouldPreRequestOfWritingBeExecuted(true);",
																	"} catch (error) {",
																	"    CouldPreRequestOfWritingBeExecuted();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldPreRequestOfWritingBeExecuted(success) {",
																	"    pm.test(\"CouldPreRequestOfWritingBeExecuted\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters and Execution",
																	"****************************************************************************************/",
																	"try {",
																	"    var PreRequestOfReadingAsaString = pm.environment.get(\"PreRequestOfReadingAsaString\");",
																	"    eval(PreRequestOfReadingAsaString);",
																	"    CouldPreRequestOfReadingBeExecuted(true);",
																	"} catch (error) {",
																	"    CouldPreRequestOfReadingBeExecuted();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldPreRequestOfReadingBeExecuted(success) {",
																	"    pm.test(\"CouldPreRequestOfReadingBeExecuted\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters and Execution",
																	"****************************************************************************************/",
																	"try {",
																	"    var PostRequestOfReadingAsaString = pm.environment.get(\"PostRequestOfReadingAsaString\");",
																	"    eval(PostRequestOfReadingAsaString);",
																	"    CouldPostRequestOfReadingBeExecuted(true);",
																	"} catch (error) {",
																	"    CouldPostRequestOfReadingBeExecuted();",
																	"}",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldPostRequestOfReadingBeExecuted(success) {",
																	"    pm.test(\"CouldPostRequestOfReadingBeExecuted\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters and Execution",
																	"****************************************************************************************/",
																	"try {",
																	"    var PreRequestOfEvaluatingAsaString = pm.environment.get(\"PreRequestOfEvaluatingAsaString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    ",
																	"    eval(PreRequestOfEvaluatingAsaString);",
																	"",
																	"    if ( Math.floor(dummyCode/100) !==2 ) {",
																	"        postman.setNextRequest(\"ReversalPointMacAttributeConfiguration\");",
																	"    }",
																	"    ",
																	"    CouldPreRequestOfEvaluatingBeExecuted(true);",
																	"} catch (error) {",
																	"    CouldPreRequestOfEvaluatingBeExecuted();",
																	"}",
																	"",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldPreRequestOfEvaluatingBeExecuted(success) {",
																	"    pm.test(\"CouldPreRequestOfEvaluatingBeExecuted\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters and Execution",
																	"****************************************************************************************/",
																	"try {",
																	"    var PreRequestOfRestoringAsaString = pm.environment.get(\"PreRequestOfRestoringAsaString\");",
																	"    eval(PreRequestOfRestoringAsaString);",
																	"    CouldPreRequestOfRestoringBeExecuted(true);",
																	"} catch (error) {",
																	"    CouldPreRequestOfRestoringBeExecuted();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldPreRequestOfRestoringBeExecuted(success) {",
																	"    pm.test(\"CouldPreRequestOfRestoringBeExecuted\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "ReversalPointMacAttributeConfiguration",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* ReversalPoint",
																	"* ",
																	"* Directs the flow of execution back to the StartPoint",
																	"* ",
																	"****************************************************************************************/",
																	" ",
																	" ",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"        ",
																	"    var indexOfAttributeUnderTest = pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, indexOfAttributeUnderTest);",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Providing Collection Variables for either Repeating or Terminating the TestCase",
																	" ****************************************************************************************/",
																	"var indexOfPotentialNextAttributeUnderTest = indexOfAttributeUnderTest + 1;",
																	"pm.collectionVariables.set(\"indexOfAttributeUnderTest\", indexOfPotentialNextAttributeUnderTest);",
																	"",
																	"postman.setNextRequest(\"EntryPointMacAttributeConfiguration\");",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, indexOfAttributeUnderTest) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"        pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "ExitPointMacAttributeConfiguration",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* ExitPoint",
																	"* ",
																	"* This Request is terminating the Test",
																	"* ",
																	"****************************************************************************************/",
																	" ",
																	" ",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    CouldTheInputBeLoaded(dummyUri);",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "NetworkRestoration",
									"item": [
										{
											"name": "SettingOriginalInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------------Restoring the Original Interface Configuration Again-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting the Original Interface Configuration Again",
															"* ",
															"* This Request is for restoring the configuration from before the interface validation ",
															"* on the device.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"        ",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration",
															"                                                   );",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    completeClassName = moduleUnderTest + \":\" + technologyUnderTest + \"-configuration\";",
															"    configuration = AddHeadlineToDataObject(configuration, completeClassName);",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched back on original values.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched back on original values.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointMacInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------ReversalPoint of MacInterface Validation of Configuration---------------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Console.log of Validation Results",
															" ****************************************************************************************/",
															"let allConfigurationValidationResults = { \"allConfigurationValidationResults\" : configurationValidationResults };",
															"console.log(allConfigurationValidationResults);",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointMacInterfaceConfiguration\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointMacInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n----------------------Terminating MacInterfaceConfiguration--------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ExitPoint",
															"* ",
															"* This Request is for clearing the Collection variables and terminating the TestCase",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Clearing all Collection Variables for Terminating the TestCase",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, controller, indexOfDeviceUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "PureEthernetStructureValidation",
					"item": [
						{
							"name": "PureEthernetStructureCompleteness",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputCompletenessPes",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n\\n============================ PureEthernetStructureCompleteness.3 =============================\");",
															"/****************************************************************************************",
															"* ",
															"* RequestCollection for validating Completeness of PureEthernetStructure Objects against definition ",
															"* ",
															"*                   PureEthernetStructure_2.0.0-tsp.200122.1325",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/pureEthernetStructure/tree/tsp",
															"* ",
															"****************************************************************************************/",
															" ",
															"",
															"/****************************************************************************************",
															"* Manual Definition of the Mode of Operation of this TestCase",
															"****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"one\"; // \"none\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"pure-ethernet-structure-2-0:pure-ethernet-structure-pac\"; // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function() {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function() {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointPureEthernetStructureCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------EntryPoint of PureEthernetStructure Validation for Completeness-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the PureEthernetStructureCompleteness TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].pureEthernetStructureList.length;",
															"    var maximumIndexOfLtpUnderTest;",
															"    ",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.min( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointPureEthernetStructureCompleteness\");",
															"        console.log(\"Proceeding with terminating PureEthernetStructure validation for Completeness.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceCapability",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Capabilities-------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the Interface Capabilities",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Configuration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Configuration",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Displaying the Collection Variables right before starting the validation",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "NetworkPreparation",
									"item": [
										{
											"name": "SwitchingOnMonitoring",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------------Switching Monitoring On----------------------------------\");",
															"/****************************************************************************************",
															" * ",
															" * Switching Monitoring On",
															" * ",
															" * This Request is for activating collection of performance data on the device under",
															" * test, so the data can be retrieved during validating completeness of the implementation",
															" *  ",
															" ****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															" * Required Input Parameters",
															" ****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, capability, configuration);",
															"} catch (error) {",
															"    CouldInputForSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Forming the Body",
															" ****************************************************************************************/",
															"try {",
															"    let requestBodyString = ('{ \"' + moduleUnderTest + ':performance-monitoring-is-on\": true }');",
															"    var requestBody = JSON.parse(requestBodyString);",
															"    CouldRequestBodyBeFormed(requestBody);",
															"} catch (error) {",
															"    CouldRequestBodyBeFormed();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Setting up Local Variables and Calling for Preparation of the Request",
															" ****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(requestBody);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, capability, configuration) {",
															"    pm.test(\"CouldInputForSwitchingMonitoringOnBeLoaded\", function() {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(configuration).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyBeFormed(requestBody) {",
															"    pm.test(\"CouldRequestBodyBeFormed\", function() {",
															"        pm.expect(requestBody).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, ",
															"                                                keysOfDatatypeInstanceUnderTest,",
															"                                                attributeUnterTest, ",
															"                                                contentType,",
															"                                                filteredDepth, ",
															"                                                filteredFields, ",
															"                                                requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"            \"current-problems\", \"current-performance\",",
															"            \"historical-performances\"",
															"        ]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function() {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched on.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched on.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "ValidationRequests",
									"item": [
										{
											"name": "LtpCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n------------------Checking PureEthernetStructureLtp for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* This Request is for validating PureEthernetStructureLtp objects against definition ",
															"*",
															"* ONF Core IM 1.4",
															"*",
															"* as it can be found on https://github.com/openBackhaul/core/tree/tsp",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"\";",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 5;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let PURE_ETHERNET_STRUCTURE_LTP_SCHEMA = {",
															"    \"type\": \"object\",",
															"\t\"properties\": {",
															"        \"core-model-1-4:logical-termination-point\": {",
															"            \"type\": \"array\",",
															"            \"items\": {",
															"                \"type\": \"object\",",
															"                \"properties\": {",
															"                    \"physical-port-reference\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"string\",",
															"                        },",
															"                    },                    ",
															"                    \"connected-ltp\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                    \"supporting-pc\": \t\t\t\t            \t            { \"type\": \"string\" },",
															"                    \"client-ltp\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"string\",",
															"                        },",
															"                    },",
															"                    \"server-ltp\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"string\",",
															"                        },",
															"                    },",
															"                    \"ltp-direction\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                    \"transfer-capacity-pac\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"embedded-clock\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"run-mode\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"encompassed-clock\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },",
															"                                \"encapsulated-fc\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": {",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"uuid\": \t\t\t\t\t                    { \"type\": \"string\" },",
															"                                            \"local-id\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"lifecycle-state\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                                            \"layer-protocol-name\": \t\t\t                { \"type\": \"string\" },",
															"                                            \"administrative-state\":    \t\t\t\t\t    { \"type\": \"string\" },",
															"                                            \"name\": {",
															"                                                \"type\": \"array\",",
															"                                                \"items\": { ",
															"                                                    \"type\": \"object\",",
															"                                                    \"properties\": {",
															"                                                    },",
															"                                                },",
															"                                            },",
															"                                            \"fc-route\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"operational-state\":     \t\t\t\t\t    { \"type\": \"string\" },",
															"                                            \"administrative-control\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                            \"supporting-pc\": \t\t\t\t            \t{ \"type\": \"string\" },",
															"                                            \"service-priority\": \t\t\t                { \"type\": \"string\" },",
															"                                            \"forwarding-direction\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                            \"fc-port\": {",
															"                                                \"type\": \"array\",",
															"                                                \"items\": {",
															"                                                    \"type\": \"object\",",
															"                                                    \"properties\": {",
															"                                                    },",
															"                                                },",
															"                                            },",
															"                                            \"is-protection-lock-out\": \t\t\t\t\t    { \"type\": \"boolean\" },                    ",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"sync-ltp\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },                                ",
															"                                \"encapsulated-casc\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },",
															"                                \"phase-aligned-clock\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },",
															"                                \"local-id\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"configured-client-capacity\": \t\t\t\t\t{ \"type\": \"string\" },",
															"                                \"fc-blocks-signal-to-lp\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                \"lifecycle-state\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                                \"layer-protocol-name\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                                \"termination-state\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                                \"administrative-state\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                \"lp-direction\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                                \"is-protection-lock-out\":            \t\t\t{ \"type\": \"boolean\" },                    ",
															"                                \"operational-state\":     \t\t\t            { \"type\": \"string\" },",
															"                                \"administrative-control\": \t\t\t\t\t    { \"type\": \"string\" },                                ",
															"                                \"name\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"label\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"extension\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"operational-state\":     \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"administrative-control\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"administrative-state\":    \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"lifecycle-state\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                                \"address\": \t\t\t\t\t                                { \"type\": \"string\" },",
															"                            },",
															"                        },",
															"                    },                  ",
															"                    \"peer-ltp\":              \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"ltp-in-other-view\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"string\",",
															"                        },",
															"                    },",
															"                    \"ltp-augment-1-0:ltp-augment-pac\": {",
															"                        \"type\": \"object\",",
															"                        \"properties\": {",
															"                            \"ltp-augment-capability\": {",
															"                                \"type\": \"object\",",
															"                                \"properties\": {",
															"                                    \"equipment\": {",
															"                                        \"type\": \"array\",",
															"                                        \"items\": { ",
															"                                            \"type\": \"string\",",
															"                                        },",
															"                                    },                    ",
															"                                    \"connector\":                                 { \"type\": \"string\" },",
															"                                },",
															"                                \"required\": [",
															"                                    \"equipment\", ",
															"                                    \"connector\",",
															"                                ],",
															"                            },",
															"                        },",
															"                        \"required\": [",
															"                            \"ltp-augment-capability\", ",
															"                        ],",
															"                    },",
															"                    \"layer-protocol\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": {",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"layer-protocol-name\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                                \"configured-client-capacity\": \t\t\t\t\t{ \"type\": \"string\" },",
															"                                \"lp-direction\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                                \"termination-state\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                                \"configuration-and-switch-control\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },",
															"                                \"is-protection-lock-out\":            \t\t\t{ \"type\": \"boolean\" },",
															"                                \"fc-blocks-signal-to-lp\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                \"pure-ethernet-structure-2-0:pure-ethernet-structure-pac\": {",
															"                                    \"type\": \"object\",",
															"                                    \"properties\": {",
															"                                        \"pure-ethernet-structure-capability\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"supported-alarm-list\": \t\t\t\t\t{ \"type\": \"array\"   },",
															"                                                \"performance-monitoring-is-avail\":\t\t\t{ \"type\": \"boolean\" }",
															"                                            },",
															"                                        },",
															"                                        \"pure-ethernet-structure-configuration\":{",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"problem-kind-severity-list\": \t\t\t\t{ \"type\": \"array\"   }, ",
															"                                                \"g-826-threshold-cross-alarm-list\": \t\t{ \"type\": \"array\"   },",
															"                                                \"clearing-threshold-cross-alarms-is-on\":\t{ \"type\": \"boolean\" },",
															"                                                \"performance-monitoring-is-on\": \t\t\t{ \"type\": \"boolean\" }",
															"                                            },\t\t",
															"                                        },",
															"                                        \"pure-ethernet-structure-status\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"segment-status-list\": \t\t\t\t\t\t{ \"type\": \"array\"   },",
															"                                                \"performance-monitoring-is-up\": \t\t\t{ \"type\": \"boolean\" }",
															"                                            },",
															"                                        },",
															"                                        \"pure-ethernet-structure-current-problems\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"current-problem-list\": \t\t\t\t\t{ \"type\": \"array\"  },",
															"                                                \"number-of-current-problems\": \t\t\t\t{ \"type\": \"number\" },",
															"                                                \"time-of-latest-change\": \t\t\t\t\t{ \"type\": \"string\" }",
															"                                            },",
															"                                        },",
															"                                        \"pure-ethernet-structure-current-performance\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"current-performance-data-list\":\t\t\t{ \"type\": \"array\"  },",
															"                                                \"number-of-current-performance-sets\": \t\t{ \"type\": \"number\" }",
															"                                            },",
															"                                        },",
															"                                        \"pure-ethernet-structure-historical-performances\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"historical-performance-data-list\": \t\t{ \"type\": \"array\"  },",
															"                                                \"number-of-historical-performance-sets\": \t{ \"type\": \"number\" },",
															"                                                \"time-of-latest-change\": \t\t\t\t\t{ \"type\": \"string\" }",
															"                                            },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"local-id\": \t\t\t\t\t                            { \"type\": \"string\" },",
															"                                \"name\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"label\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"extension\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"operational-state\":     \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"administrative-control\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"administrative-state\":    \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"lifecycle-state\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                                \"address\": \t\t\t\t\t                                { \"type\": \"string\" },",
															"                            },",
															"                            \"required\": [",
															"                                \"layer-protocol-name\",",
															"                                \"pure-ethernet-structure-2-0:pure-ethernet-structure-pac\",",
															"                                \"local-id\",",
															"                            ],",
															"                        },",
															"                    },",
															"                    \"external-managed-id\": {",
															"                        \"type\": \"object\",",
															"                        \"properties\": {",
															"                            \"manager-identifier\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                            \"external-managed-uuid\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                        },",
															"                    },",
															"                    \"local-id\": \t\t\t\t\t                            { \"type\": \"string\" },",
															"                    \"uuid\": \t\t\t\t\t                                { \"type\": \"string\" },",
															"                    \"name\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"value\":                                        { \"type\": \"string\" },",
															"                            },",
															"                        },",
															"                    },",
															"                    \"label\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"value\":                                        { \"type\": \"string\" },",
															"                            },",
															"                        },",
															"                    },",
															"                    \"extension\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"value\":                                        { \"type\": \"string\" },",
															"                            },",
															"                        },",
															"                    },",
															"                    \"operational-state\":     \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"administrative-control\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"administrative-state\":    \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"lifecycle-state\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                    \"address\": \t\t\t\t\t                                { \"type\": \"string\" },",
															"                },",
															"                \"required\": [",
															"                    \"server-ltp\",",
															"                    \"layer-protocol\",",
															"                    \"uuid\",",
															"                    \"name\",",
															"                ],",
															"            },",
															"        },",
															"    },",
															"    \"required\": [",
															"        \"core-model-1-4:logical-termination-point\",",
															"    ]",
															"};",
															"pm.variables.set(\"schema\", PURE_ETHERNET_STRUCTURE_LTP_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\", \"\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PacCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------Checking PureEthernetStructure_Pac for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* PacCompleteness",
															"* ",
															"* This Request is for validating PureEthernetStructure Pac Objects against definition ",
															"* PureEthernetStructure_Pac_2.0.0-tsp.200122.1325",
															"* as it can be found on https://github.com/openBackhaul/pureEthernetStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the *_Pac class",
															"*  - availability of all attributes in this particular class",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"pac\";             // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 3;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let PURE_ETHERNET_STRUCTURE_PAC_SCHEMA = {",
															"    \"type\": \"object\",",
															"\t\"properties\": {",
															"        \"pure-ethernet-structure-capability\": {",
															"\t\t\t\"type\": \"object\",",
															"            \"properties\": {",
															"\t\t\t\t\"supported-alarm-list\": \t\t\t\t\t{ \"type\": \"array\"   },",
															"\t\t\t\t\"performance-monitoring-is-avail\":\t\t\t{ \"type\": \"boolean\" }",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"pure-ethernet-structure-configuration\":{",
															"\t\t\t\"type\": \"object\",",
															"            \"properties\": {",
															"\t\t\t\t\"problem-kind-severity-list\": \t\t\t\t{ \"type\": \"array\"   }, ",
															"\t\t\t\t\"g-826-threshold-cross-alarm-list\": \t\t{ \"type\": \"array\"   },",
															"\t\t\t\t\"clearing-threshold-cross-alarms-is-on\":\t{ \"type\": \"boolean\" },  ",
															"\t\t\t\t\"performance-monitoring-is-on\": \t\t\t{ \"type\": \"boolean\" }",
															"\t\t\t}\t\t\t",
															"\t\t},",
															"\t\t\"pure-ethernet-structure-status\": {",
															"\t\t\t\"type\": \"object\",",
															"            \"properties\": {",
															"\t\t\t\t\"segment-status-list\": \t\t\t\t\t\t{ \"type\": \"array\"   },",
															"\t\t\t\t\"performance-monitoring-is-up\": \t\t\t{ \"type\": \"boolean\" }",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"pure-ethernet-structure-current-problems\": {",
															"\t\t\t\"type\": \"object\",",
															"            \"properties\": {",
															"\t\t\t\t\"current-problem-list\": \t\t\t\t\t{ \"type\": \"array\"  },",
															"\t\t\t\t\"number-of-current-problems\": \t\t\t\t{ \"type\": \"number\" },",
															"                \"time-of-latest-change\": \t\t\t\t\t{ \"type\": \"string\" }",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"pure-ethernet-structure-current-performance\": {",
															"\t\t\t\"type\": \"object\",",
															"            \"properties\": {",
															"\t\t\t\t\"current-performance-data-list\":\t\t\t{ \"type\": \"array\"  },",
															"\t\t\t\t\"number-of-current-performance-sets\": \t\t{ \"type\": \"number\" }",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"pure-ethernet-structure-historical-performances\": {",
															"\t\t\t\"type\": \"object\",",
															"            \"properties\": {",
															"\t\t\t\t\"historical-performance-data-list\": \t\t{ \"type\": \"array\"  },",
															"\t\t\t\t\"number-of-historical-performance-sets\": \t{ \"type\": \"number\" },",
															"                \"time-of-latest-change\": \t\t\t\t\t{ \"type\": \"string\" }",
															"\t\t\t}",
															"\t\t}",
															"\t},",
															"\t\"required\": [\"pure-ethernet-structure-capability\",",
															"\t\t\t\t\"pure-ethernet-structure-configuration\",",
															"\t\t\t\t\"pure-ethernet-structure-status\",",
															"\t\t\t\t\"pure-ethernet-structure-current-problems\",",
															"\t\t\t\t\"pure-ethernet-structure-current-performance\",",
															"\t\t\t\t\"pure-ethernet-structure-historical-performances\"",
															"    ]",
															"};",
															"",
															"pm.variables.set(\"schema\", PURE_ETHERNET_STRUCTURE_PAC_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CapabilityCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------------Checking PureEthernetStructureCapability for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* CapabilityCompleteness",
															"* ",
															"* This Request is for validating PureEthernetStructure Capability Objects against definition ",
															"* PureEthernetStructure_2.0.0-tsp.200122.1325",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/pureEthernetStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Capability class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let PURE_ETHERNET_STRUCTURE_CAPABILITY_SCHEMA = {",
															"\t\"type\": \"object\",",
															"\t\"properties\": {",
															"\t\t\"supported-alarm-list\": {",
															"            \"type\": \"array\",",
															"            \"item\":                          { \"type\": \"string\" }",
															"\t\t},",
															"\t\t\"performance-monitoring-is-avail\":\t { \"type\": \"boolean\" }",
															"\t},",
															"\t\"required\": [ \"supported-alarm-list\", ",
															"\t\t\t\t    \"performance-monitoring-is-avail\"",
															"\t]",
															"};",
															"",
															"pm.variables.set(\"schema\", PURE_ETHERNET_STRUCTURE_CAPABILITY_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ConfigurationCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n----------------Checking PureEthernetStructureConfiguration for Completeness------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ConfigurationCompleteness",
															"* ",
															"* This Request is for validating PureEthernetStructure Configuration Objects against definition ",
															"* PureEthernetStructure_2.0.0-tsp.200122.1325",
															"* as it can be found on https://github.com/openBackhaul/pureEthernetStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Configuration class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let PURE_ETHERNET_STRUCTURE_CONFIGURATION_SCHEMA = {",
															"\t\"type\": \"object\",",
															"\t\"properties\": {",
															" \t\t\"problem-kind-severity-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"    \t\t\t\t\"problem-kind-name\": \t\t\t\t{ \"type\": \"string\" },",
															"    \t\t\t\t\"problem-kind-severity\": { \"enum\": [",
															"    \t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_NON_ALARMED\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_WARNING\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_MINOR\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_MAJOR\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_CRITICAL\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\"",
															"    \t\t\t\t\t\t\t\t\t\t   ]",
															"    \t\t\t\t}",
															"\t\t\t    },",
															"\t\t\t    \"required\": [\"problem-kind-name\",",
															"\t\t\t                    \"problem-kind-severity\"",
															"\t\t\t    ]",
															"\t\t\t}",
															"\t\t},",
															" \t\t\"g-826-threshold-cross-alarm-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"    \t\t\t\t\"g-826-value-kind\": { \"enum\": [",
															"    \t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:G_826_TYPE_ES\",",
															"    \t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:G_826_TYPE_SES\",",
															"    \t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:G_826_TYPE_CSES\",",
															"    \t\t\t\t\t\t\t\t\t    \"pure-ethernet-structure-2-0:G_826_TYPE_UAS\",",
															"    \t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:G_826_TYPE_NOT_SPECIFIED\"",
															"    \t\t\t\t\t\t\t\t\t  ]",
															"    \t\t\t\t},",
															"    \t\t\t\t\"alarm-raising-threshold\": \t\t\t{ \"type\": \"number\" },",
															"    \t\t\t\t\"alarm-clearing-threshold\": \t\t{ \"type\": \"number\" },",
															"    \t\t\t\t\"granularity-period\": { \"enum\": [",
															"    \t\t\t\t\t\t\t\t\t    \t\"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"    \t\t\t\t\t\t\t\t\t\t]",
															"    \t\t\t\t}",
															"\t\t\t    },",
															"\t\t\t    \"required\": [\"g-826-value-kind\",",
															"\t\t\t                    \"alarm-raising-threshold\",",
															"\t\t\t                    \"alarm-clearing-threshold\",",
															"\t\t\t                    \"granularity-period\"",
															"\t\t\t    ]",
															"\t\t\t}",
															"\t\t}, \t\t\t",
															"\t\t\"clearing-threshold-cross-alarms-is-on\":        { \"type\": \"boolean\" },",
															"\t\t\"performance-monitoring-is-on\": \t\t        { \"type\": \"boolean\" }",
															"\t},",
															" \t\"required\": [ \"problem-kind-severity-list\", ",
															"\t\t\t      \"g-826-threshold-cross-alarm-list\",",
															"\t\t\t\t  \"clearing-threshold-cross-alarms-is-on\",",
															"\t\t\t\t  \"performance-monitoring-is-on\"",
															"    ]\t\t",
															"};",
															"",
															"try {",
															"    if (capability[\"supported-alarm-list\"][0] === \"Supported alarms not yet defined.\") {",
															"        pm.variables.set(\"schemaToBeShortened\", PURE_ETHERNET_STRUCTURE_CONFIGURATION_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"problem-kind-severity-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        PURE_ETHERNET_STRUCTURE_CONFIGURATION_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"",
															"        pm.variables.set(\"schemaToBeShortened\", PURE_ETHERNET_STRUCTURE_CONFIGURATION_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"g-826-threshold-cross-alarm-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        PURE_ETHERNET_STRUCTURE_CONFIGURATION_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"",
															"        CouldPureEthernetStructureConfigurationBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldPureEthernetStructureConfigurationBeShortened(false);",
															"}",
															"",
															"pm.variables.set(\"schema\", PURE_ETHERNET_STRUCTURE_CONFIGURATION_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldPureEthernetStructureConfigurationBeShortened(success) {",
															"    pm.test(\"CouldPureEthernetStructureConfigurationBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "StatusCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------------Checking PureEthernetStructureStatus for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* StatusCompleteness",
															"* ",
															"* This Request is for validating PureEthernetStructure Status Objects against definition ",
															"* PureEthernetStructure_2.0.0-tsp.200122.1325",
															"* as it can be found on https://github.com/openBackhaul/pureEthernetStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Status class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"status\";          // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let PURE_ETHERNET_STRUCTURE_STATUS_SCHEMA = {",
															"\t\"type\": \"object\",",
															"\t\"properties\": {",
															"\t\t\"segment-status-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": { ",
															"\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\"segment-status-type-id\": \t    { \"type\": \"number\" },",
															"\t\t\t\t\t\"operational-status\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:OPERATIONAL_STATE_TYPE_ENABLED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:OPERATIONAL_STATE_TYPE_DISABLED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:OPERATIONAL_STATE_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t    ]",
															"\t\t\t\t\t}",
															"\t\t\t\t},",
															"\t\t\t\t\"required\": [ \"segment-status-type-id\", ",
															"\t\t\t\t\t\t\t    \"operational-status\"",
															"\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"performance-monitoring-is-up\":             { \"type\": \"boolean\" }",
															"\t},",
															"\t\"required\": [ \"segment-status-list\", ",
															"\t\t\t\t    \"performance-monitoring-is-up\"",
															"\t]\t",
															"};",
															"pm.variables.set(\"schema\", PURE_ETHERNET_STRUCTURE_STATUS_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentProblemsCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------Checking PureEthernetStructureCurrentProblems for Completeness-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* CurrentProblemsCompleteness",
															"* ",
															"* This Request is for validating PureEthernetStructure CurrentProblems Objects against definition ",
															"* PureEthernetStructure_2.0.0-tsp.200122.1325",
															"* as it can be found on https://github.com/openBackhaul/pureEthernetStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the CurrentProblems class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"current-problems\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let PURE_ETHERNET_STRUCTURE_CURRENT_PROBLEMS_SCHEMA = {",
															"    \"type\": \"object\",",
															"    \"properties\": {",
															"\t\t\"current-problem-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"\t\t\t\t\t\"problem-name\": \t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"sequence-number\": \t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\"timestamp\": \t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"problem-severity\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_NON_ALARMED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_WARNING\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_MINOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_MAJOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_CRITICAL\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\"\t",
															"\t\t\t\t\t\t\t\t\t\t  ]",
															"\t\t\t\t\t}",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"problem-name\", ",
															"\t\t\t\t\t\t\t    \"sequence-number\",",
															"\t\t\t\t\t\t\t    \"timestamp\",",
															"\t\t\t\t\t\t\t    \"problem-severity\"\t",
															"\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-current-problems\": \t\t\t{ \"type\": \"number\" },",
															"\t\t\"time-of-latest-change\": \t\t\t\t{ \"type\": \"string\" }",
															"\t},",
															"\t\"required\": [ \"current-problem-list\",",
															"\t                \"number-of-current-problems\",",
															"\t                \"time-of-latest-change\"",
															"\t]",
															"};",
															"",
															"try {",
															"    if (capability[\"supported-alarm-list\"][0] === \"Supported alarms not yet defined.\") {",
															"        pm.variables.set(\"schemaToBeShortened\", PURE_ETHERNET_STRUCTURE_CURRENT_PROBLEMS_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"current-problem-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        PURE_ETHERNET_STRUCTURE_CURRENT_PROBLEMS_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"        CouldPureEthernetStructureCurrentProblemsBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldPureEthernetStructureCurrentProblemsBeShortened(false);",
															"}",
															"",
															"pm.variables.set(\"schema\", PURE_ETHERNET_STRUCTURE_CURRENT_PROBLEMS_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldPureEthernetStructureCurrentProblemsBeShortened(success) {",
															"    pm.test(\"CouldPureEthernetStructureCurrentProblemsBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentPerformanceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------Checking PureEthernetStructureCurrentPerformance for Completeness----------------\");",
															"/****************************************************************************************",
															"* ",
															"* CurrentPerformanceCompleteness",
															"* ",
															"* This Request is for validating PureEthernetStructure CurrentPerformance Objects against definition ",
															"* PureEthernetStructure_2.0.0-tsp.200122.1325",
															"* as it can be found on https://github.com/openBackhaul/PureEthernetStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the CurrentPerformance class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"current-performance\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let PURE_ETHERNET_STRUCTURE_CURRENT_PERFORMANCE_SCHEMA = {",
															"\t\"type\": \"object\",",
															"\t\"properties\": {",
															"\t\t\"current-performance-data-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"\t\t\t\t\t\"performance-data\": {",
															"\t\t\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\"time-period\": \t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"es\": \t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"ses\": \t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"cses\": \t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"unavailability\": \t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"rx-level-min\": \t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"rx-level-max\": \t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"rx-level-avg\": \t\t\t\t{ \"type\": \"number\" }",
															"\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\"required\": [ \"time-period\",",
															"\t\t\t\t\t\t\t\t\t    \"es\", ",
															"\t\t\t\t\t\t\t\t\t    \"ses\",",
															"\t\t\t\t\t\t\t\t\t    \"cses\",",
															"\t\t\t\t\t\t\t\t\t    \"unavailability\",",
															"\t\t\t\t\t\t\t\t\t    \"rx-level-min\",",
															"\t\t\t\t\t\t\t\t\t    \"rx-level-max\",",
															"\t\t\t\t\t\t\t\t\t    \"rx-level-avg\"",
															"\t\t\t\t\t\t]",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"timestamp\": \t\t\t\t\t    \t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"suspect-interval-flag\": \t\t    \t{ \"type\": \"boolean\" },",
															"\t\t\t\t\t\"elapsed-time\": \t\t\t\t    \t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"scanner-id\": \t\t\t\t\t    \t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"granularity-period\":{ \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t\t}",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"performance-data\",",
															"    \t\t\t\t\t\t\t\"timestamp\",",
															"    \t\t\t\t\t\t\t\"suspect-interval-flag\",",
															"    \t\t\t\t\t\t\t\"elapsed-time\",",
															"    \t\t\t\t\t\t\t\"scanner-id\",",
															"    \t\t\t\t\t\t\t\"granularity-period\"",
															"\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-current-performance-sets\":\t\t          { \"type\": \"number\" }",
															"\t},",
															"\t\"required\":\t[ \"current-performance-data-list\",",
															"\t                \"number-of-current-performance-sets\"",
															"\t]",
															"};",
															"",
															"try {",
															"    if (capability[\"performance-monitoring-is-avail\"]===false) {",
															"        pm.variables.set(\"schemaToBeShortened\", PURE_ETHERNET_STRUCTURE_CURRENT_PERFORMANCE_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"current-performance-data-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        PURE_ETHERNET_STRUCTURE_CURRENT_PERFORMANCE_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"        CouldPureEthernetStructureCurrentPerformanceBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldPureEthernetStructureCurrentPerformanceBeShortened(false);",
															"}",
															"pm.variables.set(\"schema\", PURE_ETHERNET_STRUCTURE_CURRENT_PERFORMANCE_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldPureEthernetStructureCurrentPerformanceBeShortened(success) {",
															"    pm.test(\"CouldPureEthernetStructureCurrentPerformanceBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Required Input Parameters\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");\r",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);\r",
															"} catch (error) {\r",
															"    CouldValidatingCompletenessBeLoaded();\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting up Local Variables and Calling for Validating Completeness\r",
															"****************************************************************************************/\r",
															"pm.variables.set(\"response\", pm.response);\r",
															"\r",
															"try {\r",
															"    eval(ValidatingCompleteness)();\r",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);\r",
															"} catch (error) {\r",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Clearing Local Variables\r",
															"****************************************************************************************/\r",
															"pm.variables.clear();\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															" * Self Testing Functions\r",
															" ****************************************************************************************/\r",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {\r",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {\r",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");\r",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);\r",
															"    });\r",
															"}\r",
															"\r",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {\r",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {\r",
															"        pm.expect(success).to.be.true;\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "HistoricalPerformancesCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n------------Checking PureEthernetStructureHistoricalPerformances for Completeness-------------\");",
															"/*******************************************************************************",
															"* ",
															"* HistoricalPerformancesCompleteness",
															"* ",
															"* This Request is for validating PureEthernetStructure HistoricalPerformances Objects against definition ",
															"* PureEthernetStructure_2.0.0-tsp.200122.1325",
															"* as it can be found on https://github.com/openBackhaul/pureEthernetStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the HistoricalPerformances class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"*******************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"historical-performances\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let PURE_ETHERNET_STRUCTURE_HISTORICAL_PERFORMANCES_SCHEMA = {",
															"\t\"type\": \"object\",",
															"\t\"properties\": {",
															"\t\t\"historical-performance-data-list\": {",
															"\t\t\t\"type\": \"array\",",
															"            \"items\": {",
															"            \t\"type\": \"object\",",
															"            \t\"properties\": {",
															"\t\t\t\t\t\"performance-data\": {",
															"\t\t\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\"time-period\": \t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"es\": \t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"ses\": \t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"cses\": \t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"unavailability\": \t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"rx-level-min\": \t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"rx-level-max\": \t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"rx-level-avg\": \t\t\t\t{ \"type\": \"number\" }",
															"\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\"required\": [ \"time-period\",",
															"    \t\t\t\t\t\t\t\t\t\"es\", ",
															"    \t\t\t\t\t\t\t\t\t\"ses\",",
															"    \t\t\t\t\t\t\t\t\t\"cses\",",
															"    \t\t\t\t\t\t\t\t\t\"unavailability\",",
															"    \t\t\t\t\t\t\t\t\t\"rx-level-min\",",
															"    \t\t\t\t\t\t\t\t\t\"rx-level-max\",",
															"    \t\t\t\t\t\t\t\t\t\"rx-level-avg\"",
															"\t\t\t\t\t\t]",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"suspect-interval-flag\": \t\t    \t{ \"type\": \"boolean\" },",
															"\t\t\t\t\t\"history-data-id\": \t\t\t\t    \t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"period-end-time\": \t\t\t\t    \t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"granularity-period\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t \"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\t\t\t \"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"\t\t\t\t\t\t\t\t\t\t\t \"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"\t\t\t\t\t\t\t\t\t\t\t \"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t    ]",
															"\t\t\t\t\t}",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"performance-data\",",
															"\t\t\t\t\t\t\t    \"suspect-interval-flag\",",
															"\t\t\t\t\t\t\t    \"history-data-id\",",
															"\t\t\t\t\t\t\t    \"period-end-time\",",
															"\t\t\t\t\t\t\t    \"granularity-period\"",
															"\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-historical-performance-sets\":\t\t    { \"type\": \"number\" },",
															"\t\t\"time-of-latest-change\": \t\t\t\t            { \"type\": \"string\" }",
															"\t},",
															"\t\"required\":\t[ \"historical-performance-data-list\",",
															"\t                \"number-of-historical-performance-sets\",",
															"\t                \"time-of-latest-change\"",
															"\t]",
															"};",
															"",
															"try {",
															"    if (capability[\"performance-monitoring-is-avail\"]===false) {",
															"        pm.variables.set(\"schemaToBeShortened\", PURE_ETHERNET_STRUCTURE_HISTORICAL_PERFORMANCES_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"historical-performance-data-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        PURE_ETHERNET_STRUCTURE_HISTORICAL_PERFORMANCES_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"        CouldPureEthernetStructureHistoricalPerformancesBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldPureEthernetStructureHistoricalPerformancesBeShortened(false);",
															"}",
															"pm.variables.set(\"schema\", PURE_ETHERNET_STRUCTURE_HISTORICAL_PERFORMANCES_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldPureEthernetStructureHistoricalPerformancesBeShortened(success) {",
															"    pm.test(\"CouldPureEthernetStructureHistoricalPerformancesBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NetworkRestoration",
									"item": [
										{
											"name": "SettingOriginalInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------------Restoring the Original Interface Configuration Again-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting the Original Interface Configuration Again",
															"* ",
															"* This Request is for restoring the configuration from before the interface validation ",
															"* on the device.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"        ",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration",
															"                                                   );",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    completeClassName = moduleUnderTest + \":\" + technologyUnderTest + \"-configuration\";",
															"    configuration = AddHeadlineToDataObject(configuration, completeClassName);",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched back on original values.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched back on original values.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointPureEthernetStructureCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------ReversalPoint of PureEthernetStructure Validation for Completeness---------------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointPureEthernetStructureCompleteness\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointPureEthernetStructureCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-----------------------Terminating PureEthernetStructureCompleteness--------------------------\");",
															"/****************************************************************************************",
															" * ",
															" * ExitPoint",
															" * ",
															" * This Request is for clearing the Collection variables and terminating the TestCase",
															" * ",
															" ****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															" * Required Input Parameters",
															" ****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Clearing all Collection Variables for Terminating the TestCase",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Setting up Local Variables and Preparing the Request",
															" ****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({",
															"        key: \"Accept\",",
															"        value: \"application/json\"",
															"    });",
															"} catch (error) {}",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, controller, indexOfDeviceUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function() {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function() {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "PureEthernetStructureConfiguration",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n\\n========================== PureEthernetStructureConfiguration.1 ===========================\");",
															"",
															"/****************************************************************************************",
															"* ",
															"* RequestCollection for validating Configuration of PureEthernetStructure Objects against definition ",
															"* ",
															"*                   PureEthernetStructure_2.0.0-tsp.200122.1325",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/pureEthernetStructure/tree/tsp",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Manual Definition of the Mode of Operation of this TestCase",
															"* ",
															"* It is recommended to apply this TestCase on devices on the local (not remote) site",
															"* of the microwave connection, otherwise the management connection might break and ",
															"* configurations, which are done during the validation, cannot be reversed.",
															"* ",
															"****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"one\"; // \"none\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"pure-ethernet-structure-2-0:pure-ethernet-structure-pac\"; // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"CONFIGURATION_VALIDATION_RESULTS = {};",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"pm.collectionVariables.set(\"configurationValidationResults\", CONFIGURATION_VALIDATION_RESULTS);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function () {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function () {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DefiningDummyValuesAndEvaluations()",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n----------Defining DummyValues and Evaluation Criteria in Configuration Validation--------\");",
															"/****************************************************************************************",
															"* ",
															"* Definition of DefiningDummyValuesAndEvaluations()",
															"*  ",
															"* Functions for Defining DummyValues and Evaluation Criteria in all Configuration Validations.",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Provided Collection Variables ",
															"****************************************************************************************/",
															"class Attribute {",
															"    constructor(CreatingDummyValueAsaString,",
															"                    EvaluatingFeatureSupportAsaString,",
															"                    defaultValueForStandardEvaluation,",
															"                    EvaluatingResultAsaString) {",
															"        this.CreatingDummyValueAsaString = CreatingDummyValueAsaString;",
															"        this.EvaluatingFeatureSupportAsaString = EvaluatingFeatureSupportAsaString;",
															"        this.defaultValueForStandardEvaluation = defaultValueForStandardEvaluation;",
															"        this.EvaluatingResultAsaString = EvaluatingResultAsaString;",
															"    }",
															"}",
															"var attributes = [];",
															"",
															"var CreatingDummyValueAsaString;",
															"var EvaluatingFeatureSupportAsaString;",
															"var defaultValueForStandardEvaluation;",
															"var EvaluatingResultAsaString;",
															"var newAttribute;",
															"",
															"// problem-kind-severity-list/problem-kind-severity",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n---------Checking Configuration of problem-kind-severity-list/problem-kind-severity--------\");",
															"        ",
															"        var DATATYPE_UNDER_TEST = \"problem-kind-severity-list\";",
															"        var DATATYPE_INDEX_UNDER_TEST = 0;",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"problem-kind-name\";",
															"        var ATTRIBUTE_UNDER_TEST = \"problem-kind-severity\";",
															"",
															"        var dummyValue;",
															"        try {",
															"            let currentValue;",
															"            currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"            if (currentValue !== \"pure-ethernet-structure-2-0:SEVERITY_TYPE_MINOR\") {",
															"                dummyValue  = \"pure-ethernet-structure-2-0:SEVERITY_TYPE_MINOR\";",
															"            } else {",
															"                dummyValue = \"pure-ethernet-structure-2-0:SEVERITY_TYPE_MAJOR\";",
															"            }",
															"",
															"            keysOfDatatypeInstanceUnderTest[0].value",
															"                = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[0].key];",
															"        } catch (error) {",
															"            dummyValue = \"-1\";",
															"        }",
															"",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"",
															"        // Self Testing Function",
															"",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var supportedAlarmList = [];",
															"        try {",
															"            supportedAlarmList = capability[\"supported-alarm-list\"];",
															"            if ( (supportedAlarmList.length>0) && (supportedAlarmList[0]!==\"Supported alarms not yet defined.\") ) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            }",
															"            CouldSupportedAlarmListBeEvaluated(supportedAlarmList, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        } catch (error) {",
															"            CouldSupportedAlarmListBeEvaluated(supportedAlarmList, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        }",
															"        ",
															"        // Self Testing Functions",
															"        function CouldSupportedAlarmListBeEvaluated(supportedAlarmList, capabilitiesAreIndicatingThatFeatureNotSupported) {",
															"            pm.test(\"CouldSupportedAlarmListBeEvaluated\", function () {",
															"                pm.expect(supportedAlarmList).to.be.an(\"array\");",
															"                pm.expect(supportedAlarmList.length).to.be.at.least(1);",
															"                pm.expect(capabilitiesAreIndicatingThatFeatureNotSupported).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"pure-ethernet-structure-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// g-826-threshold-cross-alarm-list/alarm-raising-threshold",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----Checking Configuration of g-826-threshold-cross-alarm-list/alarm-raising-threshold-----\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"g-826-threshold-cross-alarm-list\";",
															"        var DATATYPE_INDEX_UNDER_TEST = 0;",
															"        var keysOfDatatypeInstanceUnderTest = [{},{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"g-826-value-kind\";",
															"        keysOfDatatypeInstanceUnderTest[1].key = \"granularity-period\";",
															"        var ATTRIBUTE_UNDER_TEST = \"alarm-raising-threshold\";",
															"",
															"        var dummyValue;",
															"        try {",
															"            let currentValue;",
															"            currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"            dummyValue =  currentValue + 1 + Math.floor(Math.random() * 9);",
															"",
															"            keysOfDatatypeInstanceUnderTest[0].value = ",
															"                    configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[0].key];",
															"            keysOfDatatypeInstanceUnderTest[1].value = ",
															"                    configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[1].key];",
															"        } catch (error) {",
															"            dummyValue = -1 ;",
															"        }",
															"",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"",
															"        // Self Testing Function",
															"",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"    ",
															"    EvaluatingFeatureSupport = () => {",
															"        var supportedAlarmList = [];",
															"        try {",
															"            supportedAlarmList = capability[\"supported-alarm-list\"];",
															"            if ( (supportedAlarmList.length>0) && (supportedAlarmList[0]!==\"Supported alarms not yet defined.\") ) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            }",
															"            CouldSupportedAlarmListBeEvaluated(supportedAlarmList, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        } catch (error) {",
															"            CouldSupportedAlarmListBeEvaluated(supportedAlarmList, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        }",
															"        ",
															"        // Self Testing Functions",
															"        function CouldSupportedAlarmListBeEvaluated(supportedAlarmList, capabilitiesAreIndicatingThatFeatureNotSupported) {",
															"            pm.test(\"CouldSupportedAlarmListBeEvaluated\", function () {",
															"                pm.expect(supportedAlarmList).to.be.an(\"array\");",
															"                pm.expect(supportedAlarmList.length).to.be.at.least(1);",
															"                pm.expect(capabilitiesAreIndicatingThatFeatureNotSupported).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// g-826-threshold-cross-alarm-list/alarm-clearing-threshold",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----Checking Configuration of g-826-threshold-cross-alarm-list/alarm-clearing-threshold----\");",
															"        ",
															"        var DATATYPE_UNDER_TEST = \"g-826-threshold-cross-alarm-list\";",
															"        var DATATYPE_INDEX_UNDER_TEST = 0;",
															"        var keysOfDatatypeInstanceUnderTest = [{},{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"g-826-value-kind\";",
															"        keysOfDatatypeInstanceUnderTest[1].key = \"granularity-period\";",
															"        var ATTRIBUTE_UNDER_TEST = \"alarm-clearing-threshold\";",
															"",
															"        var dummyValue;",
															"        try {",
															"            let currentValue;",
															"            currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"            dummyValue =  currentValue + 1 + Math.floor(Math.random() * 9);",
															"",
															"            keysOfDatatypeInstanceUnderTest[0].value = ",
															"                    configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[0].key];",
															"            keysOfDatatypeInstanceUnderTest[1].value = ",
															"                    configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[1].key];",
															"        } catch (error) {",
															"            dummyValue = -1;",
															"        }",
															"",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"",
															"        // Self Testing Function",
															"",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var supportedAlarmList = [];",
															"        try {",
															"            supportedAlarmList = capability[\"supported-alarm-list\"];",
															"            if ( (supportedAlarmList.length>0) && (supportedAlarmList[0]!==\"Supported alarms not yet defined.\") ) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            }",
															"            CouldSupportedAlarmListBeEvaluated(supportedAlarmList, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        } catch (error) {",
															"            CouldSupportedAlarmListBeEvaluated(supportedAlarmList, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        }",
															"        ",
															"        // Self Testing Functions",
															"        function CouldSupportedAlarmListBeEvaluated(supportedAlarmList, capabilitiesAreIndicatingThatFeatureNotSupported) {",
															"            pm.test(\"CouldSupportedAlarmListBeEvaluated\", function () {",
															"                pm.expect(supportedAlarmList).to.be.an(\"array\");",
															"                pm.expect(supportedAlarmList.length).to.be.at.least(1);",
															"                pm.expect(capabilitiesAreIndicatingThatFeatureNotSupported).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"    ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// clearing-threshold-cross-alarms-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n---------------Checking Configuration of clearing-threshold-cross-alarms-is-on-------------\");",
															"        ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"clearing-threshold-cross-alarms-is-on\";",
															"",
															"        // Individual Values Definition ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var supportedAlarmList = [];",
															"        try {",
															"            supportedAlarmList = capability[\"supported-alarm-list\"];",
															"            if ( (supportedAlarmList.length>0) && (supportedAlarmList[0]!==\"Supported alarms not yet defined.\") ) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            }",
															"             CouldSupportedAlarmListBeEvaluated(supportedAlarmList, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        } catch (error) {",
															"            CouldSupportedAlarmListBeEvaluated(supportedAlarmList, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        }",
															"        ",
															"        // Self Testing Functions",
															"        function CouldSupportedAlarmListBeEvaluated(supportedAlarmList, capabilitiesAreIndicatingThatFeatureNotSupported) {",
															"            pm.test(\"CouldSupportedAlarmListBeEvaluated\", function () {",
															"                pm.expect(supportedAlarmList).to.be.an(\"array\");",
															"                pm.expect(supportedAlarmList.length).to.be.at.least(1);",
															"                pm.expect(capabilitiesAreIndicatingThatFeatureNotSupported).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);;",
															"",
															"// performance-monitoring-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------Checking Configuration of performance-monitoring-is-on------------------\");",
															"        ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"",
															"        try {",
															"            var dummyValue = !configuration[\"performance-monitoring-is-on\"];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        try {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"performance-monitoring-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"",
															"pm.collectionVariables.set(\"attributes\", attributes);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function ConvertingThisFunctionToString(functionToBeConverted) {",
															"    let functionAsAString = String(functionToBeConverted);",
															"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
															"    return functionAsAString.slice(indexOfFirstCurly);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointPureEthernetStructureConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n----------EntryPoint of PureEthernetStructure Validation of Configuration------------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the PureEthernetStructureConfiguration TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].pureEthernetStructureList.length;",
															"    var maximumIndexOfLtpUnderTest;",
															"    ",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.min( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointPureEthernetStructureConfiguration\");",
															"        console.log(\"Proceeding with terminating PureEthernetStructure validation for Configurability.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Provided Collection Variables ",
															"****************************************************************************************/",
															"INITIAL_INDEX_OF_ATTRIBUTE_UNDER_TEST = 0;",
															"",
															"pm.collectionVariables.set(\"indexOfAttributeUnderTest\", INITIAL_INDEX_OF_ATTRIBUTE_UNDER_TEST);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "CollectionInformationLoading",
									"item": [
										{
											"name": "UploadingInterfaceCapability",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Capabilities-------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the Interface Capabilities",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Configuration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Configuration",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceStatus",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n------------------------------Uploading Interface Status----------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Status",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"status\";          // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Displaying the Collection Variables right before starting the validation",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NetworkPreparation",
									"item": [],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "ValidationRequests",
									"item": [
										{
											"name": "AttributeConfiguration",
											"item": [
												{
													"name": "EntryPointPesAttributeConfiguration",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* EntryPoint",
																	"* ",
																	"* Manages the number of iterations of the AttributeConfiguration Tests ",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var attributes = pm.collectionVariables.get(\"attributes\");",
																	"    var indexOfAttributeUnderTest = pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
																	"    ",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    ",
																	"    CouldTheInputBeLoaded(attributes, indexOfAttributeUnderTest, dummyUri);",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the next Step ",
																	"****************************************************************************************/",
																	"try {",
																	"        ",
																	"    if ( indexOfAttributeUnderTest < attributes.length ) {",
																	"        postman.setNextRequest();",
																	"    } else {",
																	"        postman.setNextRequest(\"ExitPointPesAttributeConfiguration\");",
																	"    }",
																	"        ",
																	"    CouldFurtherProceedingBeDetermined(true);",
																	"} catch (error) {",
																	"    CouldFurtherProceedingBeDetermined(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(attributes, indexOfAttributeUnderTest, dummyUri) {",
																	"    pm.test(\"CouldTheAttributesBeLoaded\", function () {",
																	"        pm.expect(attributes).to.be.an(\"array\");",
																	"    });",
																	"    pm.test(\"CouldIndexOfAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldTheDummyUriBeLoaded\", function () {",
																	"        pm.expect(dummyUri).to.be.a(\"string\");",
																	"        pm.expect(dummyUri).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFurtherProceedingBeDetermined(success) {",
																	"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Writing",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyCode = JSON.parse(pm.response.code);",
																	"    var dummyErrorMessage = \"\";",
																	"    if ( Math.floor(dummyCode/100) !== 2 ) {",
																	"        var dummyErrorMessage = JSON.parse(pm.response.stream).errors.error[0][\"error-message\"];",
																	"    }",
																	"    CouldResponseBeRetrieved(dummyCode, dummyErrorMessage);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", dummyCode);",
																	"pm.variables.set(\"dummyErrorMessage\", dummyErrorMessage);",
																	"",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode, responseErrorMessage) {",
																	"    pm.test(\"CouldTheDummyCodeOfPuttingBeReceived\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldTheErrorMessagePuttingBeComposed\", function () {",
																	"        pm.expect(responseErrorMessage).to.be.a(\"string\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an boolean attribute with the alternate value and",
																	"* providing this value as dummyValueString to the local Variables.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters and Execution",
																	"****************************************************************************************/",
																	"try {",
																	"    var PreRequestOfWritingAsaString = pm.environment.get(\"PreRequestOfWritingAsaString\");",
																	"    eval(PreRequestOfWritingAsaString);",
																	"    CouldPreRequestOfWritingBeExecuted(true);",
																	"} catch (error) {",
																	"    CouldPreRequestOfWritingBeExecuted();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldPreRequestOfWritingBeExecuted(success) {",
																	"    pm.test(\"CouldPreRequestOfWritingBeExecuted\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters and Execution",
																	"****************************************************************************************/",
																	"try {",
																	"    var PreRequestOfReadingAsaString = pm.environment.get(\"PreRequestOfReadingAsaString\");",
																	"    eval(PreRequestOfReadingAsaString);",
																	"    CouldPreRequestOfReadingBeExecuted(true);",
																	"} catch (error) {",
																	"    CouldPreRequestOfReadingBeExecuted();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldPreRequestOfReadingBeExecuted(success) {",
																	"    pm.test(\"CouldPreRequestOfReadingBeExecuted\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters and Execution",
																	"****************************************************************************************/",
																	"try {",
																	"    var PostRequestOfReadingAsaString = pm.environment.get(\"PostRequestOfReadingAsaString\");",
																	"    eval(PostRequestOfReadingAsaString);",
																	"    CouldPostRequestOfReadingBeExecuted(true);",
																	"} catch (error) {",
																	"    CouldPostRequestOfReadingBeExecuted();",
																	"}",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldPostRequestOfReadingBeExecuted(success) {",
																	"    pm.test(\"CouldPostRequestOfReadingBeExecuted\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters and Execution",
																	"****************************************************************************************/",
																	"try {",
																	"    var PreRequestOfEvaluatingAsaString = pm.environment.get(\"PreRequestOfEvaluatingAsaString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    ",
																	"    eval(PreRequestOfEvaluatingAsaString);",
																	"",
																	"    if ( Math.floor(dummyCode/100) !==2 ) {",
																	"        postman.setNextRequest(\"ReversalPointPesAttributeConfiguration\");",
																	"    }",
																	"    ",
																	"    CouldPreRequestOfEvaluatingBeExecuted(true);",
																	"} catch (error) {",
																	"    CouldPreRequestOfEvaluatingBeExecuted();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldPreRequestOfEvaluatingBeExecuted(success) {",
																	"    pm.test(\"CouldPreRequestOfEvaluatingBeExecuted\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters and Execution",
																	"****************************************************************************************/",
																	"try {",
																	"    var PreRequestOfRestoringAsaString = pm.environment.get(\"PreRequestOfRestoringAsaString\");",
																	"    eval(PreRequestOfRestoringAsaString);",
																	"    CouldPreRequestOfRestoringBeExecuted(true);",
																	"} catch (error) {",
																	"    CouldPreRequestOfRestoringBeExecuted();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldPreRequestOfRestoringBeExecuted(success) {",
																	"    pm.test(\"CouldPreRequestOfRestoringBeExecuted\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "ReversalPointPesAttributeConfiguration",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* ReversalPoint",
																	"* ",
																	"* Directs the flow of execution back to the StartPoint",
																	"* ",
																	"****************************************************************************************/",
																	" ",
																	" ",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"        ",
																	"    var indexOfAttributeUnderTest = pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, indexOfAttributeUnderTest);",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Providing Collection Variables for either Repeating or Terminating the TestCase",
																	" ****************************************************************************************/",
																	"var indexOfPotentialNextAttributeUnderTest = indexOfAttributeUnderTest + 1;",
																	"pm.collectionVariables.set(\"indexOfAttributeUnderTest\", indexOfPotentialNextAttributeUnderTest);",
																	"",
																	"postman.setNextRequest(\"EntryPointPesAttributeConfiguration\");",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, indexOfAttributeUnderTest) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"        pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "ExitPointPesAttributeConfiguration",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* ExitPoint",
																	"* ",
																	"* This Request is terminating the Test",
																	"* ",
																	"****************************************************************************************/",
																	" ",
																	" ",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    CouldTheInputBeLoaded(dummyUri);",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "NetworkRestoration",
									"item": [
										{
											"name": "SettingOriginalInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------------Restoring the Original Interface Configuration Again-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting the Original Interface Configuration Again",
															"* ",
															"* This Request is for restoring the configuration from before the interface validation ",
															"* on the device.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"        ",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration",
															"                                                   );",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    completeClassName = moduleUnderTest + \":\" + technologyUnderTest + \"-configuration\";",
															"    configuration = AddHeadlineToDataObject(configuration, completeClassName);",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched back on original values.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched back on original values.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointPureEthernetStructureConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------ReversalPoint of PureEthernetStructure Validation of Configuration--------------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Console.log of Validation Results",
															" ****************************************************************************************/",
															"let allConfigurationValidationResults = { \"allConfigurationValidationResults\" : configurationValidationResults };",
															"console.log(allConfigurationValidationResults);",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointPureEthernetStructureConfiguration\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointPureEthernetStructureConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n----------------------Terminating PureEthernetStructureConfiguration-------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ExitPoint",
															"* ",
															"* This Request is for clearing the Collection variables and terminating the TestCase",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Clearing all Collection Variables for Terminating the TestCase",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, controller, indexOfDeviceUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "TdmContainerValidation",
					"item": [
						{
							"name": "TdmContainerCompleteness",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputCompletenessTdm",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n\\n============================ TdmContainerCompleteness.3 =============================\");",
															"/****************************************************************************************",
															"* ",
															"* RequestCollection for validating Completeness of TdmContainer Objects against definition ",
															"* ",
															"*                   TdmContainer_2.0.0-tsp.191123.1240",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/tdmContainer/tree/tsp",
															"* ",
															"****************************************************************************************/",
															" ",
															"",
															"/****************************************************************************************",
															"* Manual Definition of the Mode of Operation of this TestCase",
															"****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"one\"; // \"none\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"tdm-container-2-0:tdm-container-pac\"; // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function() {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function() {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointTdmContainerCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------EntryPoint of TdmContainer Validation for Completeness-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the TdmContainerCompleteness TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].tdmContainerList.length;",
															"    var maximumIndexOfLtpUnderTest;",
															"    ",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.min( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointTdmContainerCompleteness\");",
															"        console.log(\"Proceeding with terminating TdmContainer validation for Completeness.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceCapability",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Capabilities-------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the Interface Capabilities",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Configuration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Configuration",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Displaying the Collection Variables right before starting the validation",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "NetworkPreparation",
									"item": [
										{
											"name": "SwitchingOnMonitoring",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------------Switching Monitoring On----------------------------------\");",
															"/****************************************************************************************",
															" * ",
															" * Switching Monitoring On",
															" * ",
															" * This Request is for activating collection of performance data on the device under",
															" * test, so the data can be retrieved during validating completeness of the implementation",
															" *  ",
															" ****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															" * Required Input Parameters",
															" ****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, capability, configuration);",
															"} catch (error) {",
															"    CouldInputForSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Forming the Body",
															" ****************************************************************************************/",
															"try {",
															"    let requestBodyString = ('{ \"' + moduleUnderTest + ':performance-monitoring-is-on\": true }');",
															"    var requestBody = JSON.parse(requestBodyString);",
															"    CouldRequestBodyBeFormed(requestBody);",
															"} catch (error) {",
															"    CouldRequestBodyBeFormed();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Setting up Local Variables and Calling for Preparation of the Request",
															" ****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(requestBody);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, capability, configuration) {",
															"    pm.test(\"CouldInputForSwitchingMonitoringOnBeLoaded\", function() {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(configuration).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyBeFormed(requestBody) {",
															"    pm.test(\"CouldRequestBodyBeFormed\", function() {",
															"        pm.expect(requestBody).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, ",
															"                                                keysOfDatatypeInstanceUnderTest,",
															"                                                attributeUnterTest, ",
															"                                                contentType,",
															"                                                filteredDepth, ",
															"                                                filteredFields, ",
															"                                                requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"            \"current-problems\", \"current-performance\",",
															"            \"historical-performances\"",
															"        ]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function() {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched on.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched on.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "ValidationRequests",
									"item": [
										{
											"name": "LtpCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n----------------------Checking TdmContainerLtp for Completeness---------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* This Request is for validating TdmContainerLtp objects against definition ",
															"*",
															"* ONF Core IM 1.4",
															"*",
															"* as it can be found on https://github.com/openBackhaul/core/tree/tsp",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"\";",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 5;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let TDM_CONTAINER_LTP_SCHEMA = {",
															"    \"type\": \"object\",",
															"\t\"properties\": {",
															"        \"core-model-1-4:logical-termination-point\": {",
															"            \"type\": \"array\",",
															"            \"items\": {",
															"                \"type\": \"object\",",
															"                \"properties\": {",
															"                    \"physical-port-reference\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"string\",",
															"                        },",
															"                    },                    ",
															"                    \"connected-ltp\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                    \"supporting-pc\": \t\t\t\t            \t            { \"type\": \"string\" },",
															"                    \"client-ltp\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"string\",",
															"                        },",
															"                    },",
															"                    \"server-ltp\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"string\",",
															"                        },",
															"                    },",
															"                    \"ltp-direction\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                    \"transfer-capacity-pac\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"embedded-clock\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"run-mode\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"encompassed-clock\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },",
															"                                \"encapsulated-fc\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": {",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"uuid\": \t\t\t\t\t                    { \"type\": \"string\" },",
															"                                            \"local-id\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"lifecycle-state\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                                            \"layer-protocol-name\": \t\t\t                { \"type\": \"string\" },",
															"                                            \"administrative-state\":    \t\t\t\t\t    { \"type\": \"string\" },",
															"                                            \"name\": {",
															"                                                \"type\": \"array\",",
															"                                                \"items\": { ",
															"                                                    \"type\": \"object\",",
															"                                                    \"properties\": {",
															"                                                    },",
															"                                                },",
															"                                            },",
															"                                            \"fc-route\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"operational-state\":     \t\t\t\t\t    { \"type\": \"string\" },",
															"                                            \"administrative-control\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                            \"supporting-pc\": \t\t\t\t            \t{ \"type\": \"string\" },",
															"                                            \"service-priority\": \t\t\t                { \"type\": \"string\" },",
															"                                            \"forwarding-direction\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                            \"fc-port\": {",
															"                                                \"type\": \"array\",",
															"                                                \"items\": {",
															"                                                    \"type\": \"object\",",
															"                                                    \"properties\": {",
															"                                                    },",
															"                                                },",
															"                                            },",
															"                                            \"is-protection-lock-out\": \t\t\t\t\t    { \"type\": \"boolean\" },                    ",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"sync-ltp\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },                                ",
															"                                \"encapsulated-casc\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },",
															"                                \"phase-aligned-clock\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },",
															"                                \"local-id\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"configured-client-capacity\": \t\t\t\t\t{ \"type\": \"string\" },",
															"                                \"fc-blocks-signal-to-lp\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                \"lifecycle-state\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                                \"layer-protocol-name\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                                \"termination-state\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                                \"administrative-state\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                \"lp-direction\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                                \"is-protection-lock-out\":            \t\t\t{ \"type\": \"boolean\" },                    ",
															"                                \"operational-state\":     \t\t\t            { \"type\": \"string\" },",
															"                                \"administrative-control\": \t\t\t\t\t    { \"type\": \"string\" },                                ",
															"                                \"name\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"label\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"extension\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"operational-state\":     \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"administrative-control\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"administrative-state\":    \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"lifecycle-state\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                                \"address\": \t\t\t\t\t                                { \"type\": \"string\" },",
															"                            },",
															"                        },",
															"                    },                  ",
															"                    \"peer-ltp\":              \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"ltp-in-other-view\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"string\",",
															"                        },",
															"                    },",
															"                    \"ltp-augment-1-0:ltp-augment-pac\": {",
															"                        \"type\": \"object\",",
															"                        \"properties\": {",
															"                            \"ltp-augment-capability\": {",
															"                                \"type\": \"object\",",
															"                                \"properties\": {",
															"                                    \"equipment\": {",
															"                                        \"type\": \"array\",",
															"                                        \"items\": { ",
															"                                            \"type\": \"string\",",
															"                                        },",
															"                                    },                    ",
															"                                    \"connector\":                                 { \"type\": \"string\" },",
															"                                },",
															"                                \"required\": [",
															"                                    \"equipment\", ",
															"                                    \"connector\",",
															"                                ],",
															"                            },",
															"                        },",
															"                        \"required\": [",
															"                            \"ltp-augment-capability\", ",
															"                        ],",
															"                    },",
															"                    \"layer-protocol\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": {",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"layer-protocol-name\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                                \"configured-client-capacity\": \t\t\t\t\t{ \"type\": \"string\" },",
															"                                \"lp-direction\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                                \"termination-state\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                                \"configuration-and-switch-control\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },",
															"                                \"is-protection-lock-out\":            \t\t\t{ \"type\": \"boolean\" },",
															"                                \"fc-blocks-signal-to-lp\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                \"tdm-container-2-0:tdm-container-pac\": {",
															"                                    \"type\": \"object\",",
															"                                    \"properties\": {",
															"                                        \"tdm-container-capability\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"admin-shut-down-is-avail\": \t\t\t{ \"type\": \"boolean\" }, ",
															"                                                \"performance-monitoring-is-avail\": \t\t{ \"type\": \"boolean\" }, ",
															"                                                \"supported-alarm-list\": \t\t\t\t{ \"type\": \"array\"   }, ",
															"                                                \"supported-loop-back-kind-list\":{ \"enum\": [",
															"                                                                        \"tdm-container-2-0:LOOP_BACK_TYPE_NONE\",",
															"                                                                        \"tdm-container-2-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\",",
															"                                                                        \"tdm-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\",",
															"                                                                        \"tdm-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"",
															"                                                                    ]",
															"                                                }, ",
															"                                                \"maintenance-timer-range\": { \"type\": \"string\" }, ",
															"                                                \"supported-tdm-container-kind-list\": { \"type\": \"array\"   }",
															"                                            }",
															"                                        },",
															"                                        \"tdm-container-configuration\":{",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"interface-name\": \t\t\t\t{ \"type\": \"string\" }, ",
															"                                                \"interface-is-on\": \t\t\t\t{ \"type\": \"boolean\" }, ",
															"                                                \"segment-number\": \t\t\t\t{ \"type\": \"number\" }, ",
															"                                                \"loop-back-kind-on\": \t\t\t",
															"                                                    { \"enum\": [ ",
															"                                                            \"tdm-container-2-0:LOOP_BACK_TYPE_NONE\",",
															"                                                            \"tdm-container-2-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\",",
															"                                                            \"tdm-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\",",
															"                                                            \"tdm-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"",
															"                                                        ] ",
															"                                                    }, ",
															"                                                \"maintenance-timer\": \t\t\t{ \"type\": \"number\" },",
															"                                                \"performance-monitoring-is-on\": { \"type\": \"boolean\" }, \t\t ",
															"                                                \"problem-kind-severity-list\": \t{ \"type\": \"array\"   }, ",
															"                                                \"tdm-container-kind\": \t\t\t{ \"type\": \"string\"   },",
															"                                            },",
															"                                        },",
															"                                        \"tdm-container-status\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"loop-back-kind-up\": ",
															"                                                    {\"enum\": [ ",
															"                                                            \"tdm-container-2-0:LOOP_BACK_TYPE_NONE\",",
															"                                                            \"tdm-container-2-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\",",
															"                                                            \"tdm-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\",",
															"                                                            \"tdm-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"",
															"                                                        ]",
															"                                                    }, ",
															"                                                \"statistics-is-up\": \t\t\t\t\t{\"type\": \"boolean\" }, ",
															"                                                \"performance-monitoring-is-up\": \t\t{\"type\": \"boolean\" }, ",
															"                                                \"interface-status\": ",
															"                                                        {\"enum\": [ ",
															"                                                            \"tdm-container-2-0:INTERFACE_STATUS_TYPE_UP\",",
															"                                                            \"tdm-container-2-0:INTERFACE_STATUS_TYPE_DOWN\",",
															"                                                            \"tdm-container-2-0:INTERFACE_STATUS_TYPE_TESTING\",",
															"                                                            \"tdm-container-2-0:INTERFACE_STATUS_TYPE_UNKNOWN\",",
															"                                                            \"tdm-container-2-0:INTERFACE_STATUS_TYPE_DORMANT\",",
															"                                                            \"tdm-container-2-0:INTERFACE_STATUS_TYPE_NOT_PRESENT\",",
															"                                                            \"tdm-container-2-0:INTERFACE_STATUS_TYPE_LOWER_LAYER_DOWN\",",
															"                                                            \"tdm-container-2-0:INTERFACE_STATUS_TYPE_ADMIN_DOWN\",",
															"                                                            \"tdm-container-2-0:INTERFACE_STATUS_TYPE_NOT_YET_DEFINED\"",
															"                                                            ]",
															"                                                        },",
															"                                            },",
															"                                        },",
															"                                        \"tdm-container-current-problems\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"current-problem-list\": \t\t\t\t\t{ \"type\": \"array\"  },",
															"                                                \"number-of-current-problems\": \t\t\t\t{ \"type\": \"number\" },",
															"                                                \"time-of-latest-change\": \t\t\t\t\t{ \"type\": \"string\" }",
															"                                            },",
															"                                        },",
															"                                        \"tdm-container-current-performance\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"current-performance-data-list\":\t\t\t{ \"type\": \"array\"  },",
															"                                                \"number-of-current-performance-sets\": \t\t{ \"type\": \"number\" }",
															"                                            },",
															"                                        },",
															"                                        \"tdm-container-historical-performances\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"historical-performance-data-list\": \t\t{ \"type\": \"array\"  },",
															"                                                \"number-of-historical-performance-sets\": \t{ \"type\": \"number\" },",
															"                                                \"time-of-latest-change\": \t\t\t\t\t{ \"type\": \"string\" }",
															"                                            },",
															"                                        },",
															"                                    },",
															"                                },\t",
															"                                \"local-id\": \t\t\t\t\t                            { \"type\": \"string\" },",
															"                                \"name\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"label\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"extension\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"operational-state\":     \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"administrative-control\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"administrative-state\":    \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"lifecycle-state\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                                \"address\": \t\t\t\t\t                                { \"type\": \"string\" },",
															"                            },",
															"                            \"required\": [",
															"                                \"layer-protocol-name\",",
															"                                \"tdm-container-2-0:tdm-container-pac\",",
															"                                \"local-id\",",
															"                            ],",
															"                        },",
															"                    },",
															"                    \"external-managed-id\": {",
															"                        \"type\": \"object\",",
															"                        \"properties\": {",
															"                            \"manager-identifier\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                            \"external-managed-uuid\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                        },",
															"                    },",
															"                    \"local-id\": \t\t\t\t\t                            { \"type\": \"string\" },",
															"                    \"uuid\": \t\t\t\t\t                                { \"type\": \"string\" },",
															"                    \"name\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"value\":                                        { \"type\": \"string\" },",
															"                            },",
															"                        },",
															"                    },",
															"                    \"label\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"value\":                                        { \"type\": \"string\" },",
															"                            },",
															"                        },",
															"                    },",
															"                    \"extension\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"value\":                                        { \"type\": \"string\" },",
															"                            },",
															"                        },",
															"                    },",
															"                    \"operational-state\":     \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"administrative-control\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"administrative-state\":    \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"lifecycle-state\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                    \"address\": \t\t\t\t\t                                { \"type\": \"string\" },",
															"                },",
															"                \"required\": [",
															"                    \"server-ltp\",",
															"                    \"layer-protocol\",",
															"                    \"uuid\",",
															"                    \"name\",",
															"                ],",
															"            },",
															"        },",
															"    },",
															"    \"required\": [",
															"        \"core-model-1-4:logical-termination-point\",",
															"    ]",
															"};",
															"pm.variables.set(\"schema\", TDM_CONTAINER_LTP_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\", \"\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PacCompleteness",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------Checking TdmContainer_Pac for Completeness----------------------\");\r",
															"/****************************************************************************************\r",
															"* \r",
															"* PacCompleteness\r",
															"* \r",
															"* This Request is for validating TdmContainer Pac Objects against definition \r",
															"* TdmContainer_2.0.0-tsp.200123.1050\r",
															"* as it can be found on https://github.com/openBackhaul/tdmContainer/tree/tsp\r",
															"*\r",
															"* It checks for \r",
															"*  - reachability of the *_Pac class\r",
															"*  - availability of all attributes in this particular class\r",
															"*  - no additional, vendor specific amendments\r",
															"*\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Required Input Parameters\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");\r",
															"    CouldInputBeLoaded(SettingTheRequestVariables);\r",
															"} catch (error) {\r",
															"    CouldInputBeLoaded();\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting up Local Variables and Calling for Preparation of the Request\r",
															"****************************************************************************************/\r",
															"pm.variables.clear();\r",
															"\r",
															"const CLASS_UNDER_TEST = \"pac\";             // choose from \"pac\", \"capability\", \"configuration\", \r",
															"                                            // \"status\", \"current-problems\", \"current-performance\" \r",
															"                                            // or \"historical-performances\"\r",
															"const DATATYPE_UNDER_TEST = \"\";\r",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];\r",
															"const ATTRIBUTE_UNDER_TEST = \"\";\r",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"\r",
															"const FILTER_DEPTH = 3;                     // number of levels beneath the addressed resource; 0 = all;\r",
															"const FILTERED_FIELDS = \"\";\r",
															"const REQUEST_BODY = \"\";\r",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,\r",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,\r",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);\r",
															"\r",
															"let TDM_CONTAINER_PAC_SCHEMA = {\r",
															"\t\"type\": \"object\",\r",
															"\t\"properties\": {\r",
															"        \"tdm-container-capability\": {\r",
															"\t\t\t\"type\": \"object\",\r",
															"            \"properties\": {\r",
															"\t\t\t\t\"admin-shut-down-is-avail\": \t\t\t{ \"type\": \"boolean\" }, \r",
															"\t\t\t\t\"performance-monitoring-is-avail\": \t\t{ \"type\": \"boolean\" }, \r",
															"\t\t\t\t\"supported-alarm-list\": \t\t\t\t{ \"type\": \"array\"   }, \r",
															"\t\t\t\t\"supported-loop-back-kind-list\":{ \"enum\": [\r",
															"\t\t\t\t\t\t\t\t\t\t\"tdm-container-2-0:LOOP_BACK_TYPE_NONE\",\r",
															"\t\t\t\t\t\t\t\t\t\t\"tdm-container-2-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\",\r",
															"\t\t\t\t\t\t\t\t\t\t\"tdm-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\",\r",
															"\t\t\t\t\t\t\t\t\t\t\"tdm-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"\r",
															"\t\t\t\t\t\t\t\t\t]\r",
															"\t\t\t\t}, \r",
															"\t\t\t\t\"maintenance-timer-range\": { \"type\": \"string\" }, \r",
															"\t\t\t\t\"supported-tdm-container-kind-list\": { \"type\": \"array\"   }\r",
															"\t\t\t}\r",
															"\t\t},\r",
															"\t\t\"tdm-container-configuration\":{\r",
															"\t\t\t\"type\": \"object\",\r",
															"\t\t\t\"properties\": {\r",
															"\t\t\t\t\"interface-name\": \t\t\t\t{ \"type\": \"string\" }, \r",
															"\t\t\t\t\"interface-is-on\": \t\t\t\t{ \"type\": \"boolean\" }, \r",
															"\t\t\t\t\"segment-number\": \t\t\t\t{ \"type\": \"number\" }, \r",
															"\t\t\t\t\"loop-back-kind-on\": \t\t\t\r",
															"\t\t\t\t\t{ \"enum\": [ \r",
															"\t\t\t\t\t\t\t\"tdm-container-2-0:LOOP_BACK_TYPE_NONE\",\r",
															"\t\t\t\t\t\t\t\"tdm-container-2-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\",\r",
															"\t\t\t\t\t\t\t\"tdm-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\",\r",
															"\t\t\t\t\t\t\t\"tdm-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"\r",
															"\t\t\t\t\t\t] \r",
															"\t\t\t\t\t}, \r",
															"\t\t\t\t\"maintenance-timer\": \t\t\t{ \"type\": \"number\" },\r",
															"\t\t\t\t\"performance-monitoring-is-on\": { \"type\": \"boolean\" }, \t\t \r",
															"\t\t\t\t\"problem-kind-severity-list\": \t{ \"type\": \"array\"   }, \r",
															"\t\t\t\t\"tdm-container-kind\": \t\t\t{ \"type\": \"string\"   }\r",
															"\t\t\t}\r",
															"\t\t},\r",
															"\t\t\"tdm-container-status\": {\r",
															"\t\t\t\"type\": \"object\",\r",
															"\t\t\t\"properties\": {\r",
															"\t\t\t\t\"loop-back-kind-up\": \r",
															"\t\t\t\t\t{\"enum\": [ \r",
															"\t\t\t\t\t\t\t\"tdm-container-2-0:LOOP_BACK_TYPE_NONE\",\r",
															"\t\t\t\t\t\t\t\"tdm-container-2-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\",\r",
															"\t\t\t\t\t\t\t\"tdm-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\",\r",
															"\t\t\t\t\t\t\t\"tdm-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"\r",
															"\t\t\t\t\t\t]\r",
															"\t\t\t\t\t}, \r",
															"\t\t\t\t\"statistics-is-up\": \t\t\t\t\t{\"type\": \"boolean\" }, \r",
															"\t\t\t\t\"performance-monitoring-is-up\": \t\t{\"type\": \"boolean\" }, \r",
															"\t\t\t\t\"interface-status\": \r",
															"\t\t\t\t\t\t{\"enum\": [ \r",
															"\t\t\t\t\t\t\t\"tdm-container-2-0:INTERFACE_STATUS_TYPE_UP\",\r",
															"\t\t\t\t\t\t\t\"tdm-container-2-0:INTERFACE_STATUS_TYPE_DOWN\",\r",
															"\t\t\t\t\t\t\t\"tdm-container-2-0:INTERFACE_STATUS_TYPE_TESTING\",\r",
															"\t\t\t\t\t\t\t\"tdm-container-2-0:INTERFACE_STATUS_TYPE_UNKNOWN\",\r",
															"\t\t\t\t\t\t\t\"tdm-container-2-0:INTERFACE_STATUS_TYPE_DORMANT\",\r",
															"\t\t\t\t\t\t\t\"tdm-container-2-0:INTERFACE_STATUS_TYPE_NOT_PRESENT\",\r",
															"\t\t\t\t\t\t\t\"tdm-container-2-0:INTERFACE_STATUS_TYPE_LOWER_LAYER_DOWN\",\r",
															"\t\t\t\t\t\t\t\"tdm-container-2-0:INTERFACE_STATUS_TYPE_ADMIN_DOWN\",\r",
															"\t\t\t\t\t\t\t\"tdm-container-2-0:INTERFACE_STATUS_TYPE_NOT_YET_DEFINED\"\r",
															"\t\t\t\t\t\t\t]\r",
															"\t\t\t\t\t\t}\r",
															"\t\t\t}\r",
															"\t\t},\r",
															"\t\t\"tdm-container-current-problems\": {\r",
															"\t\t\t\"type\": \"object\",\r",
															"            \"properties\": {\r",
															"\t\t\t\t\"current-problem-list\": \t\t\t\t\t{ \"type\": \"array\"  },\r",
															"\t\t\t\t\"number-of-current-problems\": \t\t\t\t{ \"type\": \"number\" },\r",
															"                \"time-of-latest-change\": \t\t\t\t\t{ \"type\": \"string\" }\r",
															"\t\t\t}\r",
															"\t\t},\r",
															"\t\t\"tdm-container-current-performance\": {\r",
															"\t\t\t\"type\": \"object\",\r",
															"            \"properties\": {\r",
															"\t\t\t\t\"current-performance-data-list\":\t\t\t{ \"type\": \"array\"  },\r",
															"\t\t\t\t\"number-of-current-performance-sets\": \t\t{ \"type\": \"number\" }\r",
															"\t\t\t}\r",
															"\t\t},\r",
															"\t\t\"tdm-container-historical-performances\": {\r",
															"\t\t\t\"type\": \"object\",\r",
															"            \"properties\": {\r",
															"\t\t\t\t\"historical-performance-data-list\": \t\t{ \"type\": \"array\"  },\r",
															"\t\t\t\t\"number-of-historical-performance-sets\": \t{ \"type\": \"number\" },\r",
															"                \"time-of-latest-change\": \t\t\t\t\t{ \"type\": \"string\" }\r",
															"\t\t\t}\r",
															"\t\t}\r",
															"\t},\t\r",
															"\t\"required\": [\"tdm-container-capability\",\r",
															"\t\t\t\t\"tdm-container-configuration\",\r",
															"\t\t\t\t\"tdm-container-status\",\r",
															"\t\t\t\t\"tdm-container-current-problems\",\r",
															"\t\t\t\t\"tdm-container-current-performance\",\r",
															"\t\t\t\t\"tdm-container-historical-performances\"\r",
															"    ]\r",
															"};\r",
															"pm.variables.set(\"schema\", TDM_CONTAINER_PAC_SCHEMA);\r",
															"\r",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);\r",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);\r",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);\r",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);\r",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);\r",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);\r",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);\r",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"\r",
															"try {\r",
															"    eval(SettingTheRequestVariables)();\r",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);\r",
															"} catch (error) {\r",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															" * Self Testing Functions\r",
															" ****************************************************************************************/\r",
															"function CouldInputBeLoaded(SettingTheRequestVariables) {\r",
															"    pm.test(\"CouldInputBeLoaded\", function () {\r",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");\r",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);\r",
															"    });\r",
															"}\r",
															"\r",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,\r",
															"    attributeUnterTest, contentType,\r",
															"    filteredDepth, filteredFields, requestBody) {\r",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function () {\r",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",\r",
															"            \"current-problems\", \"current-performance\",\r",
															"            \"historical-performances\"]);\r",
															"    });\r",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function () {\r",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");\r",
															"    });\r",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function () {\r",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");\r",
															"    });\r",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function () {\r",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");\r",
															"    });\r",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function () {\r",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);\r",
															"    });\r",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function () {\r",
															"        pm.expect(filteredDepth).to.be.a(\"number\");\r",
															"    });\r",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function () {\r",
															"        pm.expect(filteredFields).to.be.a(\"string\");\r",
															"    });\r",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function () {\r",
															"        pm.expect(requestBody).to.be.a(\"string\");\r",
															"    });\r",
															"}\r",
															"\r",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {\r",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {\r",
															"        pm.expect(success).to.be.true;\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CapabilityCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------------Checking TdmContainerCapability for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* CapabilityCompleteness",
															"* ",
															"* This Request is for validating TdmContainer Capability Objects against definition ",
															"* TdmContainer_2.0.0-tsp.200123.1050 ",
															"* as it can be found on https://github.com/openBackhaul/tdmContainer/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Capability class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"\tvar SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"\tCouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"\tCouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"\t\t\t\t\t\t\t\t\t\t\t// \"status\", \"current-problems\", \"current-performance\" ",
															"\t\t\t\t\t\t\t\t\t\t\t// or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"\t\t\t\t\t\t\t\t\tKEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"\t\t\t\t\t\t\t\t\tFILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let TDM_CONTAINER_CAPABILITY_SCHEMA =  {",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t  \"admin-shut-down-is-avail\": \t\t\t{ \"type\": \"boolean\" }, ",
															"\t  \"performance-monitoring-is-avail\": \t{ \"type\": \"boolean\" }, ",
															"\t  \"supported-alarm-list\": {",
															"\t\t\"type\": \"array\",",
															"\t\t\"items\": {",
															"\t\t}",
															"\t  },",
															"\t  \"supported-loop-back-kind-list\":{ ",
															"\t  \t\t\"type\": \"array\",",
															"\t\t\t\"items\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"tdm-container-2-0:LOOP_BACK_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\t\"tdm-container-2-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"tdm-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"tdm-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t  \"maintenance-timer-range\": { \"type\": \"string\" }, ",
															"\t  \"supported-tdm-container-kind-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": { ",
															"\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\"tdm-container-name\": { \"type\": \"string\" },",
															"\t\t\t\t\t\"tdm-container-size\": { \"type\": \"number\" }",
															"\t\t\t\t},",
															"\t\t\t\t\"required\": [\"tdm-container-name\",",
															"\t\t\t\t\t\t\t\t\"tdm-container-size\"",
															"\t\t\t\t]",
															"\t\t\t",
															"\t\t\t}",
															"\t\t}",
															"",
															"\t},",
															"\t\"required\": [ \"admin-shut-down-is-avail\", ",
															"\t\t\t\t\t  \"performance-monitoring-is-avail\", ",
															"\t\t\t\t\t  \"supported-alarm-list\",",
															"\t\t\t\t\t  \"supported-loop-back-kind-list\",",
															"\t\t\t\t\t  \"maintenance-timer-range\",",
															"\t\t\t\t\t  \"supported-tdm-container-kind-list\"",
															"\t]",
															"};",
															"",
															"pm.variables.set(\"schema\", TDM_CONTAINER_CAPABILITY_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"\teval(SettingTheRequestVariables)();",
															"\tCouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"\tCouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"\tpm.test(\"CouldInputBeLoaded\", function () {",
															"\t\tpm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"\t\tpm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"\t});",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"\tattributeUnterTest, contentType,",
															"\tfilteredDepth, filteredFields, requestBody) {",
															"\tpm.test(\"IsValueOfClassUnderTestCorrect\", function () {",
															"\t\tpm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"\t\t\t\"current-problems\", \"current-performance\",",
															"\t\t\t\"historical-performances\"]);",
															"\t});",
															"\tpm.test(\"IsValueOfDatatypeUnderTestCorrect\", function () {",
															"\t\tpm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function () {",
															"\t\tpm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"\t});",
															"\tpm.test(\"IsValueOfAttributeUnderTestCorrect\", function () {",
															"\t\tpm.expect(attributeUnterTest).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfContentTypeCorrect\", function () {",
															"\t\tpm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"\t});",
															"\tpm.test(\"IsValueOfFilteredDepthCorrect\", function () {",
															"\t\tpm.expect(filteredDepth).to.be.a(\"number\");",
															"\t});",
															"\tpm.test(\"IsValueOfFilteredFieldsCorrect\", function () {",
															"\t\tpm.expect(filteredFields).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfRequestBodyCorrect\", function () {",
															"\t\tpm.expect(requestBody).to.be.a(\"string\");",
															"\t});",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"\tpm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"\t\tpm.expect(success).to.be.true;",
															"\t});",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ConfigurationCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n----------------Checking TdmContainerConfiguration for Completeness------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ConfigurationCompleteness",
															"* ",
															"* This Request is for validating TdmContainer Configuration Objects against definition ",
															"* TdmContainer_2.0.0-tsp.200123.1050",
															"* as it can be found on https://github.com/openBackhaul/tdmContainer/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Configuration class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"\t\t\t\t\t\t\t\t\t\t\t// \"status\", \"current-problems\", \"current-performance\" ",
															"\t\t\t\t\t\t\t\t\t\t\t// or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"\t\t\t\t\t\t\t\t\tKEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"\t\t\t\t\t\t\t\t\tFILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let TDM_CONTAINER_CONFIGURATION_SCHEMA = {",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"interface-name\": \t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\"interface-is-on\": \t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"segment-number\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"loop-back-kind-on\": \t\t\t",
															"\t\t\t{ \"enum\": [ ",
															"\t\t\t\t\t\"tdm-container-2-0:LOOP_BACK_TYPE_NONE\",",
															"\t\t\t\t\t\"tdm-container-2-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\",",
															"\t\t\t\t\t\"tdm-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\",",
															"\t\t\t\t\t\"tdm-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t] ",
															"\t\t\t}, ",
															"\t\t\"maintenance-timer\": \t\t\t{ \"type\": \"number\" },",
															"\t\t\"performance-monitoring-is-on\": { \"type\": \"boolean\" }, \t\t ",
															"\t\t\"problem-kind-severity-list\": {",
															"\t\t  \"type\": \"array\",",
															"\t\t\t\t\"items\": {",
															"\t\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\"problem-kind-name\": \t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\"problem-kind-severity\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"tdm-container-2-0:SEVERITY_TYPE_NON_ALARMED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"tdm-container-2-0:SEVERITY_TYPE_WARNING\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"tdm-container-2-0:SEVERITY_TYPE_MINOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"tdm-container-2-0:SEVERITY_TYPE_MAJOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"tdm-container-2-0:SEVERITY_TYPE_CRITICAL\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"tdm-container-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t\t\t   ]",
															"\t\t\t\t\t\t}",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"required\": [\"problem-kind-name\",",
															"\t\t\t\t\t\t\t\t\t\"problem-kind-severity\"",
															"\t\t\t\t\t]",
															"\t\t\t\t}",
															"\t\t},",
															"\t\t\"tdm-container-kind\": { \"type\": \"string\" },",
															"\t},",
															"\t\"required\": [\"interface-name\", ",
															"\t\t\t\t\t\"interface-is-on\", ",
															"\t\t\t\t\t\"segment-number\", ",
															"\t\t\t\t\t\"loop-back-kind-on\", ",
															"\t\t\t\t\t\"maintenance-timer\",",
															"\t\t\t\t\t\"performance-monitoring-is-on\",",
															"\t\t\t\t\t\"problem-kind-severity-list\",",
															"\t\t\t\t\t\"tdm-container-kind\"",
															"\t\t\t\t]",
															"};",
															"",
															"try {",
															"    if (capability[\"supported-alarm-list\"][0] === \"Supported alarms not yet defined.\") {",
															"        pm.variables.set(\"schemaToBeShortened\", TDM_CONTAINER_CONFIGURATION_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"problem-kind-severity-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        TDM_CONTAINER_CONFIGURATION_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"        CouldTdmContainerConfigurationBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldTdmContainerConfigurationBeShortened(false);",
															"}",
															"",
															"pm.variables.set(\"schema\", TDM_CONTAINER_CONFIGURATION_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"\teval(SettingTheRequestVariables)();",
															"\tCouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"\tCouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"\tattributeUnterTest, contentType,",
															"\tfilteredDepth, filteredFields, requestBody) {",
															"\tpm.test(\"IsValueOfClassUnderTestCorrect\", function () {",
															"\t\tpm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"\t\t\t\"current-problems\", \"current-performance\",",
															"\t\t\t\"historical-performances\"]);",
															"\t});",
															"\tpm.test(\"IsValueOfDatatypeUnderTestCorrect\", function () {",
															"\t\tpm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function () {",
															"\t\tpm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"\t});",
															"\tpm.test(\"IsValueOfAttributeUnderTestCorrect\", function () {",
															"\t\tpm.expect(attributeUnterTest).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfContentTypeCorrect\", function () {",
															"\t\tpm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"\t});",
															"\tpm.test(\"IsValueOfFilteredDepthCorrect\", function () {",
															"\t\tpm.expect(filteredDepth).to.be.a(\"number\");",
															"\t});",
															"\tpm.test(\"IsValueOfFilteredFieldsCorrect\", function () {",
															"\t\tpm.expect(filteredFields).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfRequestBodyCorrect\", function () {",
															"\t\tpm.expect(requestBody).to.be.a(\"string\");",
															"\t});",
															"}",
															"",
															"function CouldTdmContainerConfigurationBeShortened(success) {",
															"    pm.test(\"CouldTdmContainerConfigurationBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"\tpm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"\t\tpm.expect(success).to.be.true;",
															"\t});",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "StatusCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------------Checking TdmContainerStatus for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* StatusCompleteness",
															"* ",
															"* This Request is for validating TdmContainer Status Objects against definition ",
															"* TdmContainer_2.0.0-tsp.200123.1050",
															"* as it can be found on https://github.com/openBackhaul/tdmContainer/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Status class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"\tvar SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"\tCouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"\tCouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"status\";          // choose from \"pac\", \"capability\", \"configuration\", ",
															"\t\t\t\t\t\t\t\t\t\t\t// \"status\", \"current-problems\", \"current-performance\" ",
															"\t\t\t\t\t\t\t\t\t\t\t// or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"\t\t\t\t\t\t\t\t\tKEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"\t\t\t\t\t\t\t\t\tFILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let TDM_CONTAINER_STATUS_SCHEMA = {",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"loop-back-kind-up\": ",
															"\t\t\t{\"enum\": [ ",
															"\t\t\t\t\t\"tdm-container-2-0:LOOP_BACK_TYPE_NONE\",",
															"\t\t\t\t\t\"tdm-container-2-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\",",
															"\t\t\t\t\t\"tdm-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\",",
															"\t\t\t\t\t\"tdm-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t]",
															"\t\t\t}, ",
															"\t\t\"statistics-is-up\": \t\t\t\t\t{\"type\": \"boolean\" }, ",
															"\t\t\"performance-monitoring-is-up\": \t\t{\"type\": \"boolean\" }, ",
															"\t\t\"interface-status\": ",
															"\t\t\t\t{\"enum\": [ ",
															"\t\t\t\t\t\"tdm-container-2-0:INTERFACE_STATUS_TYPE_UP\",",
															"\t\t\t\t\t\"tdm-container-2-0:INTERFACE_STATUS_TYPE_DOWN\",",
															"\t\t\t\t\t\"tdm-container-2-0:INTERFACE_STATUS_TYPE_TESTING\",",
															"\t\t\t\t\t\"tdm-container-2-0:INTERFACE_STATUS_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\"tdm-container-2-0:INTERFACE_STATUS_TYPE_DORMANT\",",
															"\t\t\t\t\t\"tdm-container-2-0:INTERFACE_STATUS_TYPE_NOT_PRESENT\",",
															"\t\t\t\t\t\"tdm-container-2-0:INTERFACE_STATUS_TYPE_LOWER_LAYER_DOWN\",",
															"\t\t\t\t\t\"tdm-container-2-0:INTERFACE_STATUS_TYPE_ADMIN_DOWN\",",
															"\t\t\t\t\t\"tdm-container-2-0:INTERFACE_STATUS_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t]",
															"\t\t\t\t}",
															"  },",
															"  \"required\": [ \"loop-back-kind-up\", ",
															"\t\t\t\t\t\"statistics-is-up\", ",
															"\t\t\t\t\t\"performance-monitoring-is-up\", ",
															"\t\t\t\t\t\"interface-status\"",
															"\t\t\t\t]",
															"};",
															"",
															"pm.variables.set(\"schema\", TDM_CONTAINER_STATUS_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"\teval(SettingTheRequestVariables)();",
															"\tCouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"\tCouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"\tpm.test(\"CouldInputBeLoaded\", function () {",
															"\t\tpm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"\t\tpm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"\t});",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"\tattributeUnterTest, contentType,",
															"\tfilteredDepth, filteredFields, requestBody) {",
															"\tpm.test(\"IsValueOfClassUnderTestCorrect\", function () {",
															"\t\tpm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"\t\t\t\"current-problems\", \"current-performance\",",
															"\t\t\t\"historical-performances\"]);",
															"\t});",
															"\tpm.test(\"IsValueOfDatatypeUnderTestCorrect\", function () {",
															"\t\tpm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function () {",
															"\t\tpm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"\t});",
															"\tpm.test(\"IsValueOfAttributeUnderTestCorrect\", function () {",
															"\t\tpm.expect(attributeUnterTest).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfContentTypeCorrect\", function () {",
															"\t\tpm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"\t});",
															"\tpm.test(\"IsValueOfFilteredDepthCorrect\", function () {",
															"\t\tpm.expect(filteredDepth).to.be.a(\"number\");",
															"\t});",
															"\tpm.test(\"IsValueOfFilteredFieldsCorrect\", function () {",
															"\t\tpm.expect(filteredFields).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfRequestBodyCorrect\", function () {",
															"\t\tpm.expect(requestBody).to.be.a(\"string\");",
															"\t});",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"\tpm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"\t\tpm.expect(success).to.be.true;",
															"\t});",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentProblemsCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------Checking TdmContainerCurrentProblems for Completeness-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* CurrentProblemsCompleteness",
															"* ",
															"* This Request is for validating TdmContainer CurrentProblems Objects against definition ",
															"* TdmContainer_2.0.0-tsp.200123.1050",
															"* as it can be found on https://github.com/openBackhaul/tdmContainer/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the CurrentProblems class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"current-problems\";    // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                                // \"status\", \"current-problems\", \"current-performance\" ",
															"                                                // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let TDM_CONTAINER_CURRENT_PROBLEMS_SCHEMA = {",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"current-problem-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"\t\t\t\t\t\"problem-name\": \t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"sequence-number\": \t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\"timestamp\": \t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"problem-severity\": \t{  \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"tdm-container-2-0:SEVERITY_TYPE_NON_ALARMED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"tdm-container-2-0:SEVERITY_TYPE_WARNING\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"tdm-container-2-0:SEVERITY_TYPE_MINOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"tdm-container-2-0:SEVERITY_TYPE_MAJOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"tdm-container-2-0:SEVERITY_TYPE_CRITICAL\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"tdm-container-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t\t\t   ] ",
															"\t\t\t\t\t\t\t\t\t\t\t}\t\t",
															"\t\t\t\t},",
															"\t\t\t\t\"required\": [ \"problem-name\",",
															"\t\t\t\t\t\t\t\t\"sequence-number\",",
															"\t\t\t\t\t\t\t\t\"timestamp\",",
															"\t\t\t\t\t\t\t\t\"problem-severity\"\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-current-problems\": \t\t{ \"type\": \"number\" }, ",
															"\t\t\"time-of-latest-change\": \t\t\t{ \"type\": \"string\" }",
															"    },",
															"\t\"required\": [ \"current-problem-list\",",
															"\t\t\t\t\t\"number-of-current-problems\",",
															"\t\t\t\t\t\"time-of-latest-change\"\t\t\t\t\t\t\t\t",
															"\t\t\t\t]",
															"};",
															"",
															"try {",
															"    if (capability[\"supported-alarm-list\"][0] === \"Supported alarms not yet defined.\") {",
															"        pm.variables.set(\"schemaToBeShortened\", TDM_CONTAINER_CURRENT_PROBLEMS_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"current-problem-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        TDM_CONTAINER_CURRENT_PROBLEMS_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"        CouldTdmContainerCurrentProblemsBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldTdmContainerCurrentProblemsBeShortened(false);",
															"}",
															"",
															"pm.variables.set(\"schema\", TDM_CONTAINER_CURRENT_PROBLEMS_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"    attributeUnterTest, contentType,",
															"    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function () {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"            \"current-problems\", \"current-performance\",",
															"            \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function () {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function () {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function () {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function () {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function () {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function () {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function () {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldTdmContainerCurrentProblemsBeShortened(success) {",
															"    pm.test(\"CouldTdmContainerCurrentProblemsBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentPerformanceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------Checking TdmContainerCurrentPerformance for Completeness----------------\");",
															"/****************************************************************************************",
															"* ",
															"* CurrentPerformanceCompleteness",
															"* ",
															"* This Request is for validating TdmContainer CurrentPerformance Objects against definition ",
															"* TdmContainer_2.0.0-tsp.200123.1050",
															"* as it can be found on https://github.com/openBackhaul/tdmContainer/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the CurrentPerformance class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"current-performance\"; // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                                // \"status\", \"current-problems\", \"current-performance\" ",
															"                                                // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let TDM_CONTAINER_CURRENT_PERFORMANCE_SCHEMA = {",
															"    \"type\": \"object\", ",
															"    \"properties\": {",
															"        \"current-performance-data-list\": {",
															"            \"type\": \"array\",",
															"            \"items\": {",
															"                \"type\": \"object\",",
															"                \"properties\": {",
															"                    \"performance-data\": \t\t\t{ \"type\": \"string\" },",
															"                    \"timestamp\": \t\t\t\t\t{ \"type\": \"string\" },",
															"                    \"suspect-interval-flag\": \t\t{ \"type\": \"boolean\" },",
															"                    \"elapsed-time\": \t\t\t\t{ \"type\": \"string\" },",
															"                    \"scanner-id\": \t\t\t\t\t{ \"type\": \"string\" },",
															"                    \"granularity-period\": \t\t\t{ \"enum\": [",
															"                            \"tdm-container-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"                            \"tdm-container-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"                            \"tdm-container-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"                            \"tdm-container-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"                        ]",
															"                    }",
															"                },",
															"                \"required\": [\"performance-data\",",
															"                                \"timestamp\",",
															"                                \"suspect-interval-flag\",",
															"                                \"elapsed-time\",",
															"                                \"scanner-id\",",
															"                                \"granularity-period\"",
															"                            ]",
															"            }\t\t",
															"        }, ",
															"\t\t\"number-of-current-performance-sets\": \t\t{ \"type\": \"number\" }",
															"\t},",
															"\t\"required\": [\"current-performance-data-list\",",
															"\t\t\t\t\t\"number-of-current-performance-sets\"",
															"\t\t\t\t]",
															"};",
															"",
															"try {",
															"    if (capability[\"performance-monitoring-is-avail\"] === false) {",
															"        pm.variables.set(\"schemaToBeShortened\", TDM_CONTAINER_CURRENT_PERFORMANCE_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"current-performance-data-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        TDM_CONTAINER_CURRENT_PERFORMANCE_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"        CouldTdmContainerCurrentPerformanceBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldTdmContainerCurrentPerformanceBeShortened(false);",
															"}",
															"pm.variables.set(\"schema\", TDM_CONTAINER_CURRENT_PERFORMANCE_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"    attributeUnterTest, contentType,",
															"    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function () {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"            \"current-problems\", \"current-performance\",",
															"            \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function () {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function () {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function () {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function () {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function () {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function () {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function () {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldTdmContainerCurrentPerformanceBeShortened(success) {",
															"    pm.test(\"CouldTdmContainerCurrentPerformanceBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "HistoricalPerformancesCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n------------Checking TdmContainerHistoricalPerformances for Completeness-------------\");",
															"/*******************************************************************************",
															"* ",
															"* HistoricalPerformancesCompleteness",
															"* ",
															"* This Request is for validating TdmContainer HistoricalPerformances Objects against definition ",
															"* TdmContainer_2.0.0-tsp.200123.1050",
															"* as it can be found on https://github.com/openBackhaul/tdmContainer/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the HistoricalPerformances class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"*******************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"\tvar RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"\tvar SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"\tvar capability = pm.collectionVariables.get(\"capability\");",
															"\tCouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"\tCouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"historical-performances\"; // choose from \"pac\", \"capability\", \"configuration\", ",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t// \"status\", \"current-problems\", \"current-performance\" ",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t// or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"\t\t\t\t\t\t\t\t\tKEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"\t\t\t\t\t\t\t\t\tFILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let TDM_CONTAINER_HISTORICAL_PERFORMANCES_SCHEMA = {",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"historical-performance-data-list\": {",
															"\t\t  \"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"\t\t\t\t\t\"performance-data\": \t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"suspect-interval-flag\": \t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\t\"history-data-id\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"period-end-time\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"granularity-period\": \t\t\t\t{ \"type\": \"string\" }",
															"\t\t\t\t\t",
															"\t\t\t\t},",
															"\t\t\t\t\"required\": [ \"performance-data\",",
															"\t\t\t\t\t\t\t\t\"suspect-interval-flag\",",
															"\t\t\t\t\t\t\t\t\"history-data-id\",",
															"\t\t\t\t\t\t\t\t\"period-end-time\",",
															"\t\t\t\t\t\t\t\t\"granularity-period\"\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															" \t\t\"number-of-historical-performance-sets\":\t\t{ \"type\": \"number\" },",
															"\t\t\"time-of-latest-change\": \t\t\t\t        { \"type\": \"string\" }",
															"\t},",
															"\t\"required\": [ \"historical-performance-data-list\",",
															"\t\t\t\t\t\"number-of-historical-performance-sets\",",
															"\t\t\t\t\t\"time-of-latest-change\"\t\t\t\t\t",
															"\t\t\t\t]",
															"};",
															"",
															"try {",
															"\tif (capability[\"performance-monitoring-is-avail\"] === false) {",
															"\t\tpm.variables.set(\"schemaToBeShortened\", TDM_CONTAINER_HISTORICAL_PERFORMANCES_SCHEMA);",
															"\t\tpm.variables.set(\"unRequiredAttribute\", \"historical-performance-data-list\");",
															"\t\teval(RemoveAttributeFromRequired)();",
															"\t\tTDM_CONTAINER_HISTORICAL_PERFORMANCES_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"\t\tCouldTdmContainerHistoricalPerformancesBeShortened(true);",
															"\t}",
															"} catch (error) {",
															"\tCouldTdmContainerHistoricalPerformancesBeShortened(false);",
															"}",
															"pm.variables.set(\"schema\", TDM_CONTAINER_HISTORICAL_PERFORMANCES_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"\teval(SettingTheRequestVariables)();",
															"\tCouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"\tCouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"\tpm.test(\"CouldInputBeLoaded\", function () {",
															"\t\tpm.expect(capability).to.be.an(\"object\");",
															"\t\tpm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"\t\tpm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"\t\tpm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"\t\tpm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"\t});",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"\tattributeUnterTest, contentType,",
															"\tfilteredDepth, filteredFields, requestBody) {",
															"\tpm.test(\"IsValueOfClassUnderTestCorrect\", function () {",
															"\t\tpm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"\t\t\t\"current-problems\", \"current-performance\",",
															"\t\t\t\"historical-performances\"]);",
															"\t});",
															"\tpm.test(\"IsValueOfDatatypeUnderTestCorrect\", function () {",
															"\t\tpm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function () {",
															"\t\tpm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"\t});",
															"\tpm.test(\"IsValueOfAttributeUnderTestCorrect\", function () {",
															"\t\tpm.expect(attributeUnterTest).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfContentTypeCorrect\", function () {",
															"\t\tpm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"\t});",
															"\tpm.test(\"IsValueOfFilteredDepthCorrect\", function () {",
															"\t\tpm.expect(filteredDepth).to.be.a(\"number\");",
															"\t});",
															"\tpm.test(\"IsValueOfFilteredFieldsCorrect\", function () {",
															"\t\tpm.expect(filteredFields).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfRequestBodyCorrect\", function () {",
															"\t\tpm.expect(requestBody).to.be.a(\"string\");",
															"\t});",
															"}",
															"",
															"function CouldTdmContainerHistoricalPerformancesBeShortened(success) {",
															"\tpm.test(\"CouldTdmContainerHistoricalPerformancesBeShortened\", function () {",
															"\t\tpm.expect(success).to.be.true;",
															"\t});",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"\tpm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"\t\tpm.expect(success).to.be.true;",
															"\t});",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NetworkRestoration",
									"item": [
										{
											"name": "SettingOriginalInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------------Restoring the Original Interface Configuration Again-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting the Original Interface Configuration Again",
															"* ",
															"* This Request is for restoring the configuration from before the interface validation ",
															"* on the device.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"        ",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration",
															"                                                   );",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    completeClassName = moduleUnderTest + \":\" + technologyUnderTest + \"-configuration\";",
															"    configuration = AddHeadlineToDataObject(configuration, completeClassName);",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched back on original values.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched back on original values.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointTdmContainerCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------ReversalPoint of TdmContainer Validation for Completeness---------------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointTdmContainerCompleteness\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointTdmContainerCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-----------------------Terminating TdmContainerCompleteness--------------------------\");",
															"/****************************************************************************************",
															" * ",
															" * ExitPoint",
															" * ",
															" * This Request is for clearing the Collection variables and terminating the TestCase",
															" * ",
															" ****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															" * Required Input Parameters",
															" ****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Clearing all Collection Variables for Terminating the TestCase",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Setting up Local Variables and Preparing the Request",
															" ****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({",
															"        key: \"Accept\",",
															"        value: \"application/json\"",
															"    });",
															"} catch (error) {}",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, controller, indexOfDeviceUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function() {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function() {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "TdmContainerConfiguration",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n\\n============================== TdmContainerConfiguration.1 ================================\");",
															"/****************************************************************************************",
															"* ",
															"* RequestCollection for validating Configuration of TdmContainer Objects against definition ",
															"* ",
															"*                   TdmContainer_2.0.0-tsp.191123.1240",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/tdmContainer/tree/tsp",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Manual Definition of the Mode of Operation of this TestCase",
															"* ",
															"* It is recommended to apply this TestCase on devices on the local (not remote) site",
															"* of the microwave connection, otherwise the management connection might break and ",
															"* configurations, which are done during the validation, cannot be reversed.",
															"* ",
															"****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"one\"; // \"none\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"tdm-container-2-0:tdm-container-pac\"; // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"CONFIGURATION_VALIDATION_RESULTS = {};",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"pm.collectionVariables.set(\"configurationValidationResults\", CONFIGURATION_VALIDATION_RESULTS);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function () {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function () {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DefiningDummyValuesAndEvaluations()",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n----------Defining DummyValues and Evaluation Criteria in Configuration Validation--------\");",
															"/****************************************************************************************",
															"* ",
															"* Definition of DefiningDummyValuesAndEvaluations()",
															"*  ",
															"* Functions for Defining DummyValues and Evaluation Criteria in all Configuration Validations.",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Provided Collection Variables ",
															"****************************************************************************************/",
															"class Attribute {",
															"    constructor(CreatingDummyValueAsaString,",
															"                    EvaluatingFeatureSupportAsaString,",
															"                    defaultValueForStandardEvaluation,",
															"                    EvaluatingResultAsaString) {",
															"        this.CreatingDummyValueAsaString = CreatingDummyValueAsaString;",
															"        this.EvaluatingFeatureSupportAsaString = EvaluatingFeatureSupportAsaString;",
															"        this.defaultValueForStandardEvaluation = defaultValueForStandardEvaluation;",
															"        this.EvaluatingResultAsaString = EvaluatingResultAsaString;",
															"    }",
															"}",
															"var attributes = [];",
															"",
															"var CreatingDummyValueAsaString;",
															"var EvaluatingFeatureSupportAsaString;",
															"var defaultValueForStandardEvaluation;",
															"var EvaluatingResultAsaString;",
															"var newAttribute;",
															"",
															"// interface-name",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of interface-name--------------------------\");",
															"",
															"        // Individual Values Definition ",
															"        var dummyValue = \"Dummy \" + String(Math.floor(Math.random() * 999));",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"interface-name\";",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"Interface name not yet defined.\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// interface-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of interface-is-on-----------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"interface-is-on\";",
															"",
															"        // Individual Values Definition ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// tdm-container-kind",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of tdm-container-kind-----------------------\");",
															"",
															"        try {",
															"            let supportedTdmContainerKinds = [];",
															"            for (let i = 0; i < capability[\"supported-tdm-container-kind-list\"].length; i++) {",
															"                let sampleName = capability[\"supported-tdm-container-kind-list\"][i][\"tdm-container-name\"];",
															"                supportedTdmContainerKinds.push(sampleName);",
															"            }",
															"            let configuredTdmContainerKind = configuration[\"tdm-container-kind\"];",
															"            let configuredTdmContainerKindIndex = supportedTdmContainerKinds.indexOf(configuredTdmContainerKind);",
															"            let potentialDummyValues = supportedTdmContainerKinds;",
															"            if (configuredTdmContainerKindIndex >= 0) {",
															"                potentialDummyValues.splice(configuredTdmContainerKindIndex, 1);",
															"            }",
															"            if (potentialDummyValues.length === 0) {",
															"                potentialDummyValues = [\"cpri7\"];",
															"            }",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"            CouldDummyBeCreated(supportedTdmContainerKinds, configuredTdmContainerKind,",
															"                                    configuredTdmContainerKindIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue",
															"                                );",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"tdm-container-kind\";",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(supportedTdmContainerKinds, configuredTdmContainerKind,",
															"                                        configuredTdmContainerKindIndex,",
															"                                        potentialDummyValues,",
															"                                        dummyValueIndex,",
															"                                        dummyValue) {",
															"            pm.test(\"CouldsupportedTdmContainerKindsBeRetrieved\", function () {",
															"                pm.expect(supportedTdmContainerKinds).to.be.an(\"array\");",
															"            });",
															"            pm.test(\"CouldconfiguredTdmContainerKindNameBeRetrieved\", function () {",
															"                pm.expect(configuredTdmContainerKind).to.be.a(\"string\");",
															"            });",
															"            pm.test(\"CouldconfiguredTdmContainerKindIndexBeEvaluated\", function () {",
															"                pm.expect(configuredTdmContainerKindIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldPotentialDummyValuesBeBuild\", function () {",
															"                pm.expect(potentialDummyValues).to.be.an(\"array\");",
															"                pm.expect(potentialDummyValues.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyValueIndexBeCalculated\", function () {",
															"                pm.expect(dummyValueIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var supportedTdmContainerKinds = [];",
															"        var potentialTdmContainerKinds = [\"e1\", \"t1\", \"j1\", \"e3\", \"ds3\", \"stm1\", \"cpri1\", ",
															"                                            \"cpri2\", \"cpri3\", \"cpri4\", \"cpri5\", \"cpri6\", \"cpri7\" ",
															"                                        ];",
															"        var firstSupportedIsFromListOfPotential = false;",
															"        try {",
															"            supportedTdmContainerKinds = capability[\"supported-tdm-container-kind-list\"];",
															"            if ( potentialTdmContainerKinds.includes(supportedTdmContainerKinds[0]) === true ) {",
															"                firstSupportedIsFromListOfPotential = true;",
															"            }",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        if ( (supportedTdmContainerKinds.length>0) && (firstSupportedIsFromListOfPotential===true) ) {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        } else {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// segment-number",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------------------------Checking Configuration of segment-number------------------------\");",
															"        ",
															"        try {",
															"            var dummyValue = 10 + Math.floor(Math.random() * 9);",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"segment-number\";",
															"",
															"        // Self Testing Function",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// loop-back-kind-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of loop-back-kind-on------------------------\");",
															"",
															"        try {",
															"            let supportedLoopBackKindList = capability[\"supported-loop-back-kind-list\"];",
															"            let loopBackKindOn = configuration[\"loop-back-kind-on\"];",
															"            let loopBackKindOnIndex = supportedLoopBackKindList.indexOf(loopBackKindOn);",
															"            let potentialDummyValues = supportedLoopBackKindList;",
															"            if (loopBackKindOnIndex >= 0) {",
															"                potentialDummyValues.splice(loopBackKindOnIndex, 1);",
															"            }",
															"            if (potentialDummyValues.length === 0) {",
															"                potentialDummyValues = [\"tdm-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\"];",
															"            }",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"            CouldDummyBeCreated(supportedLoopBackKindList, loopBackKindOn, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"loop-back-kind-on\";",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(supportedLoopBackKindList, loopBackKindOn, dummyValue) {",
															"            pm.test(\"CouldDummyBeCreated\", function () {",
															"                pm.expect(supportedLoopBackKindList).to.be.an(\"array\");",
															"                pm.expect(loopBackKindOn).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var supportedLoopBackTypes = [];",
															"        try {",
															"            supportedLoopBackTypes = capability[\"supported-loop-back-kind-list\"];",
															"            var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"            if ( (supportedLoopBackTypes.length===1) ",
															"                    && ( (supportedLoopBackTypes[0]===\"tdm-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\")",
															"                            || (supportedLoopBackTypes[0]===\"tdm-container-2-0:LOOP_BACK_TYPE_NONE\") ) ) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            }",
															"            CouldFeaturesBeEvaluated(supportedLoopBackTypes, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        } catch (error) {",
															"            CouldFeaturesBeEvaluated(supportedLoopBackTypes, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        }",
															"        ",
															"        // Self Testing Functions",
															"        function CouldFeaturesBeEvaluated(supportedLoopBackTypes, capabilitiesAreIndicatingThatFeatureNotSupported) {",
															"            pm.test(\"CouldSupportedLoopBackTypesBeRead\", function () {",
															"                pm.expect(supportedLoopBackTypes).to.be.an(\"array\");",
															"                pm.expect(supportedLoopBackTypes.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldCapabilitiesAreIndicatingThatFeatureNotSupportedBeCalculated\", function () {",
															"                pm.expect(capabilitiesAreIndicatingThatFeatureNotSupported).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"tdm-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// maintenance-timer",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of maintenance-timer------------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"maintenance-timer\";",
															"",
															"        try {",
															"            let maintenanceTimerRange = capability[\"maintenance-timer-range\"];",
															"            let currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
															"            if (maintenanceTimerRange === \"Range of the maintenance timer not yet defined.\") {",
															"                maintenanceTimerRange = \"0-0\";",
															"            }",
															"            var dummyValue = getRandomValues(maintenanceTimerRange, currentValue);",
															"            CouldDummyValueBeDefined(maintenanceTimerRange, currentValue, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeDefined();",
															"        }",
															"",
															"        // Functions",
															"        function getRandomValues(availableValues, currentValue) {",
															"            var randomValue = 0;",
															"            if (availableValues.includes(\"-\")) {",
															"                var rangeValues = availableValues.split(\"-\");",
															"                do {",
															"                    randomValue = getRandomValueFromAvailableValues(rangeValues[0], rangeValues[1]);",
															"                } while (randomValue === currentValue);",
															"            } else if (availableValues.includes(\",\")) {",
															"                var concreteValues = availableValues.split(\",\");",
															"                do {",
															"                    var randomIndex = getRandomValueFromAvailableValues(0, concreteValues.length);",
															"                    randomValue = concreteValues[randomIndex];",
															"                } while (randomValue === currentValue);",
															"            }",
															"            else {",
															"                randomValue = availableValues;",
															"            }",
															"            return parseInt(randomValue);",
															"        }",
															"",
															"        function getRandomValueFromAvailableValues(min, max) {",
															"            return Math.floor(Math.random() * (max - min) + min);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeDefined(maintenanceTimerRange, currentValue, dummyValue) {",
															"            pm.test(\"CouldAnAvailableConfigurationValueBeRead\", function () {",
															"                pm.expect(maintenanceTimerRange).to.be.a(\"string\");",
															"                pm.expect(maintenanceTimerRange).to.not.have.lengthOf(0);",
															"            });",
															"            pm.test(\"CouldDCurrentValueBeRead\", function () {",
															"                pm.expect(currentValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(dummyValue).to.not.be.undefined;",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var supportedMaintenanceTimerRange = \"Range of the maintenance timer not yet defined.\";",
															"        try {",
															"            supportedMaintenanceTimerRange = capability[\"maintenance-timer-range\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        if ( supportedMaintenanceTimerRange === \"Range of the maintenance timer not yet defined.\" ) {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"        } else {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// problem-kind-severity-list/problem-kind-severity",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n---------Checking Configuration of problem-kind-severity-list/problem-kind-severity--------\");",
															"        ",
															"        var DATATYPE_UNDER_TEST = \"problem-kind-severity-list\";",
															"        var DATATYPE_INDEX_UNDER_TEST = 0;",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"problem-kind-name\";",
															"        var ATTRIBUTE_UNDER_TEST = \"problem-kind-severity\";",
															"",
															"        var dummyValue;",
															"        try {",
															"            let currentValue;",
															"            currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"            if (currentValue !== \"tdm-container-2-0:SEVERITY_TYPE_MINOR\") {",
															"                dummyValue  = \"tdm-container-2-0:SEVERITY_TYPE_MINOR\";",
															"            } else {",
															"                dummyValue = \"tdm-container-2-0:SEVERITY_TYPE_MAJOR\";",
															"            }",
															"",
															"            keysOfDatatypeInstanceUnderTest[0].value",
															"                = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[0].key];",
															"        } catch (error) {",
															"            dummyValue = \"-1\";",
															"        }",
															"",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"",
															"        // Self Testing Function",
															"",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var supportedAlarmList = [];",
															"        var currentSeverityConfiguration;",
															"        try {",
															"            supportedAlarmList = capability[\"supported-alarm-list\"];",
															"            currentSeverityConfiguration = configuration[\"problem-kind-severity-list\"][0][\"problem-kind-severity\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        if ( (supportedAlarmList.length>0) ",
															"                && (supportedAlarmList[0]!==\"Supported alarms not yet defined.\")",
															"                && (currentSeverityConfiguration!==\"tdm-container-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\") ) {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        } else {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"tdm-container-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// performance-monitoring-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------Checking Configuration of performance-monitoring-is-on------------------\");",
															"        ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"",
															"        try {",
															"            var dummyValue = !configuration[\"performance-monitoring-is-on\"];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try { ",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"performance-monitoring-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"pm.collectionVariables.set(\"attributes\", attributes);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function ConvertingThisFunctionToString(functionToBeConverted) {",
															"    let functionAsAString = String(functionToBeConverted);",
															"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
															"    return functionAsAString.slice(indexOfFirstCurly);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointTdmContainerConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------EntryPoint of TdmContainer Validation of Configuration-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the TdmContainerConfiguration TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].tdmContainerList.length;",
															"    var maximumIndexOfLtpUnderTest;",
															"    ",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.min( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointTdmContainerConfiguration\");",
															"        console.log(\"Proceeding with terminating TdmContainer validation for Configurability.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Provided Collection Variables ",
															"****************************************************************************************/",
															"INITIAL_INDEX_OF_ATTRIBUTE_UNDER_TEST = 0;",
															"",
															"pm.collectionVariables.set(\"indexOfAttributeUnderTest\", INITIAL_INDEX_OF_ATTRIBUTE_UNDER_TEST);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "CollectionInformationLoading",
									"item": [
										{
											"name": "UploadingInterfaceCapability",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Capabilities-------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the Interface Capabilities",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Configuration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Configuration",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceStatus",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n------------------------------Uploading Interface Status----------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Status",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"status\";          // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Displaying the Collection Variables right before starting the validation",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NetworkPreparation",
									"item": [],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "ValidationRequests",
									"item": [
										{
											"name": "AttributeConfiguration",
											"item": [
												{
													"name": "EntryPointTcAttributeConfiguration",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* EntryPoint",
																	"* ",
																	"* Manages the number of iterations of the AttributeConfiguration Tests ",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var attributes = pm.collectionVariables.get(\"attributes\");",
																	"    var indexOfAttributeUnderTest = pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
																	"    ",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    ",
																	"    CouldTheInputBeLoaded(attributes, indexOfAttributeUnderTest, dummyUri);",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the next Step ",
																	"****************************************************************************************/",
																	"try {",
																	"        ",
																	"    if ( indexOfAttributeUnderTest < attributes.length ) {",
																	"        postman.setNextRequest();",
																	"    } else {",
																	"        postman.setNextRequest(\"ExitPointTcAttributeConfiguration\");",
																	"    }",
																	"        ",
																	"    CouldFurtherProceedingBeDetermined(true);",
																	"} catch (error) {",
																	"    CouldFurtherProceedingBeDetermined(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(attributes, indexOfAttributeUnderTest, dummyUri) {",
																	"    pm.test(\"CouldTheAttributesBeLoaded\", function () {",
																	"        pm.expect(attributes).to.be.an(\"array\");",
																	"    });",
																	"    pm.test(\"CouldIndexOfAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldTheDummyUriBeLoaded\", function () {",
																	"        pm.expect(dummyUri).to.be.a(\"string\");",
																	"        pm.expect(dummyUri).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFurtherProceedingBeDetermined(success) {",
																	"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Writing",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyCode = JSON.parse(pm.response.code);",
																	"    var dummyErrorMessage = \"\";",
																	"    if ( Math.floor(dummyCode/100) !== 2 ) {",
																	"        var dummyErrorMessage = JSON.parse(pm.response.stream).errors.error[0][\"error-message\"];",
																	"    }",
																	"    CouldResponseBeRetrieved(dummyCode, dummyErrorMessage);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", dummyCode);",
																	"pm.variables.set(\"dummyErrorMessage\", dummyErrorMessage);",
																	"",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode, responseErrorMessage) {",
																	"    pm.test(\"CouldTheDummyCodeOfPuttingBeReceived\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldTheErrorMessagePuttingBeComposed\", function () {",
																	"        pm.expect(responseErrorMessage).to.be.a(\"string\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an boolean attribute with the alternate value and",
																	"* providing this value as dummyValueString to the local Variables.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters and Execution",
																	"****************************************************************************************/",
																	"try {",
																	"    var PreRequestOfWritingAsaString = pm.environment.get(\"PreRequestOfWritingAsaString\");",
																	"    eval(PreRequestOfWritingAsaString);",
																	"    CouldPreRequestOfWritingBeExecuted(true);",
																	"} catch (error) {",
																	"    CouldPreRequestOfWritingBeExecuted();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldPreRequestOfWritingBeExecuted(success) {",
																	"    pm.test(\"CouldPreRequestOfWritingBeExecuted\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters and Execution",
																	"****************************************************************************************/",
																	"try {",
																	"    var PreRequestOfReadingAsaString = pm.environment.get(\"PreRequestOfReadingAsaString\");",
																	"    eval(PreRequestOfReadingAsaString);",
																	"    CouldPreRequestOfReadingBeExecuted(true);",
																	"} catch (error) {",
																	"    CouldPreRequestOfReadingBeExecuted();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldPreRequestOfReadingBeExecuted(success) {",
																	"    pm.test(\"CouldPreRequestOfReadingBeExecuted\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters and Execution",
																	"****************************************************************************************/",
																	"try {",
																	"    var PostRequestOfReadingAsaString = pm.environment.get(\"PostRequestOfReadingAsaString\");",
																	"    eval(PostRequestOfReadingAsaString);",
																	"    CouldPostRequestOfReadingBeExecuted(true);",
																	"} catch (error) {",
																	"    CouldPostRequestOfReadingBeExecuted();",
																	"}",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldPostRequestOfReadingBeExecuted(success) {",
																	"    pm.test(\"CouldPostRequestOfReadingBeExecuted\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters and Execution",
																	"****************************************************************************************/",
																	"try {",
																	"    var PreRequestOfEvaluatingAsaString = pm.environment.get(\"PreRequestOfEvaluatingAsaString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    ",
																	"    eval(PreRequestOfEvaluatingAsaString);",
																	"",
																	"    if ( Math.floor(dummyCode/100) !==2 ) {",
																	"        postman.setNextRequest(\"ReversalPointTcAttributeConfiguration\");",
																	"    }",
																	"    ",
																	"    CouldPreRequestOfEvaluatingBeExecuted(true);",
																	"} catch (error) {",
																	"    CouldPreRequestOfEvaluatingBeExecuted();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldPreRequestOfEvaluatingBeExecuted(success) {",
																	"    pm.test(\"CouldPreRequestOfEvaluatingBeExecuted\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters and Execution",
																	"****************************************************************************************/",
																	"try {",
																	"    var PreRequestOfRestoringAsaString = pm.environment.get(\"PreRequestOfRestoringAsaString\");",
																	"    eval(PreRequestOfRestoringAsaString);",
																	"    CouldPreRequestOfRestoringBeExecuted(true);",
																	"} catch (error) {",
																	"    CouldPreRequestOfRestoringBeExecuted();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldPreRequestOfRestoringBeExecuted(success) {",
																	"    pm.test(\"CouldPreRequestOfRestoringBeExecuted\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "ReversalPointTcAttributeConfiguration",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* ReversalPoint",
																	"* ",
																	"* Directs the flow of execution back to the StartPoint",
																	"* ",
																	"****************************************************************************************/",
																	" ",
																	" ",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"        ",
																	"    var indexOfAttributeUnderTest = pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, indexOfAttributeUnderTest);",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Providing Collection Variables for either Repeating or Terminating the TestCase",
																	" ****************************************************************************************/",
																	"var indexOfPotentialNextAttributeUnderTest = indexOfAttributeUnderTest + 1;",
																	"pm.collectionVariables.set(\"indexOfAttributeUnderTest\", indexOfPotentialNextAttributeUnderTest);",
																	"",
																	"postman.setNextRequest(\"EntryPointTcAttributeConfiguration\");",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, indexOfAttributeUnderTest) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"        pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "ExitPointTcAttributeConfiguration",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* ExitPoint",
																	"* ",
																	"* This Request is terminating the Test",
																	"* ",
																	"****************************************************************************************/",
																	" ",
																	" ",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    CouldTheInputBeLoaded(dummyUri);",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "NetworkRestoration",
									"item": [
										{
											"name": "SettingOriginalInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------------Restoring the Original Interface Configuration Again-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting the Original Interface Configuration Again",
															"* ",
															"* This Request is for restoring the configuration from before the interface validation ",
															"* on the device.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"        ",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration",
															"                                                   );",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    completeClassName = moduleUnderTest + \":\" + technologyUnderTest + \"-configuration\";",
															"    configuration = AddHeadlineToDataObject(configuration, completeClassName);",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched back on original values.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched back on original values.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointTdmContainerConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-----------------ReversalPoint of TdmContainer Validation of Configuration-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Console.log of Validation Results",
															" ****************************************************************************************/",
															"let allConfigurationValidationResults = { \"allConfigurationValidationResults\" : configurationValidationResults };",
															"console.log(allConfigurationValidationResults);",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointTdmContainerConfiguration\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointTdmContainerConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------------------Terminating TdmContainerConfiguration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ExitPoint",
															"* ",
															"* This Request is for clearing the Collection variables and terminating the TestCase",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Clearing all Collection Variables for Terminating the TestCase",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, controller, indexOfDeviceUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "VlanInterfaceValidation",
					"item": [
						{
							"name": "VlanInterfaceCompleteness",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputCompletenessVlan",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n\\n============================ VlanInterfaceCompleteness.3 =============================\");",
															"/****************************************************************************************",
															"* ",
															"* RequestCollection for validating Completeness of VlanInterface Objects against definition ",
															"* ",
															"*                   VlanInterface_1.0.0-tsp.210101.1810",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/vlanInterface/tree/tsp",
															"* ",
															"****************************************************************************************/",
															" ",
															"",
															"/****************************************************************************************",
															"* Manual Definition of the Mode of Operation of this TestCase",
															"****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"one\"; // \"none\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"vlan-interface-1-0:vlan-interface-pac\"; // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function() {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function() {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointVlanInterfaceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------EntryPoint of VlanInterface Validation for Completeness-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the VlanInterfaceCompleteness TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].vlanInterfaceList.length;",
															"    var maximumIndexOfLtpUnderTest;",
															"    ",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.min( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointVlanInterfaceCompleteness\");",
															"        console.log(\"Proceeding with terminating VlanInterface validation for Completeness.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceCapability",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Capabilities-------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the Interface Capabilities",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Configuration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Configuration",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Displaying the Collection Variables right before starting the validation",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "NetworkPreparation",
									"item": [],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "ValidationRequests",
									"item": [
										{
											"name": "LtpCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------Checking VlanInterfaceLtp for Completeness---------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* This Request is for validating VlanInterfaceLtp objects against definition ",
															"*",
															"* ONF Core IM 1.4",
															"*",
															"* as it can be found on https://github.com/openBackhaul/core/tree/tsp",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"\";",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 5;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let VLAN_INTERFACE_LTP_SCHEMA = {",
															"    \"type\": \"object\",",
															"\t\"properties\": {",
															"        \"core-model-1-4:logical-termination-point\": {",
															"            \"type\": \"array\",",
															"            \"items\": {",
															"                \"type\": \"object\",",
															"                \"properties\": {",
															"                    \"physical-port-reference\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"string\",",
															"                        },",
															"                    },                    ",
															"                    \"connected-ltp\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                    \"supporting-pc\": \t\t\t\t            \t            { \"type\": \"string\" },",
															"                    \"client-ltp\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"string\",",
															"                        },",
															"                    },",
															"                    \"server-ltp\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"string\",",
															"                        },",
															"                    },",
															"                    \"ltp-direction\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                    \"transfer-capacity-pac\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"embedded-clock\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"run-mode\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"encompassed-clock\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },",
															"                                \"encapsulated-fc\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": {",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"uuid\": \t\t\t\t\t                    { \"type\": \"string\" },",
															"                                            \"local-id\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"lifecycle-state\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                                            \"layer-protocol-name\": \t\t\t                { \"type\": \"string\" },",
															"                                            \"administrative-state\":    \t\t\t\t\t    { \"type\": \"string\" },",
															"                                            \"name\": {",
															"                                                \"type\": \"array\",",
															"                                                \"items\": { ",
															"                                                    \"type\": \"object\",",
															"                                                    \"properties\": {",
															"                                                    },",
															"                                                },",
															"                                            },",
															"                                            \"fc-route\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"operational-state\":     \t\t\t\t\t    { \"type\": \"string\" },",
															"                                            \"administrative-control\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                            \"supporting-pc\": \t\t\t\t            \t{ \"type\": \"string\" },",
															"                                            \"service-priority\": \t\t\t                { \"type\": \"string\" },",
															"                                            \"forwarding-direction\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                            \"fc-port\": {",
															"                                                \"type\": \"array\",",
															"                                                \"items\": {",
															"                                                    \"type\": \"object\",",
															"                                                    \"properties\": {",
															"                                                    },",
															"                                                },",
															"                                            },",
															"                                            \"is-protection-lock-out\": \t\t\t\t\t    { \"type\": \"boolean\" },                    ",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"sync-ltp\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },                                ",
															"                                \"encapsulated-casc\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },",
															"                                \"phase-aligned-clock\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },",
															"                                \"local-id\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"configured-client-capacity\": \t\t\t\t\t{ \"type\": \"string\" },",
															"                                \"fc-blocks-signal-to-lp\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                \"lifecycle-state\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                                \"layer-protocol-name\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                                \"termination-state\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                                \"administrative-state\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                \"lp-direction\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                                \"is-protection-lock-out\":            \t\t\t{ \"type\": \"boolean\" },                    ",
															"                                \"operational-state\":     \t\t\t            { \"type\": \"string\" },",
															"                                \"administrative-control\": \t\t\t\t\t    { \"type\": \"string\" },                                ",
															"                                \"name\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"label\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"extension\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"operational-state\":     \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"administrative-control\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"administrative-state\":    \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"lifecycle-state\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                                \"address\": \t\t\t\t\t                                { \"type\": \"string\" },",
															"                            },",
															"                        },",
															"                    },                  ",
															"                    \"peer-ltp\":              \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"ltp-in-other-view\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"string\",",
															"                        },",
															"                    },",
															"                    \"ltp-augment-1-0:ltp-augment-pac\": {",
															"                        \"type\": \"object\",",
															"                        \"properties\": {",
															"                            \"ltp-augment-capability\": {",
															"                                \"type\": \"object\",",
															"                                \"properties\": {",
															"                                    \"equipment\": {",
															"                                        \"type\": \"array\",",
															"                                        \"items\": { ",
															"                                            \"type\": \"string\",",
															"                                        },",
															"                                    },                    ",
															"                                    \"connector\":                                 { \"type\": \"string\" },",
															"                                },",
															"                                \"required\": [",
															"                                    \"equipment\", ",
															"                                    \"connector\",",
															"                                ],",
															"                            },",
															"                        },",
															"                        \"required\": [",
															"                            \"ltp-augment-capability\", ",
															"                        ],",
															"                    },",
															"                    \"layer-protocol\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": {",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"layer-protocol-name\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                                \"configured-client-capacity\": \t\t\t\t\t{ \"type\": \"string\" },",
															"                                \"lp-direction\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                                \"termination-state\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                                \"configuration-and-switch-control\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },",
															"                                \"is-protection-lock-out\":            \t\t\t{ \"type\": \"boolean\" },",
															"                                \"fc-blocks-signal-to-lp\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                \"vlan-interface-1-0:vlan-interface-pac\": {",
															"                                    \"type\": \"object\",",
															"                                    \"properties\": {",
															"                                        \"vlan-interface-capability\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"supported-sub-layer-protocol-name-list\": {\t \"enum\": [",
															"                                                    \"vlan-interface-1-0:SUB_LAYER_PROTOCOL_NAME_TYPE_D_BRIDGE_COMPONENT\",",
															"                                                    \"vlan-interface-1-0:SUB_LAYER_PROTOCOL_NAME_TYPE_C_VLAN_COMPONENT\",",
															"                                                    \"vlan-interface-1-0:SUB_LAYER_PROTOCOL_NAME_TYPE_S_VLAN_COMPONENT\",",
															"                                                    \"vlan-interface-1-0:SUB_LAYER_PROTOCOL_NAME_TYPE_EDGE_RELAY_COMPONENT\",",
															"                                                    \"vlan-interface-1-0:SUB_LAYER_PROTOCOL_NAME_TYPE_NOT_YET_DEFINED\"",
															"                                                    ] ",
															"                                                },",
															"                                                \"supported-interface-kind-list\": { \"enum\": [",
															"                                                    \"vlan-interface-1-0:INTERFACE_KIND_TYPE_D_BRIDGE_PORT\",",
															"                                                    \"vlan-interface-1-0:INTERFACE_KIND_TYPE_C_VLAN_BRIDGE_PORT\",",
															"                                                    \"vlan-interface-1-0:INTERFACE_KIND_TYPE_CUSTOMER_EDGE_PORT\",",
															"                                                    \"vlan-interface-1-0:INTERFACE_KIND_TYPE_PROVIDER_EDGE_PORT\",",
															"                                                    \"vlan-interface-1-0:INTERFACE_KIND_TYPE_CUSTOMER_NETWORK_PORT\",",
															"                                                    \"vlan-interface-1-0:INTERFACE_KIND_TYPE_PROVIDER_NETWORK_PORT\",",
															"                                                    \"vlan-interface-1-0:INTERFACE_KIND_TYPE_CUSTOMER_BACKBONE_PORT\",",
															"                                                    \"vlan-interface-1-0:INTERFACE_KIND_TYPE_REMOTE_CUSTOMER_ACCESS_PORT\",",
															"                                                    \"vlan-interface-1-0:INTERFACE_KIND_TYPE_VIRTUAL_INSTANCE_PORT\",",
															"                                                    \"vlan-interface-1-0:INTERFACE_KIND_TYPE_STATION_FACING_BRIDGE_PORT\",",
															"                                                    \"vlan-interface-1-0:INTERFACE_KIND_TYPE_UPLINK_ACCESS_PORT\",",
															"                                                    \"vlan-interface-1-0:INTERFACE_KIND_TYPE_UPLINK_RELAY_PORT\",",
															"                                                    \"vlan-interface-1-0:INTERFACE_KIND_TYPE_NOT_YET_DEFINED\"",
															"                                                    ]",
															"                                                },",
															"                                                \"tagging-and-mvrp-is-avail\": \t\t\t\t\t{ \"type\": \"boolean\"\t},",
															"                                                \"configuring-ingress-tag-filtering-is-avail\": \t{ \"type\": \"boolean\"\t},",
															"                                                \"ingress-vlan-id-filtering-is-avail\": \t\t\t{ \"type\": \"boolean\"\t},",
															"                                                \"available-pcp-bits-interpretation-kind-list\":  { \"enum\": [",
															"                                                        \"vlan-interface-1-0:PCP_BITS_INTERPRETATION_KIND_TYPE_8P0D\",",
															"                                                        \"vlan-interface-1-0:PCP_BITS_INTERPRETATION_KIND_TYPE_7P1D\",",
															"                                                        \"vlan-interface-1-0:PCP_BITS_INTERPRETATION_KIND_TYPE_6P2D\",",
															"                                                        \"vlan-interface-1-0:PCP_BITS_INTERPRETATION_KIND_TYPE_5P3D\",",
															"                                                        \"vlan-interface-1-0:PCP_BITS_INTERPRETATION_KIND_TYPE_NOT_YET_DEFINED\"",
															"                                                    ]",
															"                                                },\t",
															"                                                \"configuring-pcp-bits-decoding-is-avail\": \t\t\t\t{ \"type\": \"boolean\"\t},",
															"                                                \"configuring-pcp-bits-encoding-is-avail\": \t\t\t\t{ \"type\": \"boolean\"\t},",
															"                                                \"drop-eligible-indicator-is-avail\": \t  \t\t\t\t{ \"type\": \"boolean\"\t},",
															"                                                \"number-of-available-priorities\": \t\t  \t\t\t\t{ \"type\": \"number\"\t},",
															"                                                \"received-priority-overwriting-is-avail\": \t\t\t\t{ \"type\": \"boolean\"\t},",
															"                                                \"vlan-id-translation-is-avail\": \t\t  \t\t\t\t{ \"type\": \"boolean\"\t},",
															"                                                \"egress-vlan-id-translation-is-avail\":    \t\t\t\t{ \"type\": \"boolean\"\t},",
															"                                                \"port-and-protocol-based-vlan-is-avail\":  \t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"max-number-of-protocol-vlan-id-groupings\": \t\t\t{ \"type\": \"number\"  },",
															"                                                \"service-access-priority-tagging-is-avail\": \t\t\t{ \"type\": \"boolean\"\t},",
															"                                                \"configuring-service-access-priority-mapping-is-avail\": { \"type\": \"boolean\"\t},",
															"                                                \"number-of-available-traffic-classes\": \t\t\t\t\t{ \"type\": \"number\"\t},",
															"                                                \"restricted-automated-vlan-registration-is-avail\": \t\t{\"type\": \"boolean\" },",
															"                                                \"admin-shut-down-is-avail\": \t\t\t\t\t\t\t{ \"type\": \"boolean\"\t},",
															"                                                \"statistics-is-avail\": \t\t                            { \"type\": \"boolean\"\t}",
															"                                            }",
															"                                        },",
															"                                        \"vlan-interface-configuration\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"interface-name\": \t\t\t\t\t{ \"type\": \"string\"  },",
															"                                                \"sub-layer-protocol-name\": { \"enum\": [",
															"                                                    \"vlan-interface-1-0:SUB_LAYER_PROTOCOL_NAME_TYPE_D_BRIDGE_COMPONENT\",",
															"                                                    \"vlan-interface-1-0:SUB_LAYER_PROTOCOL_NAME_TYPE_C_VLAN_COMPONENT\",",
															"                                                    \"vlan-interface-1-0:SUB_LAYER_PROTOCOL_NAME_TYPE_S_VLAN_COMPONENT\",",
															"                                                    \"vlan-interface-1-0:SUB_LAYER_PROTOCOL_NAME_TYPE_EDGE_RELAY_COMPONENT\",",
															"                                                    \"vlan-interface-1-0:SUB_LAYER_PROTOCOL_NAME_TYPE_NOT_YET_DEFINED\"",
															"                                                    ]",
															"                                                },",
															"                                                \"interface-kind\": \t{ \"enum\": [",
															"                                                    \"vlan-interface-1-0:INTERFACE_KIND_TYPE_D_BRIDGE_PORT\",",
															"                                                    \"vlan-interface-1-0:INTERFACE_KIND_TYPE_C_VLAN_BRIDGE_PORT\",",
															"                                                    \"vlan-interface-1-0:INTERFACE_KIND_TYPE_CUSTOMER_EDGE_PORT\",",
															"                                                    \"vlan-interface-1-0:INTERFACE_KIND_TYPE_PROVIDER_EDGE_PORT\",",
															"                                                    \"vlan-interface-1-0:INTERFACE_KIND_TYPE_CUSTOMER_NETWORK_PORT\",",
															"                                                    \"vlan-interface-1-0:INTERFACE_KIND_TYPE_PROVIDER_NETWORK_PORT\",",
															"                                                    \"vlan-interface-1-0:INTERFACE_KIND_TYPE_CUSTOMER_BACKBONE_PORT\",",
															"                                                    \"vlan-interface-1-0:INTERFACE_KIND_TYPE_REMOTE_CUSTOMER_ACCESS_PORT\",",
															"                                                    \"vlan-interface-1-0:INTERFACE_KIND_TYPE_VIRTUAL_INSTANCE_PORT\",",
															"                                                    \"vlan-interface-1-0:INTERFACE_KIND_TYPE_STATION_FACING_BRIDGE_PORT\",",
															"                                                    \"vlan-interface-1-0:INTERFACE_KIND_TYPE_UPLINK_ACCESS_PORT\",",
															"                                                    \"vlan-interface-1-0:INTERFACE_KIND_TYPE_UPLINK_RELAY_PORT\",",
															"                                                    \"vlan-interface-1-0:INTERFACE_KIND_TYPE_NOT_YET_DEFINED\"",
															"                                                    ]",
															"                                                },",
															"                                                \"default-vlan-id\": \t\t\t\t\t{ \"type\": \"string\" },",
															"                                                \"default-priority\": \t\t\t\t{ \"type\": \"number\"  },",
															"                                                \"ingress-tag-filtering\": { \"enum\": [",
															"                                                    \"vlan-interface-1-0:INGRESS_TAG_FILTERING_TYPE_UNTAGGED_AND_PRIORITY_FRAMES_ONLY\",",
															"                                                    \"vlan-interface-1-0:INGRESS_TAG_FILTERING_TYPE_VLAN_TAGGED_FRAMES_ONLY\",",
															"                                                    \"vlan-interface-1-0:INGRESS_TAG_FILTERING_TYPE_ALL_FRAMES\",",
															"                                                    \"vlan-interface-1-0:INGRESS_TAG_FILTERING_TYPE_NOT_YET_DEFINED\"",
															"                                                    ]",
															"                                                },",
															"                                                \"ingress-vlan-id-filtering-is-on\": \t{ \"type\": \"boolean\" },",
															"                                                \"pcp-bits-interpretation-kind\": { \"enum\": [",
															"                                                    \"vlan-interface-1-0:PCP_BITS_INTERPRETATION_KIND_TYPE_8P0D\",",
															"                                                    \"vlan-interface-1-0:PCP_BITS_INTERPRETATION_KIND_TYPE_7P1D\",",
															"                                                    \"vlan-interface-1-0:PCP_BITS_INTERPRETATION_KIND_TYPE_6P2D\",",
															"                                                    \"vlan-interface-1-0:PCP_BITS_INTERPRETATION_KIND_TYPE_5P3D\",",
															"                                                    \"vlan-interface-1-0:PCP_BITS_INTERPRETATION_KIND_TYPE_NOT_YET_DEFINED\"",
															"                                                    ]",
															"                                                },",
															"                                                \"pcp-bit-to-priority-mapping-list\":             { \"type\": \"array\" },",
															"                                                \"pcp-bits-encoding-mapping-list\":               { \"type\": \"array\" },",
															"                                                \"drop-eligible-indicator-is-on\": \t\t        { \"type\": \"boolean\"\t},",
															"                                                \"drop-eligible-encoding-is-required\": \t        { \"type\": \"boolean\" },",
															"                                                \"received-priority-overwriting-is-on\": \t        { \"type\": \"boolean\"\t},",
															"                                                \"received-priority-overwriting-list\":           { \"type\": \"array\" },",
															"                                                \"vlan-id-translation-is-on\": \t\t\t        { \"type\": \"boolean\"\t},",
															"                                                \"external-to-internal-vlan-id-mapping-list\":    { \"type\": \"array\" },",
															"                                                \"egress-vlan-id-translation-is-on\":             { \"type\": \"boolean\"\t},",
															"                                                \"internal-to-egress-vlan-id-mapping-list\":      { \"type\": \"array\" },",
															"                                                \"forwarded-protocol-vlan-id-grouping-list\":     { \"type\": \"array\" },",
															"                                                \"service-access-priority-tagging-is-on\":        { \"type\": \"boolean\" },",
															"                                                \"service-access-priority-mapping-list\":         { \"type\": \"array\" },",
															"                                                \"priority-to-traffic-class-mapping-list\":       { \"type\": \"array\" },",
															"                                                \"restricted-automated-vlan-registration-is-on\": { \"type\": \"boolean\"\t},",
															"                                                \"admin-point-to-point\": { \"enum\": [",
															"                                                        \"vlan-interface-1-0:ADMIN_POINT_TO_POINT_TYPE_FORCE_TRUE\",",
															"                                                        \"vlan-interface-1-0:ADMIN_POINT_TO_POINT_TYPE_FORCE_FALSE\",",
															"                                                        \"vlan-interface-1-0:ADMIN_POINT_TO_POINT_TYPE_AUTO\",",
															"                                                        \"vlan-interface-1-0:ADMIN_POINT_TO_POINT_TYPE_NOT_YET_DEFINED\"",
															"                                                    ]",
															"                                                },",
															"                                                \"statistics-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                                            },",
															"                                        },",
															"                                        \"vlan-interface-status\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": { ",
															"                                                \"interface-status\": { \"enum\": [",
															"                                                        \"vlan-interface-1-0:INTERFACE_STATUS_TYPE_UP\",",
															"                                                        \"vlan-interface-1-0:INTERFACE_STATUS_TYPE_DOWN\",",
															"                                                        \"vlan-interface-1-0:INTERFACE_STATUS_TYPE_TESTING\",",
															"                                                        \"vlan-interface-1-0:INTERFACE_STATUS_TYPE_UNKNOWN\",",
															"                                                        \"vlan-interface-1-0:INTERFACE_STATUS_TYPE_DORMANT\",",
															"                                                        \"vlan-interface-1-0:INTERFACE_STATUS_TYPE_NOT_PRESENT\",",
															"                                                        \"vlan-interface-1-0:INTERFACE_STATUS_TYPE_LOWER_LAYER_DOWN\",",
															"                                                        \"vlan-interface-1-0:INTERFACE_STATUS_TYPE_ADMIN_DOWN\",",
															"                                                        \"vlan-interface-1-0:INTERFACE_STATUS_TYPE_NOT_YET_DEFINED\"",
															"                                                        ]",
															"                                                    },",
															"                                                \"statistics-is-up\": \t\t\t{ \"type\": \"boolean\"\t},",
															"                                                \"timestamp\": \t\t\t\t\t{ \"type\": \"string\"\t},",
															"                                                \"total-bytes-input\": \t\t\t{ \"type\": \"string\"\t},",
															"                                                \"total-frames-input\": \t\t\t{ \"type\": \"string\"\t},",
															"                                                \"total-bytes-output\": \t\t\t{ \"type\": \"string\"\t},",
															"                                                \"total-frames-output\": \t\t\t{ \"type\": \"string\"\t},",
															"                                            },",
															"                                        },",
															"                                    },",
															"                                },\t",
															"                                \"local-id\": \t\t\t\t\t                            { \"type\": \"string\" },",
															"                                \"name\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"label\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"extension\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"operational-state\":     \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"administrative-control\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"administrative-state\":    \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"lifecycle-state\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                                \"address\": \t\t\t\t\t                                { \"type\": \"string\" },",
															"                            },",
															"                            \"required\": [",
															"                                \"layer-protocol-name\",",
															"                                \"vlan-interface-1-0:vlan-interface-pac\",",
															"                                \"local-id\",",
															"                            ],",
															"                        },",
															"                    },",
															"                    \"external-managed-id\": {",
															"                        \"type\": \"object\",",
															"                        \"properties\": {",
															"                            \"manager-identifier\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                            \"external-managed-uuid\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                        },",
															"                    },",
															"                    \"local-id\": \t\t\t\t\t                            { \"type\": \"string\" },",
															"                    \"uuid\": \t\t\t\t\t                                { \"type\": \"string\" },",
															"                    \"name\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"value\":                                        { \"type\": \"string\" },",
															"                            },",
															"                        },",
															"                    },",
															"                    \"label\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"value\":                                        { \"type\": \"string\" },",
															"                            },",
															"                        },",
															"                    },",
															"                    \"extension\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"value\":                                        { \"type\": \"string\" },",
															"                            },",
															"                        },",
															"                    },",
															"                    \"operational-state\":     \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"administrative-control\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"administrative-state\":    \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"lifecycle-state\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                    \"address\": \t\t\t\t\t                                { \"type\": \"string\" },",
															"                },",
															"                \"required\": [",
															"                    \"server-ltp\",",
															"                    \"layer-protocol\",",
															"                    \"uuid\",",
															"                    \"name\",",
															"                ],",
															"            },",
															"        },",
															"    },",
															"    \"required\": [",
															"        \"core-model-1-4:logical-termination-point\",",
															"    ]",
															"};",
															"pm.variables.set(\"schema\", VLAN_INTERFACE_LTP_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\", \"\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PacCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-----------------------Checking VlanInterface_Pac for Completeness------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* PacCompleteness",
															"* ",
															"* This Request is for validating VlanInterface Pac Objects against definition ",
															"* VlanInterface_1.0.0-tsp.200731.1235",
															"* as it can be found on https://github.com/openBackhaul/vlanInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the *_Pac class",
															"*  - availability of all attributes in this particular class",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"pac\";             // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 3;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let VLAN_INTERFACE_PAC_SCHEMA = {",
															"    \"type\": \"object\",",
															"\t\"properties\": {",
															"        \"vlan-interface-capability\": {",
															"\t\t\t\"type\": \"object\",",
															"            \"properties\": {",
															"\t\t\t\t\"supported-sub-layer-protocol-name-list\": {\t \"enum\": [",
															"\t\t\t\t\t\"vlan-interface-1-0:SUB_LAYER_PROTOCOL_NAME_TYPE_D_BRIDGE_COMPONENT\",",
															"\t\t\t\t\t\"vlan-interface-1-0:SUB_LAYER_PROTOCOL_NAME_TYPE_C_VLAN_COMPONENT\",",
															"\t\t\t\t\t\"vlan-interface-1-0:SUB_LAYER_PROTOCOL_NAME_TYPE_S_VLAN_COMPONENT\",",
															"\t\t\t\t\t\"vlan-interface-1-0:SUB_LAYER_PROTOCOL_NAME_TYPE_EDGE_RELAY_COMPONENT\",",
															"\t\t\t\t\t\"vlan-interface-1-0:SUB_LAYER_PROTOCOL_NAME_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t] ",
															"\t\t\t\t},",
															"\t\t\t\t\"supported-interface-kind-list\": { \"enum\": [",
															"\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_KIND_TYPE_D_BRIDGE_PORT\",",
															"\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_KIND_TYPE_C_VLAN_BRIDGE_PORT\",",
															"\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_KIND_TYPE_CUSTOMER_EDGE_PORT\",",
															"\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_KIND_TYPE_PROVIDER_EDGE_PORT\",",
															"\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_KIND_TYPE_CUSTOMER_NETWORK_PORT\",",
															"\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_KIND_TYPE_PROVIDER_NETWORK_PORT\",",
															"\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_KIND_TYPE_CUSTOMER_BACKBONE_PORT\",",
															"\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_KIND_TYPE_REMOTE_CUSTOMER_ACCESS_PORT\",",
															"\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_KIND_TYPE_VIRTUAL_INSTANCE_PORT\",",
															"\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_KIND_TYPE_STATION_FACING_BRIDGE_PORT\",",
															"\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_KIND_TYPE_UPLINK_ACCESS_PORT\",",
															"\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_KIND_TYPE_UPLINK_RELAY_PORT\",",
															"\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_KIND_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t]",
															"\t\t\t\t},",
															"\t\t\t\t\"tagging-and-mvrp-is-avail\": \t\t\t\t\t{ \"type\": \"boolean\"\t},",
															"\t\t\t\t\"configuring-ingress-tag-filtering-is-avail\": \t{ \"type\": \"boolean\"\t},",
															"\t\t\t\t\"ingress-vlan-id-filtering-is-avail\": \t\t\t{ \"type\": \"boolean\"\t},",
															"\t\t\t\t\"available-pcp-bits-interpretation-kind-list\":  { \"enum\": [",
															"\t\t\t\t\t\t \"vlan-interface-1-0:PCP_BITS_INTERPRETATION_KIND_TYPE_8P0D\",",
															"\t\t\t\t\t\t \"vlan-interface-1-0:PCP_BITS_INTERPRETATION_KIND_TYPE_7P1D\",",
															"\t\t\t\t\t\t \"vlan-interface-1-0:PCP_BITS_INTERPRETATION_KIND_TYPE_6P2D\",",
															"\t\t\t\t\t\t \"vlan-interface-1-0:PCP_BITS_INTERPRETATION_KIND_TYPE_5P3D\",",
															"\t\t\t\t\t\t \"vlan-interface-1-0:PCP_BITS_INTERPRETATION_KIND_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t]",
															"\t\t\t\t},\t",
															"\t\t\t\t\"configuring-pcp-bits-decoding-is-avail\": \t\t\t\t{ \"type\": \"boolean\"\t},",
															"\t\t\t\t\"configuring-pcp-bits-encoding-is-avail\": \t\t\t\t{ \"type\": \"boolean\"\t},",
															"\t\t\t\t\"drop-eligible-indicator-is-avail\": \t  \t\t\t\t{ \"type\": \"boolean\"\t},",
															"\t\t\t\t\"number-of-available-priorities\": \t\t  \t\t\t\t{ \"type\": \"number\"\t},",
															"\t\t\t\t\"received-priority-overwriting-is-avail\": \t\t\t\t{ \"type\": \"boolean\"\t},",
															"\t\t\t\t\"vlan-id-translation-is-avail\": \t\t  \t\t\t\t{ \"type\": \"boolean\"\t},",
															"\t\t\t\t\"egress-vlan-id-translation-is-avail\":    \t\t\t\t{ \"type\": \"boolean\"\t},",
															"\t\t\t\t\"port-and-protocol-based-vlan-is-avail\":  \t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\"max-number-of-protocol-vlan-id-groupings\": \t\t\t{ \"type\": \"number\"  },",
															"\t\t\t\t\"service-access-priority-tagging-is-avail\": \t\t\t{ \"type\": \"boolean\"\t},",
															"\t\t\t\t\"configuring-service-access-priority-mapping-is-avail\": { \"type\": \"boolean\"\t},",
															"\t\t\t\t\"number-of-available-traffic-classes\": \t\t\t\t\t{ \"type\": \"number\"\t},",
															"\t\t\t\t\"restricted-automated-vlan-registration-is-avail\": \t\t{\"type\": \"boolean\" },",
															"\t\t\t\t\"admin-shut-down-is-avail\": \t\t\t\t\t\t\t{ \"type\": \"boolean\"\t},",
															"\t\t\t\t\"statistics-is-avail\": \t\t                            { \"type\": \"boolean\"\t}",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"vlan-interface-configuration\": {",
															"\t\t\t\"type\": \"object\",",
															"            \"properties\": {",
															"\t\t\t\t\"interface-name\": \t\t\t\t\t{ \"type\": \"string\"  },",
															"\t\t\t\t\"sub-layer-protocol-name\": { \"enum\": [",
															"\t\t\t\t\t\"vlan-interface-1-0:SUB_LAYER_PROTOCOL_NAME_TYPE_D_BRIDGE_COMPONENT\",",
															"\t\t\t\t\t\"vlan-interface-1-0:SUB_LAYER_PROTOCOL_NAME_TYPE_C_VLAN_COMPONENT\",",
															"\t\t\t\t\t\"vlan-interface-1-0:SUB_LAYER_PROTOCOL_NAME_TYPE_S_VLAN_COMPONENT\",",
															"\t\t\t\t\t\"vlan-interface-1-0:SUB_LAYER_PROTOCOL_NAME_TYPE_EDGE_RELAY_COMPONENT\",",
															"\t\t\t\t\t\"vlan-interface-1-0:SUB_LAYER_PROTOCOL_NAME_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t]",
															"\t\t\t\t},",
															"\t\t\t\t\"interface-kind\": \t{ \"enum\": [",
															"\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_KIND_TYPE_D_BRIDGE_PORT\",",
															"\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_KIND_TYPE_C_VLAN_BRIDGE_PORT\",",
															"\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_KIND_TYPE_CUSTOMER_EDGE_PORT\",",
															"\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_KIND_TYPE_PROVIDER_EDGE_PORT\",",
															"\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_KIND_TYPE_CUSTOMER_NETWORK_PORT\",",
															"\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_KIND_TYPE_PROVIDER_NETWORK_PORT\",",
															"\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_KIND_TYPE_CUSTOMER_BACKBONE_PORT\",",
															"\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_KIND_TYPE_REMOTE_CUSTOMER_ACCESS_PORT\",",
															"\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_KIND_TYPE_VIRTUAL_INSTANCE_PORT\",",
															"\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_KIND_TYPE_STATION_FACING_BRIDGE_PORT\",",
															"\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_KIND_TYPE_UPLINK_ACCESS_PORT\",",
															"\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_KIND_TYPE_UPLINK_RELAY_PORT\",",
															"\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_KIND_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t]",
															"\t\t\t\t},",
															"\t\t\t\t\"default-vlan-id\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\"default-priority\": \t\t\t\t{ \"type\": \"number\"  },",
															"\t\t\t\t\"ingress-tag-filtering\": { \"enum\": [",
															"\t\t\t\t\t\"vlan-interface-1-0:INGRESS_TAG_FILTERING_TYPE_UNTAGGED_AND_PRIORITY_FRAMES_ONLY\",",
															"\t\t\t\t\t\"vlan-interface-1-0:INGRESS_TAG_FILTERING_TYPE_VLAN_TAGGED_FRAMES_ONLY\",",
															"\t\t\t\t\t\"vlan-interface-1-0:INGRESS_TAG_FILTERING_TYPE_ALL_FRAMES\",",
															"\t\t\t\t\t\"vlan-interface-1-0:INGRESS_TAG_FILTERING_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t]",
															"\t\t\t\t},",
															"\t\t\t\t\"ingress-vlan-id-filtering-is-on\": \t{ \"type\": \"boolean\" },",
															"\t\t\t\t\"pcp-bits-interpretation-kind\": { \"enum\": [",
															"\t\t\t\t\t \"vlan-interface-1-0:PCP_BITS_INTERPRETATION_KIND_TYPE_8P0D\",",
															"\t\t\t\t\t \"vlan-interface-1-0:PCP_BITS_INTERPRETATION_KIND_TYPE_7P1D\",",
															"\t\t\t\t\t \"vlan-interface-1-0:PCP_BITS_INTERPRETATION_KIND_TYPE_6P2D\",",
															"\t\t\t\t\t \"vlan-interface-1-0:PCP_BITS_INTERPRETATION_KIND_TYPE_5P3D\",",
															"\t\t\t\t\t \"vlan-interface-1-0:PCP_BITS_INTERPRETATION_KIND_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t]",
															"\t\t\t\t},",
															"\t\t\t\t\"pcp-bit-to-priority-mapping-list\":             { \"type\": \"array\" },",
															"\t\t\t\t\"pcp-bits-encoding-mapping-list\":               { \"type\": \"array\" },",
															"\t\t\t\t\"drop-eligible-indicator-is-on\": \t\t        { \"type\": \"boolean\"\t},",
															"\t\t\t\t\"drop-eligible-encoding-is-required\": \t        { \"type\": \"boolean\" },",
															"\t\t\t\t\"received-priority-overwriting-is-on\": \t        { \"type\": \"boolean\"\t},",
															"\t\t\t\t\"received-priority-overwriting-list\":           { \"type\": \"array\" },",
															"\t\t\t\t\"vlan-id-translation-is-on\": \t\t\t        { \"type\": \"boolean\"\t},",
															"\t\t\t\t\"external-to-internal-vlan-id-mapping-list\":    { \"type\": \"array\" },",
															"\t\t\t\t\"egress-vlan-id-translation-is-on\":             { \"type\": \"boolean\"\t},",
															"\t\t\t\t\"internal-to-egress-vlan-id-mapping-list\":      { \"type\": \"array\" },",
															"\t\t\t\t\"forwarded-protocol-vlan-id-grouping-list\":     { \"type\": \"array\" },",
															"\t\t\t\t\"service-access-priority-tagging-is-on\":        { \"type\": \"boolean\" },",
															"\t\t\t\t\"service-access-priority-mapping-list\":         { \"type\": \"array\" },",
															"\t\t\t\t\"priority-to-traffic-class-mapping-list\":       { \"type\": \"array\" },",
															"\t\t\t\t\"restricted-automated-vlan-registration-is-on\": { \"type\": \"boolean\"\t},",
															"\t\t\t\t\"admin-point-to-point\": { \"enum\": [",
															"\t\t\t\t\t\t\"vlan-interface-1-0:ADMIN_POINT_TO_POINT_TYPE_FORCE_TRUE\",",
															"\t\t\t\t\t\t\"vlan-interface-1-0:ADMIN_POINT_TO_POINT_TYPE_FORCE_FALSE\",",
															"\t\t\t\t\t\t\"vlan-interface-1-0:ADMIN_POINT_TO_POINT_TYPE_AUTO\",",
															"\t\t\t\t\t\t\"vlan-interface-1-0:ADMIN_POINT_TO_POINT_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t]",
															"\t\t\t\t},",
															"\t\t\t\t\"statistics-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" }",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"vlan-interface-status\": {",
															"\t\t\t\"type\": \"object\",",
															"            \"properties\": { ",
															"\t\t\t\t\"interface-status\": { \"enum\": [",
															"\t\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_STATUS_TYPE_UP\",",
															"\t\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_STATUS_TYPE_DOWN\",",
															"\t\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_STATUS_TYPE_TESTING\",",
															"\t\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_STATUS_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_STATUS_TYPE_DORMANT\",",
															"\t\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_STATUS_TYPE_NOT_PRESENT\",",
															"\t\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_STATUS_TYPE_LOWER_LAYER_DOWN\",",
															"\t\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_STATUS_TYPE_ADMIN_DOWN\",",
															"\t\t\t\t\t\t\"vlan-interface-1-0:INTERFACE_STATUS_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t]",
															"\t\t\t\t\t},",
															"\t\t\t\t\"statistics-is-up\": \t\t\t{ \"type\": \"boolean\"\t},",
															"\t\t\t\t\"timestamp\": \t\t\t\t\t{ \"type\": \"string\"\t},",
															"\t\t\t\t\"total-bytes-input\": \t\t\t{ \"type\": \"string\"\t},",
															"\t\t\t\t\"total-frames-input\": \t\t\t{ \"type\": \"string\"\t},",
															"\t\t\t\t\"total-bytes-output\": \t\t\t{ \"type\": \"string\"\t},",
															"\t\t\t\t\"total-frames-output\": \t\t\t{ \"type\": \"string\"\t}",
															"\t\t\t}",
															"\t\t},",
															"\t},",
															"\t\"required\": [\t\"vlan-interface-capability\",",
															"\t\t\t\t\t\"vlan-interface-configuration\",",
															"\t\t\t\t\t\"vlan-interface-status\"",
															"\t\t\t\t]",
															"};",
															"",
															"pm.variables.set(\"schema\", VLAN_INTERFACE_PAC_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CapabilityCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------------Checking VlanInterfaceCapability for Completeness---------------------\");",
															"/****************************************************************************************",
															"* ",
															"* CapabilityCompleteness",
															"* ",
															"* This Request is for validating VlanInterface Capability Objects against definition ",
															"* VlanInterface_1.0.0-tsp.200731.1235",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/VlanInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Capability class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let VLAN_INTERFACE_CAPABILITY_SCHEMA = {",
															"\t\"type\": \"object\",",
															"\t\"properties\": {",
															"\t\t\"supported-sub-layer-protocol-name-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": { \"enum\": [",
															"                        \"vlan-interface-1-0:SUB_LAYER_PROTOCOL_NAME_TYPE_D_BRIDGE_COMPONENT\",",
															"                        \"vlan-interface-1-0:SUB_LAYER_PROTOCOL_NAME_TYPE_C_VLAN_COMPONENT\",",
															"                        \"vlan-interface-1-0:SUB_LAYER_PROTOCOL_NAME_TYPE_S_VLAN_COMPONENT\",",
															"                        \"vlan-interface-1-0:SUB_LAYER_PROTOCOL_NAME_TYPE_EDGE_RELAY_COMPONENT\",",
															"                        \"vlan-interface-1-0:SUB_LAYER_PROTOCOL_NAME_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t] ",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"supported-interface-kind-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": { \"enum\": [",
															"                        \"vlan-interface-1-0:INTERFACE_KIND_TYPE_D_BRIDGE_PORT\",",
															"                        \"vlan-interface-1-0:INTERFACE_KIND_TYPE_C_VLAN_BRIDGE_PORT\",",
															"                        \"vlan-interface-1-0:INTERFACE_KIND_TYPE_CUSTOMER_EDGE_PORT\",",
															"                        \"vlan-interface-1-0:INTERFACE_KIND_TYPE_PROVIDER_EDGE_PORT\",",
															"                        \"vlan-interface-1-0:INTERFACE_KIND_TYPE_CUSTOMER_NETWORK_PORT\",",
															"                        \"vlan-interface-1-0:INTERFACE_KIND_TYPE_PROVIDER_NETWORK_PORT\",",
															"                        \"vlan-interface-1-0:INTERFACE_KIND_TYPE_CUSTOMER_BACKBONE_PORT\",",
															"                        \"vlan-interface-1-0:INTERFACE_KIND_TYPE_REMOTE_CUSTOMER_ACCESS_PORT\",",
															"                        \"vlan-interface-1-0:INTERFACE_KIND_TYPE_VIRTUAL_INSTANCE_PORT\",",
															"                        \"vlan-interface-1-0:INTERFACE_KIND_TYPE_STATION_FACING_BRIDGE_PORT\",",
															"                        \"vlan-interface-1-0:INTERFACE_KIND_TYPE_UPLINK_ACCESS_PORT\",",
															"                        \"vlan-interface-1-0:INTERFACE_KIND_TYPE_UPLINK_RELAY_PORT\",",
															"                        \"vlan-interface-1-0:INTERFACE_KIND_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"tagging-and-mvrp-is-avail\": \t\t\t\t\t{ \"type\": \"boolean\"\t},",
															"\t\t\"configuring-ingress-tag-filtering-is-avail\": \t{ \"type\": \"boolean\"\t},",
															"\t\t\"ingress-vlan-id-filtering-is-avail\": \t\t\t{ \"type\": \"boolean\"\t},",
															"\t\t",
															"\t\t\"available-pcp-bits-interpretation-kind-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": { \"enum\": [",
															"\t\t\t\t\t\t \"vlan-interface-1-0:PCP_BITS_INTERPRETATION_KIND_TYPE_8P0D\",",
															"\t\t\t\t\t\t \"vlan-interface-1-0:PCP_BITS_INTERPRETATION_KIND_TYPE_7P1D\",",
															"\t\t\t\t\t\t \"vlan-interface-1-0:PCP_BITS_INTERPRETATION_KIND_TYPE_6P2D\",",
															"\t\t\t\t\t\t \"vlan-interface-1-0:PCP_BITS_INTERPRETATION_KIND_TYPE_5P3D\",",
															"\t\t\t\t\t\t \"vlan-interface-1-0:PCP_BITS_INTERPRETATION_KIND_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t",
															"\t\t\"configuring-pcp-bits-decoding-is-avail\":               { \"type\": \"boolean\"\t},",
															"\t\t\"configuring-pcp-bits-encoding-is-avail\":               { \"type\": \"boolean\"\t},",
															"\t\t\"drop-eligible-indicator-is-avail\": \t                { \"type\": \"boolean\"\t},",
															"\t\t\"number-of-available-priorities\": \t\t                { \"type\": \"number\"\t},",
															"\t\t\"received-priority-overwriting-is-avail\":               { \"type\": \"boolean\"\t},",
															"\t\t\"vlan-id-translation-is-avail\": \t\t                { \"type\": \"boolean\"\t},",
															"\t\t\"egress-vlan-id-translation-is-avail\":                  { \"type\": \"boolean\"\t},",
															"\t\t\"port-and-protocol-based-vlan-is-avail\":                { \"type\": \"boolean\" },",
															"\t\t\"max-number-of-protocol-vlan-id-groupings\":             { \"type\": \"number\"  },",
															"\t\t\"service-access-priority-tagging-is-avail\":             { \"type\": \"boolean\"\t},",
															"\t\t\"configuring-service-access-priority-mapping-is-avail\": { \"type\": \"boolean\" },",
															"\t\t\"number-of-available-traffic-classes\": \t\t            { \"type\": \"number\"  },",
															"\t\t\"restricted-automated-vlan-registration-is-avail\":      { \"type\": \"boolean\" },",
															"\t\t\"admin-shut-down-is-avail\": \t\t\t\t            { \"type\": \"boolean\"\t},",
															"\t\t\"statistics-is-avail\": \t\t{ \"type\": \"boolean\"\t}",
															"\t},",
															"\t\"required\": [ \t\"supported-sub-layer-protocol-name-list\",",
															"\t\t\t\t\t\"supported-interface-kind-list\",",
															"\t\t\t\t\t\"tagging-and-mvrp-is-avail\",",
															"\t\t\t\t\t\"configuring-ingress-tag-filtering-is-avail\",",
															"\t\t\t\t\t\"ingress-vlan-id-filtering-is-avail\",",
															"\t\t\t\t\t\"available-pcp-bits-interpretation-kind-list\",",
															"\t\t\t\t\t\"configuring-pcp-bits-decoding-is-avail\",",
															"\t\t\t\t\t\"configuring-pcp-bits-encoding-is-avail\",",
															"\t\t\t\t\t\"drop-eligible-indicator-is-avail\",",
															"\t\t\t\t\t\"number-of-available-priorities\",",
															"\t\t\t\t\t\"received-priority-overwriting-is-avail\",",
															"\t\t\t\t\t\"vlan-id-translation-is-avail\",",
															"\t\t\t\t\t\"egress-vlan-id-translation-is-avail\",",
															"\t\t\t\t\t\"port-and-protocol-based-vlan-is-avail\",",
															"\t\t\t\t\t\"max-number-of-protocol-vlan-id-groupings\",",
															"\t\t\t\t\t\"service-access-priority-tagging-is-avail\",",
															"\t\t\t\t\t\"configuring-service-access-priority-mapping-is-avail\",",
															"\t\t\t\t\t\"number-of-available-traffic-classes\",",
															"\t\t\t\t\t\"restricted-automated-vlan-registration-is-avail\",",
															"\t\t\t\t\t\"admin-shut-down-is-avail\",\t\t",
															"\t\t\t\t\t\"statistics-is-avail\"",
															"\t\t\t\t]",
															"};",
															"",
															"pm.variables.set(\"schema\", VLAN_INTERFACE_CAPABILITY_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ConfigurationCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n------------------Checking VlanInterfaceConfiguration for Completeness--------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ConfigurationCompleteness",
															"* ",
															"* This Request is for validating VlanInterface Configuration Objects against definition ",
															"* VlanInterface_1.0.0-tsp.200731.1235",
															"* as it can be found on https://github.com/openBackhaul/VlanInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Configuration class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let VLAN_INTERFACE_CONFIGURATION_SCHEMA = {",
															"\t\"type\": \"object\",",
															"\t\"properties\": {",
															"\t\t\"interface-name\": \t\t\t\t\t{ \"type\": \"string\"  },",
															"\t\t\"sub-layer-protocol-name\": \t{ \"enum\": ",
															"\t\t\t[",
															"\t\t\t\t\"vlan-interface-1-0:SUB_LAYER_PROTOCOL_NAME_TYPE_D_BRIDGE_COMPONENT\",",
															"\t\t\t\t\"vlan-interface-1-0:SUB_LAYER_PROTOCOL_NAME_TYPE_C_VLAN_COMPONENT\",",
															"\t\t\t\t\"vlan-interface-1-0:SUB_LAYER_PROTOCOL_NAME_TYPE_S_VLAN_COMPONENT\",",
															"\t\t\t\t\"vlan-interface-1-0:SUB_LAYER_PROTOCOL_NAME_TYPE_EDGE_RELAY_COMPONENT\",",
															"\t\t\t\t\"vlan-interface-1-0:SUB_LAYER_PROTOCOL_NAME_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t]",
															"\t\t},",
															"\t\t\"interface-kind\": \t{ \"enum\": ",
															"\t\t\t[",
															"                \"vlan-interface-1-0:INTERFACE_KIND_TYPE_D_BRIDGE_PORT\",",
															"                \"vlan-interface-1-0:INTERFACE_KIND_TYPE_C_VLAN_BRIDGE_PORT\",",
															"                \"vlan-interface-1-0:INTERFACE_KIND_TYPE_CUSTOMER_EDGE_PORT\",",
															"                \"vlan-interface-1-0:INTERFACE_KIND_TYPE_PROVIDER_EDGE_PORT\",",
															"                \"vlan-interface-1-0:INTERFACE_KIND_TYPE_CUSTOMER_NETWORK_PORT\",",
															"                \"vlan-interface-1-0:INTERFACE_KIND_TYPE_PROVIDER_NETWORK_PORT\",",
															"                \"vlan-interface-1-0:INTERFACE_KIND_TYPE_CUSTOMER_BACKBONE_PORT\",",
															"                \"vlan-interface-1-0:INTERFACE_KIND_TYPE_REMOTE_CUSTOMER_ACCESS_PORT\",",
															"                \"vlan-interface-1-0:INTERFACE_KIND_TYPE_VIRTUAL_INSTANCE_PORT\",",
															"                \"vlan-interface-1-0:INTERFACE_KIND_TYPE_STATION_FACING_BRIDGE_PORT\",",
															"                \"vlan-interface-1-0:INTERFACE_KIND_TYPE_UPLINK_ACCESS_PORT\",",
															"                \"vlan-interface-1-0:INTERFACE_KIND_TYPE_UPLINK_RELAY_PORT\",",
															"                \"vlan-interface-1-0:INTERFACE_KIND_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t]",
															"\t\t},",
															"\t\t\"default-vlan-id\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\"default-priority\": \t\t\t\t{ \"type\": \"number\"  },",
															"\t\t\"ingress-tag-filtering\": { \"enum\": ",
															"\t\t\t[",
															"                \"vlan-interface-1-0:INGRESS_TAG_FILTERING_TYPE_UNTAGGED_AND_PRIORITY_FRAMES_ONLY\",",
															"                \"vlan-interface-1-0:INGRESS_TAG_FILTERING_TYPE_VLAN_TAGGED_FRAMES_ONLY\",",
															"                \"vlan-interface-1-0:INGRESS_TAG_FILTERING_TYPE_ALL_FRAMES\",",
															"                \"vlan-interface-1-0:INGRESS_TAG_FILTERING_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t]",
															"\t\t},",
															"\t\t\"ingress-vlan-id-filtering-is-on\": \t{ \"type\": \"boolean\" },",
															"\t\t\"pcp-bits-interpretation-kind\": { \"enum\": ",
															"\t\t\t[",
															"\t\t\t\t \"vlan-interface-1-0:PCP_BITS_INTERPRETATION_KIND_TYPE_8P0D\",",
															"\t\t\t\t \"vlan-interface-1-0:PCP_BITS_INTERPRETATION_KIND_TYPE_7P1D\",",
															"\t\t\t\t \"vlan-interface-1-0:PCP_BITS_INTERPRETATION_KIND_TYPE_6P2D\",",
															"\t\t\t\t \"vlan-interface-1-0:PCP_BITS_INTERPRETATION_KIND_TYPE_5P3D\",",
															"\t\t\t\t \"vlan-interface-1-0:PCP_BITS_INTERPRETATION_KIND_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t]\t",
															"\t\t},",
															"\t\t\"pcp-bit-to-priority-mapping-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"\t\t\t\t\t\"to-be-decoded-pcp-bits-value\": { \"type\": \"number\" },",
															"\t\t\t\t\t\"associated-priority-value\": \t{ \"type\": \"number\" },",
															"\t\t\t\t\t\"associated-drop-eligibility\": \t{ \"type\": \"boolean\" }",
															"\t\t\t\t},",
															"           \t\t\"required\": [\t\"to-be-decoded-pcp-bits-value\",",
															"\t\t\t\t\t\t\t\t\"associated-priority-value\",",
															"\t\t\t\t\t\t\t\t\"associated-drop-eligibility\"",
															"\t\t\t\t\t\t\t]",
															"        \t}",
															"    \t},",
															"        \"pcp-bits-encoding-mapping-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"\t\t\t\t\t\"to-be-encoded-priority-value\": \t{ \"type\": \"number\" },",
															"\t\t\t\t\t\"to-be-encoded-drop-eligibility\": \t{ \"type\": \"boolean\" },",
															"\t\t\t\t\t\"associated-pcp-bits-value\":\t    { \"type\": \"number\" }",
															"\t\t\t\t},",
															"           \t\t\"required\": [\t\"to-be-encoded-priority-value\",",
															"\t\t\t\t\t\t\t\t\"to-be-encoded-drop-eligibility\",",
															"\t\t\t\t\t\t\t\t\"associated-pcp-bits-value\"",
															"\t\t\t\t\t\t\t]",
															"        \t}",
															"    \t},",
															"\t\t\"drop-eligible-indicator-is-on\": \t\t{ \"type\": \"boolean\"\t},",
															"\t\t\"drop-eligible-encoding-is-required\": \t{ \"type\": \"boolean\" },",
															"\t\t\"received-priority-overwriting-is-on\": \t{ \"type\": \"boolean\"\t},",
															"\t\t",
															"\t\t\"received-priority-overwriting-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"\t\t\t\t\t\"to-be-overwritten-priority-value\": {\"type\": \"number\"},",
															"\t\t\t\t\t\"new-priority-value\": \t\t\t\t{ \"type\": \"number\" }",
															"\t\t\t\t},",
															"           \t\t\"required\": [\t\"to-be-overwritten-priority-value\",",
															"\t\t\t\t\t\t\t\t\"new-priority-value\"",
															"\t\t\t\t\t\t\t]",
															"        \t}",
															"    \t},",
															"\t\t\"vlan-id-translation-is-on\": \t\t\t{ \"type\": \"boolean\"\t},",
															"\t\t\"external-to-internal-vlan-id-mapping-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"\t\t\t\t\t\"external-vlan-id\": {\"type\": \"number\"\t},",
															"\t\t\t\t\t\"internal-vlan-id\": {\"type\": \"number\"\t}",
															"\t\t\t\t},",
															"           \t\t\"required\": [\t\"external-vlan-id\",",
															"\t\t\t\t\t\t\t\t\"internal-vlan-id\"",
															"\t\t\t\t\t\t\t]",
															"        \t}",
															"    \t},",
															"\t\t\"egress-vlan-id-translation-is-on\": { \"type\": \"boolean\"\t},",
															"\t\t\"internal-to-egress-vlan-id-mapping-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"\t\t\t\t\t\"internal-vlan-id\": { \"type\": \"number\"\t},",
															"\t\t\t\t\t\"egress-vlan-id\":   {\t\"type\": \"number\" }",
															"\t\t\t\t},",
															"           \t\t\"required\": [\t\"internal-vlan-id\",",
															"\t\t\t\t\t\t\t\t\"egress-vlan-id\"",
															"\t\t\t\t\t\t\t]",
															"        \t}",
															"    \t},",
															"\t\t\"forwarded-protocol-vlan-id-grouping-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"\t\t\t\t\t\"forwarded-protocol-group-id\": {\"type\": \"number\" },",
															"\t\t\t\t\t\"forwarded-vlan-id-list\": {\t",
															"\t\t\t\t\t\t\"type\": \"array\",",
															"\t\t\t\t\t\t\"items\": {\t\"type\": \"string\"\t}",
															"\t\t\t\t\t}",
															"\t\t\t\t},",
															"           \t\t\"required\": [\t\"forwarded-protocol-group-id\",",
															"\t\t\t\t\t\t\t\t\"forwarded-vlan-id-list\"",
															"\t\t\t\t\t\t\t]",
															"        \t}",
															"    \t},",
															"\t\t\"service-access-priority-tagging-is-on\": {\t\"type\": \"boolean\"\t},",
															"\t\t",
															"\t\t\"service-access-priority-mapping-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"\t\t\t\t\t\"c-vlan-priority-value\": {\t\"type\": \"number\" },",
															"\t\t\t\t\t\"s-vlan-pcp-bits-value\": {\t\"type\": \"number\" }",
															"\t\t\t\t},",
															"           \t\t\"required\": [\t\"c-vlan-priority-value\",",
															"\t\t\t\t\t\t\t\t\"s-vlan-pcp-bits-value\"",
															"\t\t\t\t\t\t\t]",
															"        \t}",
															"    \t},",
															"\t\t\"priority-to-traffic-class-mapping-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"\t\t\t\t\t\"priority-value\": \t\t{ \"type\": \"number\"  },",
															"\t\t\t\t\t\"traffic-class-value\":  { \"type\": \"number\"\t}",
															"\t\t\t\t},",
															"           \t\t\"required\": [\t\"priority-value\",",
															"\t\t\t\t\t\t\t\t\"traffic-class-value\"",
															"\t\t\t\t\t\t\t]",
															"        \t}",
															"    \t},",
															"\t\t\"restricted-automated-vlan-registration-is-on\": { \"type\": \"boolean\"\t},",
															"\t\t\"admin-point-to-point\": { \"enum\": [",
															"\t\t\t\t\"vlan-interface-1-0:ADMIN_POINT_TO_POINT_TYPE_FORCE_TRUE\",",
															"\t\t\t\t\"vlan-interface-1-0:ADMIN_POINT_TO_POINT_TYPE_FORCE_FALSE\",",
															"\t\t\t\t\"vlan-interface-1-0:ADMIN_POINT_TO_POINT_TYPE_AUTO\",",
															"\t\t\t\t\"vlan-interface-1-0:ADMIN_POINT_TO_POINT_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t]",
															"\t\t}, ",
															"\t\t\"statistics-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" }",
															"\t},",
															"\t\"required\": [ \t\"interface-name\", ",
															"\t\t\t\t\t\"sub-layer-protocol-name\",",
															"\t\t\t\t\t\"interface-kind\",",
															"\t\t\t\t\t\"default-vlan-id\",",
															"\t\t\t\t\t\"default-priority\",",
															"\t\t\t\t\t\"ingress-tag-filtering\",",
															"\t\t\t\t\t\"ingress-vlan-id-filtering-is-on\",",
															"\t\t\t\t\t\"pcp-bits-interpretation-kind\",",
															"\t\t\t\t\t\"pcp-bit-to-priority-mapping-list\",",
															"\t\t\t\t\t\"pcp-bits-encoding-mapping-list\",",
															"\t\t\t\t\t\"drop-eligible-indicator-is-on\",",
															"\t\t\t\t\t\"drop-eligible-encoding-is-required\",",
															"\t\t\t\t\t\"received-priority-overwriting-is-on\",",
															"\t\t\t\t\t\"received-priority-overwriting-list\",",
															"\t\t\t\t\t\"vlan-id-translation-is-on\",",
															"\t\t\t\t\t\"external-to-internal-vlan-id-mapping-list\",",
															"\t\t\t\t\t\"egress-vlan-id-translation-is-on\",",
															"\t\t\t\t\t\"internal-to-egress-vlan-id-mapping-list\",",
															"\t\t\t\t\t\"forwarded-protocol-vlan-id-grouping-list\",",
															"\t\t\t\t\t\"service-access-priority-tagging-is-on\",",
															"\t\t\t\t\t\"service-access-priority-mapping-list\",",
															"\t\t\t\t\t\"priority-to-traffic-class-mapping-list\",",
															"\t\t\t\t\t\"restricted-automated-vlan-registration-is-on\",",
															"\t\t\t\t\t\"admin-point-to-point\",",
															"\t\t\t\t\t\"statistics-is-on\"",
															"\t\t        ]",
															"};",
															"try {",
															"    if (capability[\"configuring-pcp-bits-decoding-is-avail\"]===false) {",
															"        pm.variables.set(\"schemaToBeShortened\", VLAN_INTERFACE_CONFIGURATION_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"pcp-bit-to-priority-mapping-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        VLAN_INTERFACE_CONFIGURATION_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"    }",
															"    if (capability[\"configuring-pcp-bits-encoding-is-avail\"]===false) {",
															"        pm.variables.set(\"schemaToBeShortened\", VLAN_INTERFACE_CONFIGURATION_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"pcp-bits-encoding-mapping-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        VLAN_INTERFACE_CONFIGURATION_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"    }",
															"    if (capability[\"received-priority-overwriting-is-avail\"]===false) {",
															"        pm.variables.set(\"schemaToBeShortened\", VLAN_INTERFACE_CONFIGURATION_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"received-priority-overwriting-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        VLAN_INTERFACE_CONFIGURATION_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"    }",
															"    if (capability[\"vlan-id-translation-is-avail\"]===false) {",
															"        pm.variables.set(\"schemaToBeShortened\", VLAN_INTERFACE_CONFIGURATION_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"external-to-internal-vlan-id-mapping-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        VLAN_INTERFACE_CONFIGURATION_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"    }",
															"    if (capability[\"egress-vlan-id-translation-is-avail\"]===false) {",
															"        pm.variables.set(\"schemaToBeShortened\", VLAN_INTERFACE_CONFIGURATION_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"internal-to-egress-vlan-id-mapping-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        VLAN_INTERFACE_CONFIGURATION_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"    }",
															"    if (capability[\"port-and-protocol-based-vlan-is-avail\"]===false) {",
															"        pm.variables.set(\"schemaToBeShortened\", VLAN_INTERFACE_CONFIGURATION_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"forwarded-protocol-vlan-id-grouping-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        VLAN_INTERFACE_CONFIGURATION_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"    }",
															"    if (capability[\"service-access-priority-tagging-is-avail\"]===false) {",
															"        pm.variables.set(\"schemaToBeShortened\", VLAN_INTERFACE_CONFIGURATION_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"service-access-priority-mapping-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        VLAN_INTERFACE_CONFIGURATION_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"    }",
															"    CouldVlanInterfaceConfigurationBeShortened(true);",
															"} catch (error) {",
															"    CouldVlanInterfaceConfigurationBeShortened(false);",
															"}",
															"pm.variables.set(\"schema\", VLAN_INTERFACE_CONFIGURATION_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldVlanInterfaceConfigurationBeShortened(success) {",
															"    pm.test(\"CouldVlanInterfaceConfigurationBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "StatusCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------Checking VlanInterfaceStatus for Completeness------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* StatusCompleteness",
															"* ",
															"* This Request is for validating VlanInterface Status Objects against definition ",
															"* VlanInterface_1.0.0-tsp.200731.1235",
															"* as it can be found on https://github.com/openBackhaul/VlanInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Status class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"status\";          // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let VLAN_INTERFACE_STATUS_SCHEMA = {",
															"\t\"type\": \"object\",",
															"\t\"properties\": {",
															"\t\t\"interface-status\": {",
															"\t\t\t\"enum\": [",
															"                    \"vlan-interface-1-0:INTERFACE_STATUS_TYPE_UP\",",
															"                    \"vlan-interface-1-0:INTERFACE_STATUS_TYPE_DOWN\",",
															"                    \"vlan-interface-1-0:INTERFACE_STATUS_TYPE_TESTING\",",
															"                    \"vlan-interface-1-0:INTERFACE_STATUS_TYPE_UNKNOWN\",",
															"                    \"vlan-interface-1-0:INTERFACE_STATUS_TYPE_DORMANT\",",
															"                    \"vlan-interface-1-0:INTERFACE_STATUS_TYPE_NOT_PRESENT\",",
															"                    \"vlan-interface-1-0:INTERFACE_STATUS_TYPE_LOWER_LAYER_DOWN\",",
															"                    \"vlan-interface-1-0:INTERFACE_STATUS_TYPE_ADMIN_DOWN\",",
															"                    \"vlan-interface-1-0:INTERFACE_STATUS_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t]",
															"\t\t},",
															"\t\t\"statistics-is-up\": \t\t\t{ \"type\": \"boolean\"\t},",
															"\t\t\"timestamp\": \t\t\t\t\t{ \"type\": \"string\"\t},",
															"\t\t\"total-bytes-input\": \t\t\t{ \"type\": \"string\"\t},",
															"\t\t\"total-frames-input\": \t\t\t{ \"type\": \"string\"\t},",
															"\t\t\"total-bytes-output\": \t\t\t{ \"type\": \"string\"\t},",
															"\t\t\"total-frames-output\": \t\t\t{ \"type\": \"string\"\t}",
															"\t},",
															"\t\"required\": [ \t\"interface-status\", ",
															"\t\t\t\t\t\"statistics-is-up\",",
															"\t\t\t\t\t\"timestamp\",",
															"\t\t\t\t\t\"total-bytes-input\",",
															"\t\t\t\t\t\"total-frames-input\",",
															"\t\t\t\t\t\"total-bytes-output\",",
															"\t\t\t\t\t\"total-frames-output\"",
															"\t  \t\t\t]",
															"};",
															"",
															"pm.variables.set(\"schema\", VLAN_INTERFACE_STATUS_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NetworkRestoration",
									"item": [
										{
											"name": "SettingOriginalInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------------Restoring the Original Interface Configuration Again-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting the Original Interface Configuration Again",
															"* ",
															"* This Request is for restoring the configuration from before the interface validation ",
															"* on the device.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"        ",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration",
															"                                                   );",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    completeClassName = moduleUnderTest + \":\" + technologyUnderTest + \"-configuration\";",
															"    configuration = AddHeadlineToDataObject(configuration, completeClassName);",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched back on original values.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched back on original values.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointVlanInterfaceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------ReversalPoint of VlanInterface Validation for Completeness---------------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointVlanInterfaceCompleteness\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointVlanInterfaceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-----------------------Terminating VlanInterfaceCompleteness--------------------------\");",
															"/****************************************************************************************",
															" * ",
															" * ExitPoint",
															" * ",
															" * This Request is for clearing the Collection variables and terminating the TestCase",
															" * ",
															" ****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															" * Required Input Parameters",
															" ****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Clearing all Collection Variables for Terminating the TestCase",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Setting up Local Variables and Preparing the Request",
															" ****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({",
															"        key: \"Accept\",",
															"        value: \"application/json\"",
															"    });",
															"} catch (error) {}",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function() {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function() {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "VlanInterfaceConfiguration",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n\\n============================== VlanInterfaceConfiguration.1 ===============================\");",
															"/****************************************************************************************",
															"* ",
															"* RequestCollection for validating Configuration of VlanInterface Objects against definition ",
															"* ",
															"* VlanInterface_2.0.0-tsp.200121.1830",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/vlanInterface/tree/tsp",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Manual Definition of the Mode of Operation of this TestCase",
															"* ",
															"* It is recommended to apply this TestCase on devices on the local (not remote) site",
															"* of the microwave connection, otherwise the management connection might break and ",
															"* configurations, which are done during the validation, cannot be reversed.",
															"* ",
															"****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"one\"; // \"none\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"vlan-interface-1-0:vlan-interface-pac\";       // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"CONFIGURATION_VALIDATION_RESULTS = {};",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"pm.collectionVariables.set(\"configurationValidationResults\", CONFIGURATION_VALIDATION_RESULTS);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function () {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function () {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DefiningDummyValuesAndEvaluations()",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n----------Defining DummyValues and Evaluation Criteria in Configuration Validation--------\");",
															"/****************************************************************************************",
															"* ",
															"* Definition of DefiningDummyValuesAndEvaluations()",
															"*  ",
															"* Functions for Defining DummyValues and Evaluation Criteria in all Configuration Validations.",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Provided Collection Variables ",
															"****************************************************************************************/",
															"class Attribute {",
															"    constructor(CreatingDummyValueAsaString,",
															"        EvaluatingFeatureSupportAsaString,",
															"        defaultValueForStandardEvaluation,",
															"        EvaluatingResultAsaString) {",
															"        this.CreatingDummyValueAsaString = CreatingDummyValueAsaString;",
															"        this.EvaluatingFeatureSupportAsaString = EvaluatingFeatureSupportAsaString;",
															"        this.defaultValueForStandardEvaluation = defaultValueForStandardEvaluation;",
															"        this.EvaluatingResultAsaString = EvaluatingResultAsaString;",
															"    }",
															"}",
															"var attributes = [];",
															"",
															"var CreatingDummyValueAsaString;",
															"var EvaluatingFeatureSupportAsaString;",
															"var defaultValueForStandardEvaluation;",
															"var EvaluatingResultAsaString;",
															"var newAttribute;",
															"",
															"// interface-name (string)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----------------------------Checking Configuration of interface-name----------------------------\");",
															"",
															"        // Individual Values Definition ",
															"        var dummyValue = \"Dummy \" + String(Math.floor(Math.random() * 999));",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"interface-name\";",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"Interface name not yet defined.\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// sub-layer-protocol-name (enum)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of sub-layer-protocol-name------------------------\");",
															"",
															"        try {",
															"            let supportedSubLayerProtocolNameList = capability[\"supported-sub-layer-protocol-name-list\"];",
															"            let subLayerProtocolName = configuration[\"sub-layer-protocol-name\"];",
															"            let subLayerProtocolNameIndex = supportedSubLayerProtocolNameList.indexOf(subLayerProtocolName);",
															"            let potentialDummyValues = supportedSubLayerProtocolNameList;",
															"            if (subLayerProtocolNameIndex >= 0) {",
															"                potentialDummyValues.splice(subLayerProtocolNameIndex, 1);",
															"            }",
															"            if (potentialDummyValues.length === 0) {",
															"                potentialDummyValues = [\"vlan-interface-1-0:SUB_LAYER_PROTOCOL_NAME_TYPE_EDGE_RELAY_COMPONENT\"];",
															"            }",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"            CouldDummyBeCreated(supportedSubLayerProtocolNameList, subLayerProtocolName, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"sub-layer-protocol-name\";",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(supportedSubLayerProtocolNameList, subLayerProtocolName, dummyValue) {",
															"            pm.test(\"CouldDummyBeCreated\", function () {",
															"                pm.expect(supportedSubLayerProtocolNameList).to.be.an(\"array\");",
															"                pm.expect(subLayerProtocolName).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var supportedSubLayerProtocolNameTypes = [];",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        try {",
															"            supportedSubLayerProtocolNameTypes = capability[\"supported-sub-layer-protocol-name-list\"];",
															"            if ((supportedSubLayerProtocolNameTypes.length === 1) &&",
															"                (supportedSubLayerProtocolNameTypes[0] === \"vlan-interface-1-0:SUB_LAYER_PROTOCOL_NAME_TYPE_NOT_YET_DEFINED\")) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            }",
															"            CouldFeaturesBeEvaluated(supportedSubLayerProtocolNameTypes, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        } catch (error) {",
															"            CouldFeaturesBeEvaluated(supportedSubLayerProtocolNameTypes, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldFeaturesBeEvaluated(supportedSubLayerProtocolNameTypes, capabilitiesAreIndicatingThatFeatureNotSupported) {",
															"            pm.test(\"CouldSupportedSubLayerProtocolNameBeRead\", function () {",
															"                pm.expect(supportedSubLayerProtocolNameTypes).to.be.an(\"array\");",
															"                pm.expect(supportedSubLayerProtocolNameTypes.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldCapabilitiesAreIndicatingThatFeatureNotSupportedBeCalculated\", function () {",
															"                pm.expect(capabilitiesAreIndicatingThatFeatureNotSupported).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"vlan-interface-1-0:SUB_LAYER_PROTOCOL_NAME_TYPE_NOT_YET_DEFINED\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// interface-kind (enum)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n---------------------------Checking Configuration of interface-kind-----------------------------\");",
															"",
															"        try {",
															"            let supportedInterfaceKindList = capability[\"supported-interface-kind-list\"];",
															"            let interfaceKind = configuration[\"interface-kind\"];",
															"            let interfaceKindIndex = supportedInterfaceKindList.indexOf(interfaceKind);",
															"            let potentialDummyValues = supportedInterfaceKindList;",
															"            if (interfaceKindIndex >= 0) {",
															"                potentialDummyValues.splice(interfaceKindIndex, 1);",
															"            }",
															"            if (potentialDummyValues.length === 0) {",
															"                potentialDummyValues = [\"vlan-interface-1-0:INTERFACE_KIND_TYPE_VIRTUAL_INSTANCE_PORT\"];",
															"            }",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"            CouldDummyBeCreated(supportedInterfaceKindList, interfaceKind, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"interface-kind\";",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(supportedInterfaceKindList, interfaceKind, dummyValue) {",
															"            pm.test(\"CouldDummyBeCreated\", function () {",
															"                pm.expect(supportedInterfaceKindList).to.be.an(\"array\");",
															"                pm.expect(interfaceKind).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var supportedInterfaceKindTypes = [];",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        try {",
															"            supportedInterfaceKindTypes = capability[\"supported-interface-kind-list\"];",
															"            if ((supportedInterfaceKindTypes.length === 1) &&",
															"                (supportedInterfaceKindTypes[0] === \"vlan-interface-1-0:INTERFACE_KIND_TYPE_NOT_YET_DEFINED\")) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            }",
															"            CouldFeaturesBeEvaluated(supportedInterfaceKindTypes, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        } catch (error) {",
															"            CouldFeaturesBeEvaluated(supportedInterfaceKindTypes, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldFeaturesBeEvaluated(supportedInterfaceKindTypes, capabilitiesAreIndicatingThatFeatureNotSupported) {",
															"            pm.test(\"CouldSupportedInterfaceKindBeRead\", function () {",
															"                pm.expect(supportedInterfaceKindTypes).to.be.an(\"array\");",
															"                pm.expect(supportedInterfaceKindTypes.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldCapabilitiesAreIndicatingThatFeatureNotSupportedBeCalculated\", function () {",
															"                pm.expect(capabilitiesAreIndicatingThatFeatureNotSupported).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"vlan-interface-1-0:INTERFACE_KIND_TYPE_NOT_YET_DEFINED\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// default-vlan-id (string)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n---------------------------Checking Configuration of default-vlan-id----------------------------\");",
															"",
															"        // Individual Values Definition ",
															"        var dummyValue = String( (Math.floor(Math.random() * 9) + 1) * 111 );",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"default-vlan-id\";",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"-1\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// default-priority (number)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n---------------------------Checking Configuration of default-priority---------------------------\");",
															"        ",
															"        try {",
															"            var configuredDefaultPriority = configuration[\"default-priority\"];",
															"            var dummyValue = ( ( configuredDefaultPriority + 1 + Math.floor(Math.random() * 7) )  % 8 ) ;",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"default-priority\";",
															"",
															"        // Self Testing Function",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// ingress-tag-filtering (enum)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of ingress-tag-filtering--------------------------\");",
															"",
															"        try {",
															"           let ingressTagFiltering =  [",
															"                //\"vlan-interface-1-0:INGRESS_TAG_FILTERING_TYPE_UNTAGGED_AND_PRIORITY_FRAMES_ONLY\",",
															"                //\"vlan-interface-1-0:INGRESS_TAG_FILTERING_TYPE_VLAN_TAGGED_FRAMES_ONLY\",",
															"                \"vlan-interface-1-0:INGRESS_TAG_FILTERING_TYPE_ALL_FRAMES\",",
															"\t\t\t];",
															"",
															"            let configuredIngressTagFiltering = configuration[\"ingress-tag-filtering\"];",
															"            let configuredIngressTagFilteringIndex = ingressTagFiltering.indexOf(configuredIngressTagFiltering);",
															"            let potentialDummyValues = ingressTagFiltering;",
															"            if (configuredIngressTagFilteringIndex >= 0) {",
															"                potentialDummyValues.splice(configuredIngressTagFilteringIndex, 1);",
															"            }",
															"        ",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"            CouldDummyBeCreated(ingressTagFiltering, configuredIngressTagFiltering, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"ingress-tag-filtering\";",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(ingressTagFiltering, configuredIngressTagFiltering, dummyValue) {",
															"            pm.test(\"CouldDummyBeCreated\", function () {",
															"                pm.expect(ingressTagFiltering).to.be.an(\"array\");",
															"                pm.expect(configuredIngressTagFiltering).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        try { ",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"configuring-ingress-tag-filtering-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"vlan-interface-1-0:INGRESS_TAG_FILTERING_TYPE_NOT_YET_DEFINED\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// ingress-vlan-id-filtering-is-on (boolean)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------------------Checking Configuration of ingress-vlan-id-filtering-is-on-------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"ingress-vlan-id-filtering-is-on\";",
															"",
															"        // Individual Values Definition",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        try {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"ingress-vlan-id-filtering-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// pcp-bits-interpretation-kind (enum)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------------------Checking Configuration of pcp-bits-interpretation-kind ---------------------\");",
															"",
															"        try {",
															"            let supportedPcpBitsInterpretationKindList = capability[\"available-pcp-bits-interpretation-kind-list\"];",
															"            let pcpBitsInterpretationKind = configuration[\"pcp-bits-interpretation-kind\"];",
															"            let pcpBitsInterpretationKindIndex = supportedPcpBitsInterpretationKindList.indexOf(pcpBitsInterpretationKind);",
															"            let potentialDummyValues = supportedPcpBitsInterpretationKindList;",
															"            if (pcpBitsInterpretationKindIndex >= 0) {",
															"                potentialDummyValues.splice(pcpBitsInterpretationKindIndex, 1);",
															"            }",
															"            if (potentialDummyValues.length === 0) {",
															"                potentialDummyValues = [\"vlan-interface-1-0:PCP_BITS_INTERPRETATION_KIND_TYPE_5P3D\"];",
															"            }",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"",
															"            CouldDummyBeCreated(supportedPcpBitsInterpretationKindList, pcpBitsInterpretationKind, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"pcp-bits-interpretation-kind\";",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(supportedPcpBitsInterpretationKindList, pcpBitsInterpretationKind, dummyValue) {",
															"            pm.test(\"CouldDummyBeCreated\", function () {",
															"                pm.expect(supportedPcpBitsInterpretationKindList).to.be.an(\"array\");",
															"                pm.expect(pcpBitsInterpretationKind).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var supportedPcpBitsInterpretationKindTypes = [];",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        try {",
															"            supportedPcpBitsInterpretationKindTypes = capability[\"available-pcp-bits-interpretation-kind-list\"];",
															"            if ((supportedPcpBitsInterpretationKindTypes.length === 1) &&",
															"                (supportedPcpBitsInterpretationKindTypes[0] === \"vlan-interface-1-0:PCP_BITS_INTERPRETATION_KIND_TYPE_NOT_YET_DEFINED\")) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            }",
															"            CouldFeaturesBeEvaluated(supportedPcpBitsInterpretationKindType, ",
															"                                        capabilitiesAreIndicatingThatFeatureNotSupported",
															"            );",
															"        } catch (error) {",
															"            CouldFeaturesBeEvaluated(supportedPcpBitsInterpretationKindTypes, ",
															"                                        capabilitiesAreIndicatingThatFeatureNotSupported",
															"            );",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldFeaturesBeEvaluated(supportedPcpBitsInterpretationKindTypes, capabilitiesAreIndicatingThatFeatureNotSupported) {",
															"            pm.test(\"CouldPcpBitsInterpretationKindBeRead\", function () {",
															"                pm.expect(supportedPcpBitsInterpretationKindTypes).to.be.an(\"array\");",
															"                pm.expect(supportedPcpBitsInterpretationKindTypes.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldCapabilitiesAreIndicatingThatFeatureNotSupportedBeCalculated\", function () {",
															"                pm.expect(capabilitiesAreIndicatingThatFeatureNotSupported).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"vlan-interface-1-0:PCP_BITS_INTERPRETATION_KIND_TYPE_NOT_YET_DEFINED\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// pcp-bit-to-priority-mapping-list/associated-priority-value (number) ",
															"// it contains key: to-be-decoded-pcp-bits-value (number)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------Checking Configuration of pcp-bit-to-priority-mapping-list/associated-priority-value------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"pcp-bit-to-priority-mapping-list\";",
															"        var DATATYPE_INDEX_UNDER_TEST = 0;",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"to-be-decoded-pcp-bits-value\";",
															"        var ATTRIBUTE_UNDER_TEST = \"associated-priority-value\";",
															"",
															"        try {",
															"            var dummyValue;",
															"            let configuringPcpBitsDecodingIsAvail = capability[\"configuring-pcp-bits-decoding-is-avail\"];",
															"            if (configuringPcpBitsDecodingIsAvail) {",
															"                let configuredValue;",
															"                configuredValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"                dummyValue = ( ( configuredValue + 1 + Math.floor(Math.random() * 7) )  % 8 ) ;",
															"",
															"                keysOfDatatypeInstanceUnderTest[0].value",
															"                  = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[0].key];",
															"            } else {",
															"                dummyValue = -1;",
															"            }",
															"           ",
															"            CouldDummyValueBeDefined(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeDefined();",
															"        }",
															"",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"",
															"        // Self Testing Function",
															"        function CouldDummyValueBeDefined(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"    ",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        try {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"configuring-pcp-bits-decoding-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// pcp-bit-to-priority-mapping-list/associated-drop-eligibility (boolean)",
															"// it contains key: to-be-decoded-pcp-bits-value (number)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----Checking Configuration of pcp-bit-to-priority-mapping-list/associated-drop-eligibility-----\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"pcp-bit-to-priority-mapping-list\";",
															"        var DATATYPE_INDEX_UNDER_TEST = 0;",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"to-be-decoded-pcp-bits-value\";",
															"        var ATTRIBUTE_UNDER_TEST = \"associated-drop-eligibility\";",
															"",
															"        try {",
															"            var dummyValue;",
															"            let configuringPcpBitsDecodingIsAvail = capability[\"configuring-pcp-bits-decoding-is-avail\"];",
															"            if (configuringPcpBitsDecodingIsAvail) {",
															"                var configuredValue;",
															"                configuredValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"",
															"                dummyValue = !configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"",
															"                keysOfDatatypeInstanceUnderTest[0].value",
															"                  = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[0].key];",
															"            } else {",
															"                dummyValue = false;",
															"            }",
															"           ",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"",
															"        // Self Testing Function",
															"        function CouldCurrentConfigurationValuesBeRead(configuredValue) {",
															"            pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () {",
															"                pm.expect(configuredValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"    ",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        try {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"configuring-pcp-bits-decoding-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// pcp-bits-encoding-mapping-list/associated-pcp-bits-value (number)",
															"// it contains 2 keys: to-be-encoded-priority-value (number) and to-be-encoded-drop-eligibility (boolean)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------Checking Configuration of pcp-bits-encoding-mapping-list/associated-pcp-bits-value-------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"pcp-bits-encoding-mapping-list\";",
															"        var DATATYPE_INDEX_UNDER_TEST = 0;",
															"        var keysOfDatatypeInstanceUnderTest = [{}, {}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"to-be-encoded-priority-value\";",
															"        keysOfDatatypeInstanceUnderTest[1].key = \"to-be-encoded-drop-eligibility\";",
															"        var ATTRIBUTE_UNDER_TEST = \"associated-pcp-bits-value\";",
															"",
															"        try {",
															"            var dummyValue;",
															"            let configuringPcpBitsEncodingIsAvail = capability[\"configuring-pcp-bits-encoding-is-avail\"];",
															"            if (configuringPcpBitsEncodingIsAvail) {",
															"                var configuredValue;",
															"                configuredValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"",
															"                dummyValue = ( ( configuredValue + 1 + Math.floor(Math.random() * 7) )  % 8 ) ;",
															"",
															"                keysOfDatatypeInstanceUnderTest[0].value",
															"                  = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[0].key];",
															"                keysOfDatatypeInstanceUnderTest[1].value",
															"                  = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[1].key];",
															"            } else {",
															"                dummyValue = -1;",
															"            }",
															"           ",
															"            CouldDummyValueBeDefined(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeDefined();",
															"        }",
															"",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"",
															"        // Self Testing Function",
															"        function CouldDummyValueBeDefined(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    ",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        try {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"configuring-pcp-bits-encoding-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// drop-eligible-indicator-is-on (boolean)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------------------Checking Configuration of drop-eligible-indicator-is-on---------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"drop-eligible-indicator-is-on\";",
															"",
															"        // Individual Values Definition",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        try {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"drop-eligible-indicator-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute); ",
															"",
															"// drop-eligible-encoding-is-required (boolean)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------Checking Configuration of drop-eligible-encoding-is-required-----------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"drop-eligible-encoding-is-required\";",
															"",
															"        // Individual Values Definition ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        try {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"drop-eligible-indicator-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute); ",
															"",
															"// received-priority-overwriting-is-on (boolean)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------Checking Configuration of received-priority-overwriting-is-on-----------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"received-priority-overwriting-is-on\";",
															"",
															"        // Individual Values Definition",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        try {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"received-priority-overwriting-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// received-priority-overwriting-list/new-priority-value (number)",
															"// key: to-be-overwritten-priority-value (number)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n---------Checking Configuration of received-priority-overwriting-list/new-priority-value--------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"received-priority-overwriting-list\";",
															"        var DATATYPE_INDEX_UNDER_TEST = 0;",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"to-be-overwritten-priority-value\";",
															"        var ATTRIBUTE_UNDER_TEST = \"new-priority-value\";",
															"",
															"        try {",
															"            var dummyValue;",
															"            let receivedPriorityOverwritingIsAvail = capability[\"received-priority-overwriting-is-avail\"];",
															"            if (receivedPriorityOverwritingIsAvail) {",
															"                let configuredValue;",
															"                configuredValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"",
															"                let numberOfAvailablePriorities;",
															"                numberOfAvailablePriorities  = capability[\"number-of-available-priorities\"];",
															"   ",
															"                dummyValue = ( ( configuredValue + 1 + Math.floor(Math.random() * (numberOfAvailablePriorities-2)) )  ",
															"                                % numberOfAvailablePriorities ) ;",
															"",
															"                keysOfDatatypeInstanceUnderTest[0].value",
															"                  = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[0].key];",
															"            } else {",
															"                dummyValue = -1;",
															"            }",
															"           ",
															"            CouldDummyValueBeDefined(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeDefined();",
															"        }",
															"",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"",
															"        // Self Testing Function",
															"        function CouldDummyValueBeDefined(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"    ",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        try {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"received-priority-overwriting-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// vlan-id-translation-is-on (boolean)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of vlan-id-translation-is-on----------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"vlan-id-translation-is-on\";",
															"",
															"        // Individual Values Definition",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        try {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"vlan-id-translation-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// external-to-internal-vlan-id-mapping-list/internal-vlan-id (number)",
															"// key: external-vlan-id (number)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------Checking Configuration of external-to-internal-vlan-id-mapping-list/internal-vlan-id-----\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"external-to-internal-vlan-id-mapping-list\";",
															"        var DATATYPE_INDEX_UNDER_TEST = 0;",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"external-vlan-id\";",
															"        var ATTRIBUTE_UNDER_TEST = \"internal-vlan-id\";",
															"",
															"        try {",
															"            var dummyValue;",
															"            let vlanIdTranslationIsAvail = capability[\"vlan-id-translation-is-avail\"];",
															"            if (vlanIdTranslationIsAvail) {",
															"                dummyValue = String( (Math.floor(Math.random() * 9) + 1) * 111 );",
															"",
															"                keysOfDatatypeInstanceUnderTest[0].value",
															"                  = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[0].key];",
															"            } else {",
															"                dummyValue = -1;",
															"            }",
															"           ",
															"            CouldDummyValueBeDefined(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeDefined();",
															"        }",
															"",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"",
															"        // Self Testing Function",
															"        function CouldDummyValueBeDefined(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        try {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"vlan-id-translation-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// egress-vlan-id-translation-is-on (boolean)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------------------Checking Configuration of egress-vlan-id-translation-is-on------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"egress-vlan-id-translation-is-on\";",
															"",
															"        // Individual Values Definition",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        try {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"egress-vlan-id-translation-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// internal-to-egress-vlan-id-mapping-list/egress-vlan-id (number)",
															"// key: internal-vlan-id (number)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------Checking Configuration of internal-to-egress-vlan-id-mapping-list/egress-vlan-id--------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"internal-to-egress-vlan-id-mapping-list\";",
															"        var DATATYPE_INDEX_UNDER_TEST = 0;",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"internal-vlan-id\";",
															"        var ATTRIBUTE_UNDER_TEST = \"egress-vlan-id\";",
															"",
															"        try {",
															"            var dummyValue;",
															"            let egressVlanIdTranslationIsAvail = capability[\"egress-vlan-id-translation-is-avail\"];",
															"            if (egressVlanIdTranslationIsAvail) {",
															"                dummyValue = String( (Math.floor(Math.random() * 9) + 1) * 111 );",
															"",
															"                keysOfDatatypeInstanceUnderTest[0].value",
															"                  = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[0].key];",
															"            } else {",
															"                dummyValue = -1;",
															"            }",
															"           ",
															"            CouldDummyValueBeDefined(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeDefined();",
															"        }",
															"",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"",
															"        // Self Testing Function",
															"        function CouldDummyValueBeDefined(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"    ",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        try {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"egress-vlan-id-translation-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// forwarded-protocol-vlan-id-grouping-list",
															"// key: forwarded-protocol-group-id (number), value: forwarded-vlan-id-list (list of strings)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n---Checking Configuration of forwarded-protocol-vlan-id-grouping-list/forwarded-vlan-id-list----\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"forwarded-protocol-vlan-id-grouping-list\";",
															"        var DATATYPE_INDEX_UNDER_TEST = 0;",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"forwarded-protocol-group-id\";",
															"        var ATTRIBUTE_UNDER_TEST = \"forwarded-vlan-id-list\";",
															"",
															"        try {",
															"            var dummyValue;",
															"            let portAndProtocolBasedVlanIsAvail = capability[\"port-and-protocol-based-vlan-is-avail\"];",
															"            if (portAndProtocolBasedVlanIsAvail) {",
															"                var configuredValue;",
															"                configuredValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"",
															"            dummyValue = [  ( (Math.floor(Math.random() * 9) + 1) * 111 ).toString(), ",
															"                            ( (Math.floor(Math.random() * 9) + 1) * 111 ).toString() ",
															"            ];",
															"",
															"                keysOfDatatypeInstanceUnderTest[0].value",
															"                  = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[0].key];",
															"            } else {",
															"                dummyValue = [-1];",
															"            }",
															"           ",
															"            CouldDummyValueBeDefined(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeDefined();",
															"        }",
															"",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"",
															"        // Self Testing Function",
															"        function CouldDummyValueBeDefined(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"array\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        try {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"port-and-protocol-based-vlan-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = [\"-1\"];",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// service-access-priority-tagging-is-on (boolean)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------Checking Configuration of service-access-priority-tagging-is-on----------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"service-access-priority-tagging-is-on\";",
															"",
															"        // Individual Values Definition",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        try {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"service-access-priority-tagging-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// service-access-priority-mapping-list/s-vlan-pcp-bits-value (number)",
															"// key: c-vlan-priority-value (number)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------Checking Configuration of service-access-priority-mapping-list/s-vlan-pcp-bits-value-----\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"service-access-priority-mapping-list\";",
															"        var DATATYPE_INDEX_UNDER_TEST = 0;",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"c-vlan-priority-value\";",
															"        var ATTRIBUTE_UNDER_TEST = \"s-vlan-pcp-bits-value\";",
															"",
															"        try {",
															"            var dummyValue;",
															"            let configuringServiceAccessPriorityMappingIsAvail ",
															"                                                    = capability[\"configuring-service-access-priority-mapping-is-avail\"];",
															"            if (configuringServiceAccessPriorityMappingIsAvail) {",
															"                var configuredValue;",
															"                configuredValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"",
															"                dummyValue = ( ( configuredValue + 1 + Math.floor(Math.random() * 7) )  % 8 ) ;",
															"",
															"                keysOfDatatypeInstanceUnderTest[0].value",
															"                  = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[0].key];",
															"            } else {",
															"                dummyValue = -1;",
															"            }",
															"           ",
															"            CouldDummyValueBeDefined(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeDefined();",
															"        }",
															"",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"",
															"        // Self Testing Function",
															"        function CouldDummyValueBeDefined(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"    ",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        try {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"configuring-service-access-priority-mapping-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// priority-to-traffic-class-mapping-list/traffic-class-value (number)",
															"// key: priority-value (number)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------Checking Configuration of priority-to-traffic-class-mapping-list/traffic-class-value------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"priority-to-traffic-class-mapping-list\";",
															"        var DATATYPE_INDEX_UNDER_TEST = 0;",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"priority-value\";",
															"        var ATTRIBUTE_UNDER_TEST = \"traffic-class-value\";",
															"",
															"        var dummyValue;",
															"        try {",
															"            let configuredValue;",
															"            configuredValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"            dummyValue = ( ( configuredValue + 1 + Math.floor(Math.random() * 7) )  % 8 ) ;",
															"",
															"            keysOfDatatypeInstanceUnderTest[0].value",
															"                = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[0].key];",
															"        } catch (error) {",
															"            dummyValue = -1;",
															"        }",
															"",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"",
															"        // Self Testing Function",
															"",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// restricted-automated-vlan-registration-is-on (boolean)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------------Checking Configuration of restricted-automated-vlan-registration-is-on------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"restricted-automated-vlan-registration-is-on\";",
															"",
															"        // Individual Values Definition",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        try {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = ",
															"                                                        !capability[\"restricted-automated-vlan-registration-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// admin-point-to-point (enum)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of admin-point-to-point-------------------------\");",
															"",
															"        try {",
															"            let adminPointToPoint =  [",
															"\t\t\t\t\"vlan-interface-1-0:ADMIN_POINT_TO_POINT_TYPE_FORCE_TRUE\",",
															"\t\t\t\t\"vlan-interface-1-0:ADMIN_POINT_TO_POINT_TYPE_FORCE_FALSE\",",
															"\t\t\t\t\"vlan-interface-1-0:ADMIN_POINT_TO_POINT_TYPE_AUTO\",",
															"\t\t\t\t\"vlan-interface-1-0:ADMIN_POINT_TO_POINT_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t];",
															"",
															"            let configuredAdminPointToPoint = configuration[\"admin-point-to-point\"];",
															"            let configuredAdminPointToPointIndex = adminPointToPoint.indexOf(configuredAdminPointToPoint);",
															"            let potentialDummyValues = adminPointToPoint;",
															"            if (configuredAdminPointToPointIndex >= 0) {",
															"                potentialDummyValues.splice(configuredAdminPointToPointIndex, 1);",
															"            }",
															"        ",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"            CouldDummyBeCreated(adminPointToPoint, configuredAdminPointToPoint, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"admin-point-to-point\";",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(adminPointToPoint, configuredAdminPointToPoint, dummyValue) {",
															"            pm.test(\"CouldDummyBeCreated\", function () {",
															"                pm.expect(adminPointToPoint).to.be.an(\"array\");",
															"                pm.expect(configuredAdminPointToPoint).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"            });",
															"        }",
															"    };",
															"",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var configuredAdminPointToPoint = \"\";",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        try {",
															"            configuredAdminPointToPoint = configuration[\"admin-point-to-point\"];",
															"            if (configuredAdminPointToPoint === \"vlan-interface-1-0:ADMIN_POINT_TO_POINT_TYPE_NOT_YET_DEFINED\") {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            }",
															"            CouldFeaturesBeEvaluated(configuredAdminPointToPoint, ",
															"                                        capabilitiesAreIndicatingThatFeatureNotSupported",
															"            );",
															"        } catch (error) {",
															"            CouldFeaturesBeEvaluated();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldFeaturesBeEvaluated(configuredAdminPointToPoint, ",
															"                                        capabilitiesAreIndicatingThatFeatureNotSupported) {",
															"            pm.test(\"CouldFeaturesBeEvaluated\", function () {",
															"                pm.expect(configuredAdminPointToPoint).to.be.a(\"string\");",
															"                pm.expect(capabilitiesAreIndicatingThatFeatureNotSupported).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    ",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"vlan-interface-1-0:ADMIN_POINT_TO_POINT_TYPE_NOT_YET_DEFINED\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"// statistics-is-on (boolean)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n---------------------------Checking Configuration of statistics-is-on---------------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"statistics-is-on\";",
															"",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        try {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"statistics-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"    );",
															"}   attributes.push(newAttribute);",
															"",
															"pm.collectionVariables.set(\"attributes\", attributes);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function ConvertingThisFunctionToString(functionToBeConverted) {",
															"    let functionAsAString = String(functionToBeConverted);",
															"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
															"    return functionAsAString.slice(indexOfFirstCurly);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointVlanInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n----------------EntryPoint of VlanInterface Validation of Configuration-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the VlanInterfaceConfiguration TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].vlanInterfaceList.length;",
															"    var maximumIndexOfLtpUnderTest;",
															"    ",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.min( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointVlanInterfaceConfiguration\");",
															"        console.log(\"Proceeding with terminating VlanInterface validation for Completeness.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Provided Collection Variables ",
															"****************************************************************************************/",
															"INITIAL_INDEX_OF_ATTRIBUTE_UNDER_TEST = 0;",
															"",
															"pm.collectionVariables.set(\"indexOfAttributeUnderTest\", INITIAL_INDEX_OF_ATTRIBUTE_UNDER_TEST);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "CollectionInformationLoading",
									"item": [
										{
											"name": "UploadingInterfaceCapability",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Capabilities-------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the Interface Capabilities",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Configuration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Configuration",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceStatus",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n------------------------------Uploading Interface Status----------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Status",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"status\";          // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Displaying the Collection Variables right before starting the validation",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NetworkPreparation",
									"item": [],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "AttributeConfiguration",
									"item": [
										{
											"name": "EntryPointVlanInterfaceAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the AttributeConfiguration Tests ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var attributes = pm.collectionVariables.get(\"attributes\");",
															"    var indexOfAttributeUnderTest = pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
															"    ",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    ",
															"    CouldTheInputBeLoaded(attributes, indexOfAttributeUnderTest, dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"        ",
															"    if ( indexOfAttributeUnderTest < attributes.length ) {",
															"        postman.setNextRequest();",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointVlanInterfaceAttributeConfiguration\");",
															"    }",
															"        ",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(attributes, indexOfAttributeUnderTest, dummyUri) {",
															"    pm.test(\"CouldTheAttributesBeLoaded\", function () {",
															"        pm.expect(attributes).to.be.an(\"array\");",
															"    });",
															"    pm.test(\"CouldIndexOfAttributeUnderTestBeLoaded\", function () {",
															"        pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"CouldTheDummyUriBeLoaded\", function () {",
															"        pm.expect(dummyUri).to.be.a(\"string\");",
															"        pm.expect(dummyUri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Writing",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Retrieving DummyCode",
															"****************************************************************************************/",
															"try {",
															"    var dummyCode = JSON.parse(pm.response.code);",
															"    var dummyErrorMessage = \"\";",
															"    if ( Math.floor(dummyCode/100) !== 2 ) {",
															"        var dummyErrorMessage = JSON.parse(pm.response.stream).errors.error[0][\"error-message\"];",
															"    }",
															"    CouldResponseBeRetrieved(dummyCode, dummyErrorMessage);",
															"} catch (error) {",
															"    CouldResponseBeRetrieved();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting Local Variables",
															"****************************************************************************************/   ",
															"pm.variables.set(\"dummyCode\", dummyCode);",
															"pm.variables.set(\"dummyErrorMessage\", dummyErrorMessage);",
															"",
															"    ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldResponseBeRetrieved(responseCode, responseErrorMessage) {",
															"    pm.test(\"CouldTheDummyCodeOfPuttingBeReceived\", function () {",
															"        pm.expect(responseCode).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"CouldTheErrorMessagePuttingBeComposed\", function () {",
															"        pm.expect(responseErrorMessage).to.be.a(\"string\");",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Writing",
															"* ",
															"* This Request is for PUTting an attribute with the alternate value and",
															"* providing this value as dummyValueString to the local Variables.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfWritingAsaString = pm.environment.get(\"PreRequestOfWritingAsaString\");",
															"    eval(PreRequestOfWritingAsaString);",
															"    CouldPreRequestOfWritingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfWritingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfWritingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfWritingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Reading",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Reading",
															"* ",
															"* This Request is for GETting the value of the attributeUnderTest and providing it ",
															"* as ResultValue to the local Variables",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfReadingAsaString = pm.environment.get(\"PreRequestOfReadingAsaString\");",
															"    eval(PreRequestOfReadingAsaString);",
															"    CouldPreRequestOfReadingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfReadingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfReadingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfReadingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PostRequestOfReadingAsaString = pm.environment.get(\"PostRequestOfReadingAsaString\");",
															"    eval(PostRequestOfReadingAsaString);",
															"    CouldPostRequestOfReadingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPostRequestOfReadingBeExecuted();",
															"}",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPostRequestOfReadingBeExecuted(success) {",
															"    pm.test(\"CouldPostRequestOfReadingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Evaluating",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Evaluating",
															"* ",
															"* This Request compares resultValue with dummyValue.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfEvaluatingAsaString = pm.environment.get(\"PreRequestOfEvaluatingAsaString\");",
															"    var dummyCode = pm.variables.get(\"dummyCode\");",
															"    ",
															"    eval(PreRequestOfEvaluatingAsaString);",
															"",
															"    if ( Math.floor(dummyCode/100) !==2 ) {",
															"        postman.setNextRequest(\"ReversalPointVlanInterfaceAttributeConfiguration\");",
															"    }",
															"    ",
															"    CouldPreRequestOfEvaluatingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfEvaluatingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfEvaluatingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfEvaluatingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Restoring",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Restoring",
															"* ",
															"* This Request is for Restoring the initial value to the attributeUnderTest",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfRestoringAsaString = pm.environment.get(\"PreRequestOfRestoringAsaString\");",
															"    eval(PreRequestOfRestoringAsaString);",
															"    CouldPreRequestOfRestoringBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfRestoringBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfRestoringBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfRestoringBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Setting Local Variables",
															"****************************************************************************************/   ",
															"pm.variables.clear();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ReversalPointVlanInterfaceAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"        ",
															"    var indexOfAttributeUnderTest = pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
															"        ",
															"    CouldTheInputBeLoaded(dummyUri, indexOfAttributeUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextAttributeUnderTest = indexOfAttributeUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfAttributeUnderTest\", indexOfPotentialNextAttributeUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointVlanInterfaceAttributeConfiguration\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfAttributeUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointVlanInterfaceAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* ExitPoint",
															"* ",
															"* This Request is terminating the Test",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NetworkRestoration",
									"item": [
										{
											"name": "SettingOriginalInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------------Restoring the Original Interface Configuration Again-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting the Original Interface Configuration Again",
															"* ",
															"* This Request is for restoring the configuration from before the interface validation ",
															"* on the device.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"        ",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration",
															"                                                   );",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    completeClassName = moduleUnderTest + \":\" + technologyUnderTest + \"-configuration\";",
															"    configuration = AddHeadlineToDataObject(configuration, completeClassName);",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched back on original values.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched back on original values.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointVlanInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------ReversalPoint of VlanInterface Validation of Configuration-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Console.log of Validation Results",
															" ****************************************************************************************/",
															"let allConfigurationValidationResults = { \"allConfigurationValidationResults\" : configurationValidationResults };",
															"console.log(allConfigurationValidationResults);",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointVlanInterfaceConfiguration\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointVlanInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n------------------------Terminating VlanInterfaceConfiguration----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ExitPoint",
															"* ",
															"* This Request is for clearing the Collection variables and terminating the TestCase",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Clearing all Collection Variables for Terminating the TestCase",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "WireInterfaceValidation",
					"item": [
						{
							"name": "WireInterfaceCompleteness",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputCompletenessWire",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n\\n============================ WireInterfaceCompleteness.3 =============================\");",
															"/****************************************************************************************",
															"* ",
															"* RequestCollection for validating Completeness of WireInterface Objects against definition ",
															"* ",
															"*                   WireInterface_2.0.0-tsp.200123.1000",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/wireInterface/tree/tsp",
															"* ",
															"****************************************************************************************/",
															" ",
															"",
															"/****************************************************************************************",
															"* Manual Definition of the Mode of Operation of this TestCase",
															"****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"one\"; // \"one\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"wire-interface-2-0:wire-interface-pac\"; // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function() {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function() {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointWireInterfaceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------EntryPoint of WireInterface Validation for Completeness-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the WireInterfaceCompleteness TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].wireInterfaceList.length;",
															"    var maximumIndexOfLtpUnderTest;",
															"    ",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.min( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointWireInterfaceCompleteness\");",
															"        console.log(\"Proceeding with terminating WireInterface validation for Completeness.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceCapability",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Capabilities-------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the Interface Capabilities",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Configuration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Configuration",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Displaying the Collection Variables right before starting the validation",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "NetworkPreparation",
									"item": [
										{
											"name": "SwitchingInterfaceOn",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------------------------Switching Interface On--------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Switching Interface On to true for provoking entries in CurrentProblemList",
															"* ",
															"* This Request is for provoking an alarm to be able to validate completeness of the ",
															"* representation of currently active alarms.",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															" * Required Input Parameters",
															" ****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, configuration);",
															"} catch (error) {",
															"    CouldInputForSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Forming the Body",
															" ****************************************************************************************/",
															"try {",
															"    let requestBodyString = ('{ \"' + moduleUnderTest + ':interface-is-on\": true }');",
															"    var requestBody = JSON.parse(requestBodyString);",
															"    CouldRequestBodyBeFormed(requestBody);",
															"} catch (error) {",
															"    CouldRequestBodyBeFormed();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Setting up Local Variables and Calling for Preparation of the Request",
															" ****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"interface-is-on\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(requestBody);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, configuration) {",
															"    pm.test(\"CouldInputForSwitchingMonitoringOnBeLoaded\", function() {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyBeFormed(requestBody) {",
															"    pm.test(\"CouldRequestBodyBeFormed\", function() {",
															"        pm.expect(requestBody).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, ",
															"                                                keysOfDatatypeInstanceUnderTest,",
															"                                                attributeUnterTest, ",
															"                                                contentType,",
															"                                                filteredDepth, ",
															"                                                filteredFields, ",
															"                                                requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"            \"current-problems\", \"current-performance\",",
															"            \"historical-performances\"",
															"        ]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function() {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched on.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched on.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "SwitchingOnMonitoring",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------------Switching Monitoring On----------------------------------\");",
															"/****************************************************************************************",
															" * ",
															" * Switching Monitoring On",
															" * ",
															" * This Request is for activating collection of performance data on the device under",
															" * test, so the data can be retrieved during validating completeness of the implementation",
															" *  ",
															" ****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															" * Required Input Parameters",
															" ****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, capability, configuration);",
															"} catch (error) {",
															"    CouldInputForSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Forming the Body",
															" ****************************************************************************************/",
															"try {",
															"    let requestBodyString = ('{ \"' + moduleUnderTest + ':performance-monitoring-is-on\": true }');",
															"    var requestBody = JSON.parse(requestBodyString);",
															"    CouldRequestBodyBeFormed(requestBody);",
															"} catch (error) {",
															"    CouldRequestBodyBeFormed();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Setting up Local Variables and Calling for Preparation of the Request",
															" ****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(requestBody);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, capability, configuration) {",
															"    pm.test(\"CouldInputForSwitchingMonitoringOnBeLoaded\", function() {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(configuration).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyBeFormed(requestBody) {",
															"    pm.test(\"CouldRequestBodyBeFormed\", function() {",
															"        pm.expect(requestBody).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, ",
															"                                                keysOfDatatypeInstanceUnderTest,",
															"                                                attributeUnterTest, ",
															"                                                contentType,",
															"                                                filteredDepth, ",
															"                                                filteredFields, ",
															"                                                requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"            \"current-problems\", \"current-performance\",",
															"            \"historical-performances\"",
															"        ]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function() {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched on.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched on.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "ValidationRequests",
									"item": [
										{
											"name": "LtpCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n----------------------Checking WireInterfaceLtp for Completeness--------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* This Request is for validating WireInterfaceLtp objects against definition ",
															"*",
															"* ONF Core IM 1.4",
															"*",
															"* as it can be found on https://github.com/openBackhaul/core/tree/tsp",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"\";",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 5;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let WIRE_INTERFACE_LTP_SCHEMA = {",
															"    \"type\": \"object\",",
															"\t\"properties\": {",
															"        \"core-model-1-4:logical-termination-point\": {",
															"            \"type\": \"array\",",
															"            \"items\": {",
															"                \"type\": \"object\",",
															"                \"properties\": {",
															"                    \"physical-port-reference\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"string\",",
															"                        },",
															"                    },                    ",
															"                    \"connected-ltp\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                    \"supporting-pc\": \t\t\t\t            \t            { \"type\": \"string\" },",
															"                    \"client-ltp\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"string\",",
															"                        },",
															"                    },",
															"                    \"server-ltp\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"string\",",
															"                        },",
															"                    },",
															"                    \"ltp-direction\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                    \"transfer-capacity-pac\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"embedded-clock\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"run-mode\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"encompassed-clock\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },",
															"                                \"encapsulated-fc\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": {",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"uuid\": \t\t\t\t\t                    { \"type\": \"string\" },",
															"                                            \"local-id\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"lifecycle-state\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                                            \"layer-protocol-name\": \t\t\t                { \"type\": \"string\" },",
															"                                            \"administrative-state\":    \t\t\t\t\t    { \"type\": \"string\" },",
															"                                            \"name\": {",
															"                                                \"type\": \"array\",",
															"                                                \"items\": { ",
															"                                                    \"type\": \"object\",",
															"                                                    \"properties\": {",
															"                                                    },",
															"                                                },",
															"                                            },",
															"                                            \"fc-route\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"operational-state\":     \t\t\t\t\t    { \"type\": \"string\" },",
															"                                            \"administrative-control\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                            \"supporting-pc\": \t\t\t\t            \t{ \"type\": \"string\" },",
															"                                            \"service-priority\": \t\t\t                { \"type\": \"string\" },",
															"                                            \"forwarding-direction\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                            \"fc-port\": {",
															"                                                \"type\": \"array\",",
															"                                                \"items\": {",
															"                                                    \"type\": \"object\",",
															"                                                    \"properties\": {",
															"                                                    },",
															"                                                },",
															"                                            },",
															"                                            \"is-protection-lock-out\": \t\t\t\t\t    { \"type\": \"boolean\" },                    ",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"sync-ltp\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },                                ",
															"                                \"encapsulated-casc\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },",
															"                                \"phase-aligned-clock\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },",
															"                                \"local-id\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"configured-client-capacity\": \t\t\t\t\t{ \"type\": \"string\" },",
															"                                \"fc-blocks-signal-to-lp\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                \"lifecycle-state\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                                \"layer-protocol-name\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                                \"termination-state\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                                \"administrative-state\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                \"lp-direction\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                                \"is-protection-lock-out\":            \t\t\t{ \"type\": \"boolean\" },                    ",
															"                                \"operational-state\":     \t\t\t            { \"type\": \"string\" },",
															"                                \"administrative-control\": \t\t\t\t\t    { \"type\": \"string\" },                                ",
															"                                \"name\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"label\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"extension\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"operational-state\":     \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"administrative-control\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"administrative-state\":    \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"lifecycle-state\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                                \"address\": \t\t\t\t\t                                { \"type\": \"string\" },",
															"                            },",
															"                        },",
															"                    },                  ",
															"                    \"peer-ltp\":              \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"ltp-in-other-view\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"string\",",
															"                        },",
															"                    },",
															"                    \"ltp-augment-1-0:ltp-augment-pac\": {",
															"                        \"type\": \"object\",",
															"                        \"properties\": {",
															"                            \"ltp-augment-capability\": {",
															"                                \"type\": \"object\",",
															"                                \"properties\": {",
															"                                    \"equipment\": {",
															"                                        \"type\": \"array\",",
															"                                        \"items\": { ",
															"                                            \"type\": \"string\",",
															"                                        },",
															"                                    },                    ",
															"                                    \"connector\":                                 { \"type\": \"string\" },",
															"                                },",
															"                                \"required\": [",
															"                                    \"equipment\", ",
															"                                    \"connector\",",
															"                                ],",
															"                            },",
															"                        },",
															"                        \"required\": [",
															"                            \"ltp-augment-capability\", ",
															"                        ],",
															"                    },",
															"                    \"layer-protocol\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": {",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"layer-protocol-name\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                                \"configured-client-capacity\": \t\t\t\t\t{ \"type\": \"string\" },",
															"                                \"lp-direction\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                                \"termination-state\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                                \"configuration-and-switch-control\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"string\",",
															"                                    },",
															"                                },",
															"                                \"is-protection-lock-out\":            \t\t\t{ \"type\": \"boolean\" },",
															"                                \"fc-blocks-signal-to-lp\": \t\t\t\t\t    { \"type\": \"string\" },",
															"                                \"wire-interface-2-0:wire-interface-pac\": {",
															"                                    \"type\": \"object\",",
															"                                    \"properties\": {",
															"                                        \"wire-interface-capability\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"auto-pmd-negotiation-is-avail\": \t\t\t{ \"type\": \"boolean\" },",
															"                                                \"supported-pmd-kind-list\": \t\t \t\t\t{ \"type\": \"array\"   },",
															"                                                \"auto-negotiation-pmd-selection-is-avail\": \t{ \"type\": \"boolean\" },",
															"                                                \"supported-signal-ordering-kind-list\": \t\t{ \"type\": \"array\"   },",
															"                                                \"auto-signal-ordering-is-avail\": \t\t\t{ \"type\": \"boolean\" },",
															"                                                \"configuration-of-rx-sync-preference-is-avail\": { \"type\": \"boolean\" },",
															"                                                \"mii-kind\":\t{ \"enum\": [ \t\t\t",
															"                                                        \"wire-interface-2-0:MII_KIND_TYPE_GBIC\", ",
															"                                                        \"wire-interface-2-0:MII_KIND_TYPE_SOLDERED_CONNECTOR\", ",
															"                                                        \"wire-interface-2-0:MII_KIND_TYPE_SFP_SFP_PLUS_SFP28\", ",
															"                                                        \"wire-interface-2-0:MII_KIND_TYPE_XBI_300_PIN\", ",
															"                                                        \"wire-interface-2-0:MII_KIND_TYPE_XENPAK\", ",
															"                                                        \"wire-interface-2-0:MII_KIND_TYPE_XFP\", \t",
															"                                                        \"wire-interface-2-0:MII_KIND_TYPE_XFP_E\", ",
															"                                                        \"wire-interface-2-0:MII_KIND_TYPE_XPAK\", ",
															"                                                        \"wire-interface-2-0:MII_KIND_TYPE_X2\", ",
															"                                                        \"wire-interface-2-0:MII_KIND_TYPE_DWDM_SFP_SFP_PLUS\", ",
															"                                                        \"wire-interface-2-0:MII_KIND_TYPE_QSFP\", ",
															"                                                        \"wire-interface-2-0:MII_KIND_TYPE_QSFP_PLUS\",\t",
															"                                                        \"wire-interface-2-0:MII_KIND_TYPE_CXP\", \t",
															"                                                        \"wire-interface-2-0:MII_KIND_TYPE_SHIELDED_MINI_MULTILANE_HD_4X\", ",
															"                                                        \"wire-interface-2-0:MII_KIND_TYPE_SHIELDED_MINI_MULTILANE_HD_8X\", ",
															"                                                        \"wire-interface-2-0:MII_KIND_TYPE_QSFP28\", ",
															"                                                        \"wire-interface-2-0:MII_KIND_TYPE_CXP2\", ",
															"                                                        \"wire-interface-2-0:MII_KIND_TYPE_CDFP_STYLE1_STYLE2\", ",
															"                                                        \"wire-interface-2-0:MII_KIND_TYPE_SHIELDED_MINI_MULTILANE_HD_4X_FAN_OUT\",",
															"                                                        \"wire-interface-2-0:MII_KIND_TYPE_SHIELDED_MINI_MULTILANE_HD_8X_FAN_OUT\", ",
															"                                                        \"wire-interface-2-0:MII_KIND_TYPE_CDFP_STYLE3\", ",
															"                                                        \"wire-interface-2-0:MII_KIND_TYPE_QSFP_MICRO\", ",
															"                                                        \"wire-interface-2-0:MII_KIND_TYPE_QSFP_DD\", ",
															"                                                        \"wire-interface-2-0:MII_KIND_TYPE_QSFP_PLUS_RATE_SELECT_V1\", ",
															"                                                        \"wire-interface-2-0:MII_KIND_TYPE_QSFP_PLUS_RATE_SELECT_V2\",",
															"                                                        \"wire-interface-2-0:MII_KIND_TYPE_NOT_YET_DEFINED\" \t",
															"                                                    ]",
															"                                                },",
															"                                                \"mdi-kind\": { \"enum\": [",
															"                                                        \"wire-interface-2-0:MDI_KIND_TYPE_SC\", ",
															"                                                        \"wire-interface-2-0:MDI_KIND_TYPE_FIBRE_CHANNEL_STYLE_1\", ",
															"                                                        \"wire-interface-2-0:MDI_KIND_TYPE_FIBRE_CHANNEL_STYLE_2\", ",
															"                                                        \"wire-interface-2-0:MDI_KIND_TYPE_BNC_TNC\", ",
															"                                                        \"wire-interface-2-0:MDI_KIND_TYPE_FC\", ",
															"                                                        \"wire-interface-2-0:MDI_KIND_TYPE_FIBER_JACK\", ",
															"                                                        \"wire-interface-2-0:MDI_KIND_TYPE_LC\", ",
															"                                                        \"wire-interface-2-0:MDI_KIND_TYPE_MT_RJ\", ",
															"                                                        \"wire-interface-2-0:MDI_KIND_TYPE_MU\", ",
															"                                                        \"wire-interface-2-0:MDI_KIND_TYPE_SG\", ",
															"                                                        \"wire-interface-2-0:MDI_KIND_TYPE_OPTICAL_PIGTAIL\", ",
															"                                                        \"wire-interface-2-0:MDI_KIND_TYPE_MPO1x12\", ",
															"                                                        \"wire-interface-2-0:MDI_KIND_TYPE_MPO2x16\", ",
															"                                                        \"wire-interface-2-0:MDI_KIND_TYPE_HSSDC_II\",  ",
															"                                                        \"wire-interface-2-0:MDI_KIND_TYPE_COPPER_PIGTAIL\", ",
															"                                                        \"wire-interface-2-0:MDI_KIND_TYPE_RJ45\", ",
															"                                                        \"wire-interface-2-0:MDI_KIND_TYPE_NO_SEPERABLE_CONNECTOR\", ",
															"                                                        \"wire-interface-2-0:MDI_KIND_TYPE_MXC2x16\", ",
															"                                                        \"wire-interface-2-0:MDI_KIND_TYPE_ST\", ",
															"                                                        \"wire-interface-2-0:MDI_KIND_TYPE_NOT_YET_DEFINED\" ",
															"                                                    ]",
															"                                                },",
															"                                                \"required-medium-kind\": { \"enum\": [",
															"                                                        \"wire-interface-2-0:MEDIUM_KIND_TYPE_TP_CAT3\", ",
															"                                                        \"wire-interface-2-0:MEDIUM_KIND_TYPE_TP_CAT5\", ",
															"                                                        \"wire-interface-2-0:MEDIUM_KIND_TYPE_TP_CAT6\", ",
															"                                                        \"wire-interface-2-0:MEDIUM_KIND_TYPE_TP_CAT8\", ",
															"                                                        \"wire-interface-2-0:MEDIUM_KIND_TYPE_SINGLE_MODE\",",
															"                                                        \"wire-interface-2-0:MEDIUM_KIND_TYPE_MULTI_MODE\", ",
															"                                                        \"wire-interface-2-0:MEDIUM_KIND_TYPE_NOT_YET_DEFINED\"",
															"                                                    ]",
															"                                                },",
															"                                                \"wavelength-min-list\": \t\t\t\t\t\t{ \"type\": \"array\" },",
															"                                                \"wavelength-max-list\": \t\t\t\t\t\t{ \"type\": \"array\" },",
															"                                                \"wavelength-grid-min\": \t\t\t\t\t\t{ \"type\": \"number\" },",
															"                                                \"short-reach-mode-is-avail\": \t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"eee-is-avail\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"unidirectional-operation-is-avail\": \t\t{ \"type\": \"boolean\" },",
															"                                                \"rxlevel-low-threshold\": \t\t\t\t\t{ \"type\": \"number\" },",
															"                                                \"rxlevel-high-threshold\": \t\t\t\t\t{ \"type\": \"number\" },",
															"                                                \"temperature-low-threshold\": \t\t\t\t{ \"type\": \"number\" },",
															"                                                \"temperature-high-threshold\": \t\t\t\t{ \"type\": \"number\" },",
															"                                                \"configuration-of-number-of-bip-errors-per-ses-is-avail\": { \"type\": \"boolean\" },",
															"                                                \"admin-shut-down-is-avail\": \t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"isolation-is-avail\": \t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"supported-loop-back-kind-list\": \t\t\t{ \"type\": \"array\" },",
															"                                                \"maintenance-timer-range\": \t\t\t\t\t{ \"type\": \"string\" },",
															"                                                \"supported-alarm-list\": \t\t\t\t\t{ \"type\": \"array\" },",
															"                                                \"performance-monitoring-is-avail\": \t\t\t{ \"type\": \"boolean\" }",
															"                                            }",
															"                                        },",
															"                                        \"wire-interface-configuration\":{",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"interface-name\": \t\t\t\t\t\t\t{ \"type\": \"string\" },",
															"                                                \"interface-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"remote-wire-interface-name\": \t\t\t\t{ \"type\": \"string\" },",
															"                                                \"transceiver-is-on-list\": \t\t\t\t\t{ \"type\": \"array\" },",
															"                                                \"auto-pmd-negotiation-is-on\": \t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"fixed-pmd-kind\": \t\t\t\t\t\t\t{ \"type\": \"string\" },",
															"                                                \"auto-negotiation-pmd-list\": \t\t\t\t{ \"type\": \"array\" },",
															"                                                \"auto-signal-ordering-is-on\": \t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"fixed-signal-ordering-kind\": { \"enum\": [",
															"                                                        \"wire-interface-2-0:SIGNAL_ORDERING_KIND_TYPE_MDI\",",
															"                                                        \"wire-interface-2-0:SIGNAL_ORDERING_KIND_TYPE_MDI_X\",",
															"                                                        \"wire-interface-2-0:SIGNAL_ORDERING_KIND_TYPE_NOT_YET_DEFINED\"",
															"                                                    ]",
															"                                                },",
															"                                                \"wavelength-list\": \t\t\t\t\t\t\t{ \"type\": \"array\" },",
															"                                                \"rx-sync-preference\": { \"enum\": [",
															"                                                        \"wire-interface-2-0:RX_SYNC_PREFERENCE_TYPE_AUTO_MULTIPORT_DEVICE\",",
															"                                                        \"wire-interface-2-0:RX_SYNC_PREFERENCE_TYPE_AUTO_SINGLE_PORT_DEVICE\",",
															"                                                        \"wire-interface-2-0:RX_SYNC_PREFERENCE_TYPE_MANUAL_MASTER\",",
															"                                                        \"wire-interface-2-0:RX_SYNC_PREFERENCE_TYPE_MANUAL_SLAVE\",",
															"                                                        \"wire-interface-2-0:RX_SYNC_PREFERENCE_TYPE_NOT_YET_DEFINED\"",
															"                                                    ]",
															"                                                },",
															"                                                \"short-reach-mode-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"eee-is-on\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"unidirectional-operation-is-on\": \t\t\t{ \"type\": \"boolean\" },",
															"                                                \"number-of-bip-errors-per-ses\": \t\t\t{ \"type\": \"number\" },",
															"                                                \"restart-pmd-negotiation-is-on\": \t\t\t{ \"type\": \"boolean\" },",
															"                                                \"isolation-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"loop-back-kind-on\": { \"enum\": [",
															"                                                        \"wire-interface-2-0:LOOP_BACK_TYPE_NONE\",",
															"                                                        \"wire-interface-2-0:LOOP_BACK_TYPE_BACK_TO_EXTERNAL\",",
															"                                                        \"wire-interface-2-0:LOOP_BACK_TYPE_BACK_TO_INTERNAL\",",
															"                                                        \"wire-interface-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"",
															"                                                    ]",
															"                                                },",
															"                                                \"maintenance-timer\": \t\t\t\t\t\t{ \"type\": \"number\" },",
															"                                                \"problem-kind-severity-list\": \t\t\t\t{ \"type\": \"array\" },",
															"                                                \"performance-monitoring-is-on\": \t\t\t{ \"type\": \"boolean\" }",
															"                                            }",
															"                                        },",
															"                                        \"wire-interface-status\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"interface-status\":\t{ \"enum\": [",
															"                                                        \"wire-interface-2-0:INTERFACE_STATUS_TYPE_UP\", ",
															"                                                        \"wire-interface-2-0:INTERFACE_STATUS_TYPE_DOWN\", ",
															"                                                        \"wire-interface-2-0:INTERFACE_STATUS_TYPE_TESTING\", ",
															"                                                        \"wire-interface-2-0:INTERFACE_STATUS_TYPE_UNKNOWN\", ",
															"                                                        \"wire-interface-2-0:INTERFACE_STATUS_TYPE_DORMANT\", ",
															"                                                        \"wire-interface-2-0:INTERFACE_STATUS_TYPE_NOT_PRESENT\", ",
															"                                                        \"wire-interface-2-0:INTERFACE_STATUS_TYPE_LOWER_LAYER_DOWN\",",
															"                                                        \"wire-interface-2-0:INTERFACE_STATUS_TYPE_ADMIN_DOWN\", ",
															"                                                        \"wire-interface-2-0:INTERFACE_STATUS_TYPE_NOT_YET_DEFINED\"",
															"                                                    ]",
															"                                                },",
															"                                                \"receive-signal-is-detected-list\": \t\t\t\t{ \"type\": \"array\" },",
															"                                                \"pmd-negotiation-state\": { \"enum\": [",
															"                                                                    \"wire-interface-2-0:PMD_NEGOTIATION_STATE_TYPE_NONE\", ",
															"                                                                    \"wire-interface-2-0:PMD_NEGOTIATION_STATE_TYPE_DISABLED\", ",
															"                                                                    \"wire-interface-2-0:PMD_NEGOTIATION_STATE_TYPE_ENABLED\", ",
															"                                                                    \"wire-interface-2-0:PMD_NEGOTIATION_STATE_TYPE_IN_PROGRESS\", ",
															"                                                                    \"wire-interface-2-0:PMD_NEGOTIATION_STATE_TYPE_COMPLETE\", ",
															"                                                                    \"wire-interface-2-0:PMD_NEGOTIATION_STATE_TYPE_FAILED\", ",
															"                                                                    \"wire-interface-2-0:PMD_NEGOTIATION_STATE_TYPE_NOT_YET_DEFINED\"",
															"                                                                ]",
															"                                                },",
															"                                                \"pmd-is-up\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"signal-ordering-kind-cur\":\t{ \"enum\": [ \t\t\t",
															"                                                                        \"wire-interface-2-0:SIGNAL_ORDERING_KIND_TYPE_MDI\", ",
															"                                                                        \"wire-interface-2-0:SIGNAL_ORDERING_KIND_TYPE_MDI_X\", ",
															"                                                                        \"wire-interface-2-0:SIGNAL_ORDERING_KIND_TYPE_NOT_YET_DEFINED\"",
															"                                                                    ]",
															"                                                },",
															"                                                \"pmd-kind-cur\": \t\t\t\t\t\t\t{ \"type\": \"string\" },",
															"                                                \"rx-sync-role\": { \"enum\": [ \t\t\t",
															"                                                            \"wire-interface-2-0:RX_SYNC_ROLE_TYPE_MASTER\", ",
															"                                                            \"wire-interface-2-0:RX_SYNC_ROLE_TYPE_SLAVE\", ",
															"                                                            \"wire-interface-2-0:RX_SYNC_ROLE_TYPE_FAULT\", ",
															"                                                            \"wire-interface-2-0:RX_SYNC_ROLE_TYPE_NOT_YET_DEFINED\"",
															"                                                        ]",
															"                                                },",
															"                                                \"eee-is-up\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"link-is-up\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"link-is-idle\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                                                \"loop-back-kind-up\": { \"enum\": [ \t\t\t",
															"                                                                \"wire-interface-2-0:LOOP_BACK_TYPE_NONE\", ",
															"                                                                \"wire-interface-2-0:LOOP_BACK_TYPE_EXTERNAL\",",
															"                                                                \"wire-interface-2-0:LOOP_BACK_TYPE_INTERNAL\",",
															"                                                                \"wire-interface-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"",
															"                                                            ]",
															"                                                },",
															"                                                \"tx-level-cur\": \t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"                                                \"rx-level-cur-list\": \t\t\t\t\t\t{ \"type\": \"array\" },",
															"                                                \"performance-monitoring-is-up\": \t\t\t{ \"type\": \"boolean\" }",
															"                                            }",
															"                                        },",
															"                                        \"wire-interface-current-problems\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"current-problem-list\": \t\t\t\t\t{ \"type\": \"array\"  },",
															"                                                \"number-of-current-problems\": \t\t\t\t{ \"type\": \"number\" },",
															"                                                \"time-of-latest-change\": \t\t\t\t\t{ \"type\": \"string\" }",
															"                                            }",
															"                                        },",
															"                                        \"wire-interface-current-performance\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"current-performance-data-list\":\t\t\t{ \"type\": \"array\"  },",
															"                                                \"number-of-current-performance-sets\": \t\t{ \"type\": \"number\" }",
															"                                            }",
															"                                        },",
															"                                        \"wire-interface-historical-performances\": {",
															"                                            \"type\": \"object\",",
															"                                            \"properties\": {",
															"                                                \"historical-performance-data-list\": \t\t{ \"type\": \"array\"  },",
															"                                                \"number-of-historical-performance-sets\": \t{ \"type\": \"number\" },",
															"                                                \"time-of-latest-change\": \t\t\t\t\t{ \"type\": \"string\" }",
															"                                            }",
															"                                        }",
															"                                    },",
															"                                },",
															"                                \"local-id\": \t\t\t\t\t                            { \"type\": \"string\" },",
															"                                \"name\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"label\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"extension\": {",
															"                                    \"type\": \"array\",",
															"                                    \"items\": { ",
															"                                        \"type\": \"object\",",
															"                                        \"properties\": {",
															"                                            \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                            \"value\":                                        { \"type\": \"string\" },",
															"                                        },",
															"                                    },",
															"                                },",
															"                                \"operational-state\":     \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"administrative-control\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"administrative-state\":    \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"lifecycle-state\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                                \"address\": \t\t\t\t\t                                { \"type\": \"string\" },",
															"                            },",
															"                            \"required\": [",
															"                                \"layer-protocol-name\",",
															"                                \"wire-interface-2-0:wire-interface-pac\",",
															"                                \"local-id\",",
															"                            ],",
															"                        },",
															"                    },",
															"                    \"external-managed-id\": {",
															"                        \"type\": \"object\",",
															"                        \"properties\": {",
															"                            \"manager-identifier\": \t\t\t\t\t            { \"type\": \"string\" },",
															"                            \"external-managed-uuid\": \t\t\t\t\t        { \"type\": \"string\" },",
															"                        },",
															"                    },",
															"                    \"local-id\": \t\t\t\t\t                            { \"type\": \"string\" },",
															"                    \"uuid\": \t\t\t\t\t                                { \"type\": \"string\" },",
															"                    \"name\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"value\":                                        { \"type\": \"string\" },",
															"                            },",
															"                        },",
															"                    },",
															"                    \"label\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"value\":                                        { \"type\": \"string\" },",
															"                            },",
															"                        },",
															"                    },",
															"                    \"extension\": {",
															"                        \"type\": \"array\",",
															"                        \"items\": { ",
															"                            \"type\": \"object\",",
															"                            \"properties\": {",
															"                                \"value-name\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                                \"value\":                                        { \"type\": \"string\" },",
															"                            },",
															"                        },",
															"                    },",
															"                    \"operational-state\":     \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"administrative-control\": \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"administrative-state\":    \t\t\t\t\t                { \"type\": \"string\" },",
															"                    \"lifecycle-state\": \t\t\t\t\t                        { \"type\": \"string\" },",
															"                    \"address\": \t\t\t\t\t                                { \"type\": \"string\" },",
															"                },",
															"                \"required\": [",
															"                    \"client-ltp\",",
															"                    \"ltp-augment-1-0:ltp-augment-pac\",",
															"                    \"layer-protocol\",",
															"                    \"uuid\",",
															"                    \"name\",",
															"                ],",
															"            },",
															"        },",
															"    },",
															"    \"required\": [",
															"        \"core-model-1-4:logical-termination-point\",",
															"    ]",
															"};",
															"pm.variables.set(\"schema\", WIRE_INTERFACE_LTP_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\", \"\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PacCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------Checking WireInterface_Pac for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* PacCompleteness",
															"* ",
															"* This Request is for validating WireInterface Pac Objects against definition ",
															"* WireInterface_2.0.0-tsp.200123.1000",
															"* as it can be found on https://github.com/openBackhaul/wireInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the *_Pac class",
															"*  - availability of all attributes in this particular class",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"\tvar SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"pac\";             // choose from \"pac\", \"capability\", \"configuration\", ",
															"\t\t\t\t\t\t\t\t\t\t\t// \"status\", \"current-problems\", \"current-performance\" ",
															"\t\t\t\t\t\t\t\t\t\t\t// or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 3;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let WIRE_INTERFACE_PAC_SCHEMA = {",
															"\t\"type\": \"object\",",
															"\t\"properties\": {",
															"        \"wire-interface-capability\": {",
															"\t\t\t\"type\": \"object\",",
															"            \"properties\": {",
															"\t\t\t\t\"auto-pmd-negotiation-is-avail\": \t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\"supported-pmd-kind-list\": \t\t \t\t\t{ \"type\": \"array\"   },",
															"\t\t\t\t\"auto-negotiation-pmd-selection-is-avail\": \t{ \"type\": \"boolean\" },",
															"\t\t\t\t\"supported-signal-ordering-kind-list\": \t\t{ \"type\": \"array\"   },",
															"\t\t\t\t\"auto-signal-ordering-is-avail\": \t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\"configuration-of-rx-sync-preference-is-avail\": { \"type\": \"boolean\" },",
															"\t\t\t\t\"mii-kind\":\t{ \"enum\": [ \t\t\t",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_GBIC\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_SOLDERED_CONNECTOR\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_SFP_SFP_PLUS_SFP28\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_XBI_300_PIN\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_XENPAK\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_XFP\", \t",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_XFP_E\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_XPAK\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_X2\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_DWDM_SFP_SFP_PLUS\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_QSFP\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_QSFP_PLUS\",\t",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_CXP\", \t",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_SHIELDED_MINI_MULTILANE_HD_4X\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_SHIELDED_MINI_MULTILANE_HD_8X\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_QSFP28\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_CXP2\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_CDFP_STYLE1_STYLE2\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_SHIELDED_MINI_MULTILANE_HD_4X_FAN_OUT\",",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_SHIELDED_MINI_MULTILANE_HD_8X_FAN_OUT\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_CDFP_STYLE3\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_QSFP_MICRO\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_QSFP_DD\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_QSFP_PLUS_RATE_SELECT_V1\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_QSFP_PLUS_RATE_SELECT_V2\",",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_NOT_YET_DEFINED\" \t",
															"\t\t\t\t\t]",
															"\t\t\t\t},",
															"\t\t\t\t\"mdi-kind\": { \"enum\": [",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_SC\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_FIBRE_CHANNEL_STYLE_1\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_FIBRE_CHANNEL_STYLE_2\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_BNC_TNC\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_FC\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_FIBER_JACK\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_LC\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_MT_RJ\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_MU\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_SG\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_OPTICAL_PIGTAIL\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_MPO1x12\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_MPO2x16\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_HSSDC_II\",  ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_COPPER_PIGTAIL\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_RJ45\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_NO_SEPERABLE_CONNECTOR\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_MXC2x16\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_ST\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_NOT_YET_DEFINED\" ",
															"\t\t\t\t\t]",
															"\t\t\t\t},",
															"\t\t\t\t\"required-medium-kind\": { \"enum\": [",
															"\t\t\t\t\t\t\"wire-interface-2-0:MEDIUM_KIND_TYPE_TP_CAT3\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MEDIUM_KIND_TYPE_TP_CAT5\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MEDIUM_KIND_TYPE_TP_CAT6\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MEDIUM_KIND_TYPE_TP_CAT8\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MEDIUM_KIND_TYPE_SINGLE_MODE\",",
															"\t\t\t\t\t\t\"wire-interface-2-0:MEDIUM_KIND_TYPE_MULTI_MODE\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MEDIUM_KIND_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t]",
															"\t\t\t\t},",
															"\t\t\t\t\"wavelength-min-list\": \t\t\t\t\t\t{ \"type\": \"array\" },",
															"\t\t\t\t\"wavelength-max-list\": \t\t\t\t\t\t{ \"type\": \"array\" },",
															"\t\t\t\t\"wavelength-grid-min\": \t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\"short-reach-mode-is-avail\": \t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\"eee-is-avail\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\"unidirectional-operation-is-avail\": \t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\"rxlevel-low-threshold\": \t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\"rxlevel-high-threshold\": \t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\"temperature-low-threshold\": \t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\"temperature-high-threshold\": \t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\"configuration-of-number-of-bip-errors-per-ses-is-avail\": { \"type\": \"boolean\" },",
															"\t\t\t\t\"admin-shut-down-is-avail\": \t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\"isolation-is-avail\": \t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\"supported-loop-back-kind-list\": \t\t\t{ \"type\": \"array\" },",
															"\t\t\t\t\"maintenance-timer-range\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\"supported-alarm-list\": \t\t\t\t\t{ \"type\": \"array\" },",
															"\t\t\t\t\"performance-monitoring-is-avail\": \t\t\t{ \"type\": \"boolean\" }",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"wire-interface-configuration\":{",
															"\t\t\t\"type\": \"object\",",
															"\t\t\t\"properties\": {",
															"\t\t\t\t\"interface-name\": \t\t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\"interface-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\"remote-wire-interface-name\": \t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\"transceiver-is-on-list\": \t\t\t\t\t{ \"type\": \"array\" },",
															"\t\t\t\t\"auto-pmd-negotiation-is-on\": \t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\"fixed-pmd-kind\": \t\t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\"auto-negotiation-pmd-list\": \t\t\t\t{ \"type\": \"array\" },",
															"\t\t\t\t\"auto-signal-ordering-is-on\": \t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\"fixed-signal-ordering-kind\": { \"enum\": [",
															"\t\t\t\t\t\t\"wire-interface-2-0:SIGNAL_ORDERING_KIND_TYPE_MDI\",",
															"\t\t\t\t\t\t\"wire-interface-2-0:SIGNAL_ORDERING_KIND_TYPE_MDI_X\",",
															"\t\t\t\t\t\t\"wire-interface-2-0:SIGNAL_ORDERING_KIND_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t]",
															"\t\t\t\t},",
															"\t\t\t\t\"wavelength-list\": \t\t\t\t\t\t\t{ \"type\": \"array\" },",
															"\t\t\t\t\"rx-sync-preference\": { \"enum\": [",
															"\t\t\t\t\t\t\"wire-interface-2-0:RX_SYNC_PREFERENCE_TYPE_AUTO_MULTIPORT_DEVICE\",",
															"\t\t\t\t\t\t\"wire-interface-2-0:RX_SYNC_PREFERENCE_TYPE_AUTO_SINGLE_PORT_DEVICE\",",
															"\t\t\t\t\t\t\"wire-interface-2-0:RX_SYNC_PREFERENCE_TYPE_MANUAL_MASTER\",",
															"\t\t\t\t\t\t\"wire-interface-2-0:RX_SYNC_PREFERENCE_TYPE_MANUAL_SLAVE\",",
															"\t\t\t\t\t\t\"wire-interface-2-0:RX_SYNC_PREFERENCE_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t]",
															"\t\t\t\t},",
															"\t\t\t\t\"short-reach-mode-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\"eee-is-on\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\"unidirectional-operation-is-on\": \t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\"number-of-bip-errors-per-ses\": \t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\"restart-pmd-negotiation-is-on\": \t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\"isolation-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\"loop-back-kind-on\": { \"enum\": [",
															"\t\t\t\t\t\t\"wire-interface-2-0:LOOP_BACK_TYPE_NONE\",",
															"\t\t\t\t\t\t\"wire-interface-2-0:LOOP_BACK_TYPE_BACK_TO_EXTERNAL\",",
															"\t\t\t\t\t\t\"wire-interface-2-0:LOOP_BACK_TYPE_BACK_TO_INTERNAL\",",
															"\t\t\t\t\t\t\"wire-interface-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t]",
															"\t\t\t\t},",
															"\t\t\t\t\"maintenance-timer\": \t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\"problem-kind-severity-list\": \t\t\t\t{ \"type\": \"array\" },",
															"\t\t\t\t\"performance-monitoring-is-on\": \t\t\t{ \"type\": \"boolean\" }",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"wire-interface-status\": {",
															"\t\t\t\"type\": \"object\",",
															"\t\t\t\"properties\": {",
															"\t\t\t\t\"interface-status\":\t{ \"enum\": [",
															"\t\t\t\t\t\t\"wire-interface-2-0:INTERFACE_STATUS_TYPE_UP\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:INTERFACE_STATUS_TYPE_DOWN\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:INTERFACE_STATUS_TYPE_TESTING\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:INTERFACE_STATUS_TYPE_UNKNOWN\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:INTERFACE_STATUS_TYPE_DORMANT\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:INTERFACE_STATUS_TYPE_NOT_PRESENT\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:INTERFACE_STATUS_TYPE_LOWER_LAYER_DOWN\",",
															"\t\t\t\t\t\t\"wire-interface-2-0:INTERFACE_STATUS_TYPE_ADMIN_DOWN\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:INTERFACE_STATUS_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t]",
															"\t\t\t\t},",
															"\t\t\t\t\"receive-signal-is-detected-list\": \t\t\t\t{ \"type\": \"array\" },",
															"\t\t\t\t\"pmd-negotiation-state\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:PMD_NEGOTIATION_STATE_TYPE_NONE\", ",
															"\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:PMD_NEGOTIATION_STATE_TYPE_DISABLED\", ",
															"\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:PMD_NEGOTIATION_STATE_TYPE_ENABLED\", ",
															"\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:PMD_NEGOTIATION_STATE_TYPE_IN_PROGRESS\", ",
															"\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:PMD_NEGOTIATION_STATE_TYPE_COMPLETE\", ",
															"\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:PMD_NEGOTIATION_STATE_TYPE_FAILED\", ",
															"\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:PMD_NEGOTIATION_STATE_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t   ]",
															"\t\t\t\t},",
															"\t\t\t\t\"pmd-is-up\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\"signal-ordering-kind-cur\":\t{ \"enum\": [ \t\t\t",
															"\t\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:SIGNAL_ORDERING_KIND_TYPE_MDI\", ",
															"\t\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:SIGNAL_ORDERING_KIND_TYPE_MDI_X\", ",
															"\t\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:SIGNAL_ORDERING_KIND_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t  ]",
															"\t\t\t\t},",
															"\t\t\t\t\"pmd-kind-cur\": \t\t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\"rx-sync-role\": { \"enum\": [ \t\t\t",
															"\t\t\t\t\t\t\t\"wire-interface-2-0:RX_SYNC_ROLE_TYPE_MASTER\", ",
															"\t\t\t\t\t\t\t\"wire-interface-2-0:RX_SYNC_ROLE_TYPE_SLAVE\", ",
															"\t\t\t\t\t\t\t\"wire-interface-2-0:RX_SYNC_ROLE_TYPE_FAULT\", ",
															"\t\t\t\t\t\t\t\"wire-interface-2-0:RX_SYNC_ROLE_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t  ]",
															"\t\t\t\t},",
															"\t\t\t\t\"eee-is-up\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\"link-is-up\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\"link-is-idle\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\"loop-back-kind-up\": { \"enum\": [ \t\t\t",
															"\t\t\t\t\t\t\t\t\"wire-interface-2-0:LOOP_BACK_TYPE_NONE\", ",
															"\t\t\t\t\t\t\t\t\"wire-interface-2-0:LOOP_BACK_TYPE_EXTERNAL\",",
															"\t\t\t\t\t\t\t\t\"wire-interface-2-0:LOOP_BACK_TYPE_INTERNAL\",",
															"\t\t\t\t\t\t\t\t\"wire-interface-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t]",
															"\t\t\t\t},",
															"\t\t\t\t\"tx-level-cur\": \t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\"rx-level-cur-list\": \t\t\t\t\t\t{ \"type\": \"array\" },",
															"\t\t\t\t\"performance-monitoring-is-up\": \t\t\t{ \"type\": \"boolean\" }",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"wire-interface-current-problems\": {",
															"\t\t\t\"type\": \"object\",",
															"            \"properties\": {",
															"\t\t\t\t\"current-problem-list\": \t\t\t\t\t{ \"type\": \"array\"  },",
															"\t\t\t\t\"number-of-current-problems\": \t\t\t\t{ \"type\": \"number\" },",
															"                \"time-of-latest-change\": \t\t\t\t\t{ \"type\": \"string\" }",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"wire-interface-current-performance\": {",
															"\t\t\t\"type\": \"object\",",
															"            \"properties\": {",
															"\t\t\t\t\"current-performance-data-list\":\t\t\t{ \"type\": \"array\"  },",
															"\t\t\t\t\"number-of-current-performance-sets\": \t\t{ \"type\": \"number\" }",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"wire-interface-historical-performances\": {",
															"\t\t\t\"type\": \"object\",",
															"            \"properties\": {",
															"\t\t\t\t\"historical-performance-data-list\": \t\t{ \"type\": \"array\"  },",
															"\t\t\t\t\"number-of-historical-performance-sets\": \t{ \"type\": \"number\" },",
															"                \"time-of-latest-change\": \t\t\t\t\t{ \"type\": \"string\" }",
															"\t\t\t}",
															"\t\t}",
															"\t},",
															"\t\"required\": [\"wire-interface-capability\",",
															"\t\t\t\t\"wire-interface-configuration\",",
															"\t\t\t\t\"wire-interface-status\",",
															"\t\t\t\t\"wire-interface-current-problems\",",
															"\t\t\t\t\"wire-interface-current-performance\",",
															"\t\t\t\t\"wire-interface-historical-performances\"",
															"    ]",
															"};",
															"",
															"pm.variables.set(\"schema\", WIRE_INTERFACE_PAC_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"\teval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"    attributeUnterTest, contentType,",
															"    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function () {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"            \"current-problems\", \"current-performance\",",
															"            \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function () {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function () {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function () {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function () {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function () {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function () {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function () {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CapabilityCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------------Checking WireInterfaceCapability for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* CapabilityCompleteness",
															"* ",
															"* This Request is for validating WireInterface Capability Objects against definition ",
															"* WireInterface_2.0.0-tsp.200123.1000",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/wireInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Capability class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"\tvar SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"\tCouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"\tCouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"\t\t\t\t\t\t\t\t\t\t\t// \"status\", \"current-problems\", \"current-performance\" ",
															"\t\t\t\t\t\t\t\t\t\t\t// or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"\tKEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"\tFILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let WIRE_INTERFACE_CAPABILITY_SCHEMA = {",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"auto-pmd-negotiation-is-avail\": \t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"supported-pmd-kind-list\": {",
															"    \t\t\"type\": \"array\",",
															"    \t\t\"items\": { ",
															"    \t\t\t\"type\": \"object\",",
															"    \t\t\t\"properties\": {",
															"    \t\t\t\t\"pmd-name\":  \t\t\t\t\t\t\t\t{ \"type\": \"string\" },",
															"    \t\t\t\t\"speed\":       \t\t\t\t\t\t  \t\t{ \"type\": \"string\" },",
															"    \t\t\t\t\"duplex\": { \"enum\": [",
															"    \t\t\t\t\t\t\t \"wire-interface-2-0:DUPLEX_TYPE_HALF_DUPLEX\",",
															"    \t\t\t\t\t\t \t \"wire-interface-2-0:DUPLEX_TYPE_FULL_DUPLEX\",",
															"    \t\t\t\t\t\t \t \"wire-interface-2-0:DUPLEX_TYPE_NOT_YET_DEFINED\"",
															"    \t\t\t\t\t\t    ]",
															"    \t\t\t\t}",
															"    \t\t\t},",
															"    \t\t\t\"required\": [ \"pmd-name\", ",
															"    \t\t\t\t\t\t\t\"speed\",",
															"    \t\t\t\t\t\t\t\"duplex\"",
															"    \t\t\t]",
															"    \t\t}",
															"\t\t},",
															"\t\t\"auto-negotiation-pmd-selection-is-avail\": \t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"supported-signal-ordering-kind-list\": { ",
															"\t\t    \"type\": \"array\",",
															"\t\t\t\"items\": { \"enum\": [",
															"\t\t\t\t\t\t\"wire-interface-2-0:SIGNAL_ORDERING_KIND_TYPE_MDI\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:SIGNAL_ORDERING_KIND_TYPE_MDI_X\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:SIGNAL_ORDERING_KIND_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t   ]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"auto-signal-ordering-is-avail\": \t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"configuration-of-rx-sync-preference-is-avail\": \t{ \"type\": \"boolean\" }, ",
															"\t\t\"mii-kind\":\t{ \"enum\": [ \t\t\t",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_GBIC\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_SOLDERED_CONNECTOR\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_SFP_SFP_PLUS_SFP28\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_XBI_300_PIN\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_XENPAK\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_XFP\", \t",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_XFP_E\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_XPAK\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_X2\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_DWDM_SFP_SFP_PLUS\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_QSFP\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_QSFP_PLUS\",\t",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_CXP\", \t",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_SHIELDED_MINI_MULTILANE_HD_4X\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_SHIELDED_MINI_MULTILANE_HD_8X\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_QSFP28\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_CXP2\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_CDFP_STYLE1_STYLE2\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_SHIELDED_MINI_MULTILANE_HD_4X_FAN_OUT\",",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_SHIELDED_MINI_MULTILANE_HD_8X_FAN_OUT\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_CDFP_STYLE3\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_QSFP_MICRO\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_QSFP_DD\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_QSFP_PLUS_RATE_SELECT_V1\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_QSFP_PLUS_RATE_SELECT_V2\",",
															"\t\t\t\t\t\t\"wire-interface-2-0:MII_KIND_TYPE_NOT_YET_DEFINED\" \t",
															"\t\t\t\t\t  ]",
															"\t\t},",
															"\t\t\"mdi-kind\": { \"enum\": [",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_SC\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_FIBRE_CHANNEL_STYLE_1\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_FIBRE_CHANNEL_STYLE_2\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_BNC_TNC\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_FC\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_FIBER_JACK\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_LC\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_MT_RJ\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_MU\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_SG\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_OPTICAL_PIGTAIL\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_MPO1x12\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_MPO2x16\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_HSSDC_II\",  ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_COPPER_PIGTAIL\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_RJ45\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_NO_SEPERABLE_CONNECTOR\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_MXC2x16\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_ST\", ",
															"\t\t\t\t\t\t\"wire-interface-2-0:MDI_KIND_TYPE_NOT_YET_DEFINED\" ",
															"\t\t\t\t\t  ]",
															"\t\t},",
															"\t\t\"required-medium-kind\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:MEDIUM_KIND_TYPE_TP_CAT3\", ",
															"\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:MEDIUM_KIND_TYPE_TP_CAT5\", ",
															"\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:MEDIUM_KIND_TYPE_TP_CAT6\", ",
															"\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:MEDIUM_KIND_TYPE_TP_CAT8\", ",
															"\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:MEDIUM_KIND_TYPE_SINGLE_MODE\",",
															"\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:MEDIUM_KIND_TYPE_MULTI_MODE\", ",
															"\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:MEDIUM_KIND_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t  ]",
															"\t\t},",
															"\t\t\"wavelength-min-list\": {\t",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"number\" }",
															"\t\t},",
															"\t\t\"wavelength-max-list\":{\t",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"number\" }",
															"\t\t},",
															"\t\t\"wavelength-grid-min\": \t\t\t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"short-reach-mode-is-avail\": \t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"eee-is-avail\": \t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"unidirectional-operation-is-avail\": \t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"rxlevel-low-threshold\": \t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"rxlevel-high-threshold\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"temperature-low-threshold\": \t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"temperature-high-threshold\": \t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"configuration-of-number-of-bip-errors-per-ses-is-avail\": { \"type\": \"boolean\" },",
															"\t\t\"admin-shut-down-is-avail\": \t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"isolation-is-avail\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"supported-loop-back-kind-list\": {  ",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": { \"enum\": [",
															"\t\t\t\t\t\t\t\"wire-interface-2-0:LOOP_BACK_TYPE_NONE\", ",
															"\t\t\t\t\t\t\t\"wire-interface-2-0:LOOP_BACK_TYPE_EXTERNAL\", ",
															"\t\t\t\t\t\t\t\"wire-interface-2-0:LOOP_BACK_TYPE_INTERNAL\", ",
															"\t\t\t\t\t\t\t\"wire-interface-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t   ]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"maintenance-timer-range\": \t\t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\"supported-alarm-list\": {",
															"            \"type\": \"array\",",
															"            \"item\":                                    \t\t{ \"type\": \"string\" }",
															"\t\t},",
															"\t\t\"performance-monitoring-is-avail\": \t\t\t\t\t{ \"type\": \"boolean\" }",
															"\t},",
															"\t\"required\": [ \"auto-pmd-negotiation-is-avail\", ",
															"\t\t\t\t  \"supported-pmd-kind-list\",",
															"\t\t\t\t  \"auto-negotiation-pmd-selection-is-avail\",",
															"\t\t\t\t  \"supported-signal-ordering-kind-list\",",
															"\t\t\t\t  \"auto-signal-ordering-is-avail\",\t",
															"\t\t\t\t  \"configuration-of-rx-sync-preference-is-avail\",",
															"\t\t\t\t  \"mii-kind\",",
															"\t\t\t\t  \"mdi-kind\",",
															"\t\t\t\t  \"required-medium-kind\",",
															"\t\t\t\t  \"wavelength-min-list\",\t",
															"\t\t\t\t  \"wavelength-max-list\",",
															"\t\t\t\t  \"wavelength-grid-min\",",
															"\t\t\t\t  \"short-reach-mode-is-avail\",",
															"\t\t\t\t  \"eee-is-avail\",",
															"\t\t\t\t  \"unidirectional-operation-is-avail\",",
															"\t\t\t\t  \"rxlevel-low-threshold\",",
															"\t\t\t\t  \"rxlevel-high-threshold\",",
															"\t\t\t\t  \"temperature-low-threshold\",",
															"\t\t\t\t  \"temperature-high-threshold\",",
															"\t\t\t\t  \"configuration-of-number-of-bip-errors-per-ses-is-avail\",",
															"\t\t\t\t  \"admin-shut-down-is-avail\",",
															"\t\t\t\t  \"isolation-is-avail\",",
															"\t\t\t\t  \"supported-loop-back-kind-list\",",
															"\t\t\t\t  \"maintenance-timer-range\",",
															"\t\t\t\t  \"supported-alarm-list\",",
															"\t\t\t\t  \"performance-monitoring-is-avail\"",
															"\t\t\t\t]",
															"};",
															"pm.variables.set(\"schema\", WIRE_INTERFACE_CAPABILITY_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"\teval(SettingTheRequestVariables)();",
															"\tCouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"\tCouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"\tpm.test(\"CouldInputBeLoaded\", function () {",
															"\t\tpm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"\t\tpm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"\t});",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"\tattributeUnterTest, contentType,",
															"\tfilteredDepth, filteredFields, requestBody) {",
															"\tpm.test(\"IsValueOfClassUnderTestCorrect\", function () {",
															"\t\tpm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"\t\t\t\"current-problems\", \"current-performance\",",
															"\t\t\t\"historical-performances\"]);",
															"\t});",
															"\tpm.test(\"IsValueOfDatatypeUnderTestCorrect\", function () {",
															"\t\tpm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function () {",
															"\t\tpm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"\t});",
															"\tpm.test(\"IsValueOfAttributeUnderTestCorrect\", function () {",
															"\t\tpm.expect(attributeUnterTest).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfContentTypeCorrect\", function () {",
															"\t\tpm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"\t});",
															"\tpm.test(\"IsValueOfFilteredDepthCorrect\", function () {",
															"\t\tpm.expect(filteredDepth).to.be.a(\"number\");",
															"\t});",
															"\tpm.test(\"IsValueOfFilteredFieldsCorrect\", function () {",
															"\t\tpm.expect(filteredFields).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfRequestBodyCorrect\", function () {",
															"\t\tpm.expect(requestBody).to.be.a(\"string\");",
															"\t});",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"\tpm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"\t\tpm.expect(success).to.be.true;",
															"\t});",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ConfigurationCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n----------------Checking WireInterfaceConfiguration for Completeness------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ConfigurationCompleteness",
															"* ",
															"* This Request is for validating WireInterface Configuration Objects against definition ",
															"* WireInterface_2.0.0-tsp.200123.1000",
															"* as it can be found on https://github.com/openBackhaul/wireInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Configuration class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"\tvar configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputBeLoaded(capability, configuration, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"\t\t\t\t\t\t\t\t\t\t\t// \"status\", \"current-problems\", \"current-performance\" ",
															"\t\t\t\t\t\t\t\t\t\t\t// or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"\tKEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"\tFILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let WIRE_INTERFACE_CONFIGURATION_SCHEMA = {\t",
															"\t\"type\": \"object\",",
															"\t\"properties\": {",
															"\t\t\"interface-name\": \t\t\t\t{ \"type\": \"string\" },",
															"\t\t\"interface-is-on\": \t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"remote-wire-interface-name\": \t{ \"type\": \"string\" },",
															"\t    \"transceiver-is-on-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\":                    { \"type\": \"boolean\"\t}",
															"\t\t}, \t   ",
															"\t\t\"auto-pmd-negotiation-is-on\": \t{ \"type\": \"boolean\" },",
															"\t\t\"fixed-pmd-kind\": \t\t\t\t{ \"type\": \"string\" },",
															"\t\t\"auto-negotiation-pmd-list\": \t{",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\":                    { \"type\": \"string\" }",
															"\t\t},\t\t\t",
															"\t\t\"auto-signal-ordering-is-on\": \t{ \"type\": \"boolean\" },",
															"\t\t\"fixed-signal-ordering-kind\": \t{ \"enum\": [",
															"\t\t\t\t\"wire-interface-2-0:SIGNAL_ORDERING_KIND_TYPE_MDI\",",
															"\t\t\t\t\"wire-interface-2-0:SIGNAL_ORDERING_KIND_TYPE_MDI_X\",",
															"\t\t\t\t\"wire-interface-2-0:SIGNAL_ORDERING_KIND_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t]",
															"\t\t},",
															"\t\t\"wavelength-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\":                    { \"type\": \"number\" }",
															"\t\t},",
															"\t\t\"rx-sync-preference\": \t\t\t{ \"enum\": [",
															"\t\t\t\t\"wire-interface-2-0:RX_SYNC_PREFERENCE_TYPE_AUTO_MULTIPORT_DEVICE\",",
															"\t\t\t\t\"wire-interface-2-0:RX_SYNC_PREFERENCE_TYPE_AUTO_SINGLE_PORT_DEVICE\",",
															"\t\t\t\t\"wire-interface-2-0:RX_SYNC_PREFERENCE_TYPE_MANUAL_MASTER\",",
															"\t\t\t\t\"wire-interface-2-0:RX_SYNC_PREFERENCE_TYPE_MANUAL_SLAVE\",",
															"\t\t\t\t\"wire-interface-2-0:RX_SYNC_PREFERENCE_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t]",
															"\t\t},",
															"\t\t\"short-reach-mode-is-on\": \t\t{ \"type\": \"boolean\" },",
															"\t\t\"eee-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"unidirectional-operation-is-on\": { \"type\": \"boolean\" },",
															"\t\t\"number-of-bip-errors-per-ses\":\t{ \"type\": \"number\" },",
															"\t\t\"restart-pmd-negotiation-is-on\":{ \"type\": \"boolean\" },",
															"\t\t\"isolation-is-on\": \t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"loop-back-kind-on\": \t\t\t{ \"enum\": [",
															"\t\t\t\t\"wire-interface-2-0:LOOP_BACK_TYPE_NONE\",",
															"\t\t\t\t\"wire-interface-2-0:LOOP_BACK_TYPE_BACK_TO_EXTERNAL\",",
															"\t\t\t\t\"wire-interface-2-0:LOOP_BACK_TYPE_BACK_TO_INTERNAL\",",
															"\t\t\t\t\"wire-interface-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t]",
															"\t\t},",
															"\t\t\"maintenance-timer\": \t\t\t{ \"type\": \"number\" },",
															" \t\t\"problem-kind-severity-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"    \t\t\t\t\"problem-kind-name\":\t{ \"type\": \"string\" },",
															"    \t\t\t\t\"problem-kind-severity\": { \"enum\": [",
															"\t\t\t\t\t\t\t\"wire-interface-2-0:SEVERITY_TYPE_NON_ALARMED\",",
															"\t\t\t\t\t\t\t\"wire-interface-2-0:SEVERITY_TYPE_WARNING\",",
															"\t\t\t\t\t\t\t\"wire-interface-2-0:SEVERITY_TYPE_MINOR\",",
															"\t\t\t\t\t\t\t\"wire-interface-2-0:SEVERITY_TYPE_MAJOR\",",
															"\t\t\t\t\t\t\t\"wire-interface-2-0:SEVERITY_TYPE_CRITICAL\",",
															"\t\t\t\t\t\t\t\"wire-interface-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t   ]",
															"    \t\t\t\t}",
															"\t\t\t    },",
															"\t\t\t    \"required\": [\"problem-kind-name\",",
															"\t\t\t                    \"problem-kind-severity\"",
															"\t\t\t    ]",
															"\t\t\t}    ",
															"\t\t}, \t\t\t",
															"\t\t\"performance-monitoring-is-on\": { \"type\": \"boolean\" }",
															"\t},",
															"\t\"required\": [ \"interface-name\", ",
															"\t\t\t\t\t\"interface-is-on\",",
															"\t\t\t\t\t\"remote-wire-interface-name\",",
															"\t\t\t\t\t\"transceiver-is-on-list\",\t",
															"\t\t\t\t\t\"auto-pmd-negotiation-is-on\",",
															"\t\t\t\t\t\"fixed-pmd-kind\",",
															"\t\t\t\t\t\"auto-negotiation-pmd-list\",",
															"\t\t\t\t\t\"auto-signal-ordering-is-on\",",
															"\t\t\t\t\t\"fixed-signal-ordering-kind\",",
															"\t\t\t\t\t\"wavelength-list\",\t",
															"\t\t\t\t\t\"rx-sync-preference\",",
															"\t\t\t\t\t\"short-reach-mode-is-on\",",
															"\t\t\t\t\t\"eee-is-on\",",
															"\t\t\t\t\t\"unidirectional-operation-is-on\",",
															"\t\t\t\t\t\"number-of-bip-errors-per-ses\",",
															"\t\t\t\t\t\"restart-pmd-negotiation-is-on\",",
															"\t\t\t\t\t\"isolation-is-on\",",
															"\t\t\t\t\t\"loop-back-kind-on\",",
															"\t\t\t\t\t\"maintenance-timer\",",
															"\t\t\t\t\t\"problem-kind-severity-list\",",
															"\t\t\t\t\t\"performance-monitoring-is-on\"",
															"\t\t\t\t ]",
															"};",
															"",
															"try {",
															"    if (capability[\"supported-alarm-list\"][0] === \"Supported alarms not yet defined.\") {",
															"        pm.variables.set(\"schemaToBeShortened\", WIRE_INTERFACE_CONFIGURATION_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"problem-kind-severity-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        WIRE_INTERFACE_CONFIGURATION_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"        CouldWireInterfaceConfigurationBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldWireInterfaceConfigurationBeShortened(false);",
															"}",
															"",
															"try {",
															"    if (capability[\"auto-pmd-negotiation-is-avail\"] === false) {",
															"        pm.variables.set(\"schemaToBeShortened\", WIRE_INTERFACE_CONFIGURATION_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"auto-negotiation-pmd-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        WIRE_INTERFACE_CONFIGURATION_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"        CouldWireInterfaceConfigurationBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldWireInterfaceConfigurationBeShortened(false);",
															"}",
															"",
															"try {",
															"    if (configuration[\"auto-pmd-negotiation-is-on\"] === true) {",
															"        pm.variables.set(\"schemaToBeShortened\", WIRE_INTERFACE_CONFIGURATION_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"fixed-pmd-kind\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        WIRE_INTERFACE_CONFIGURATION_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"        CouldWireInterfaceConfigurationBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldWireInterfaceConfigurationBeShortened(false);",
															"}",
															"",
															"pm.variables.set(\"schema\", WIRE_INTERFACE_CONFIGURATION_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"\teval(SettingTheRequestVariables)();",
															"\tCouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"\tCouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputBeLoaded(capability, configuration, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"\t\tpm.expect(configuration).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"\tattributeUnterTest, contentType,",
															"\tfilteredDepth, filteredFields, requestBody) {",
															"\tpm.test(\"IsValueOfClassUnderTestCorrect\", function () {",
															"\t\tpm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"\t\t\t\"current-problems\", \"current-performance\",",
															"\t\t\t\"historical-performances\"]);",
															"\t});",
															"\tpm.test(\"IsValueOfDatatypeUnderTestCorrect\", function () {",
															"\t\tpm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function () {",
															"\t\tpm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"\t});",
															"\tpm.test(\"IsValueOfAttributeUnderTestCorrect\", function () {",
															"\t\tpm.expect(attributeUnterTest).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfContentTypeCorrect\", function () {",
															"\t\tpm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"\t});",
															"\tpm.test(\"IsValueOfFilteredDepthCorrect\", function () {",
															"\t\tpm.expect(filteredDepth).to.be.a(\"number\");",
															"\t});",
															"\tpm.test(\"IsValueOfFilteredFieldsCorrect\", function () {",
															"\t\tpm.expect(filteredFields).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfRequestBodyCorrect\", function () {",
															"\t\tpm.expect(requestBody).to.be.a(\"string\");",
															"\t});",
															"}",
															"",
															"function CouldWireInterfaceConfigurationBeShortened(success) {",
															"    pm.test(\"CouldWireInterfaceConfigurationBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"\tpm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"\t\tpm.expect(success).to.be.true;",
															"\t});",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "StatusCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------------Checking WireInterfaceStatus for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* StatusCompleteness",
															"* ",
															"* This Request is for validating WireInterface Status Objects against definition ",
															"* WireInterface_2.0.0-tsp.200123.1000",
															"* as it can be found on https://github.com/openBackhaul/wireInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Status class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"\tvar SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"\tCouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"\tCouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"status\";          // choose from \"pac\", \"capability\", \"configuration\", ",
															"\t\t\t\t\t\t\t\t\t\t\t// \"status\", \"current-problems\", \"current-performance\" ",
															"\t\t\t\t\t\t\t\t\t\t\t// or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"\tKEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"\tFILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let WIRE_INTERFACE_STATUS_SCHEMA = {",
															"\t\"type\": \"object\",",
															"\t\"properties\": {",
															"\t    \"interface-status\":\t{ \"enum\": [",
															"    \t\t\t\t\t\t\t\"wire-interface-2-0:INTERFACE_STATUS_TYPE_UP\", ",
															"    \t\t\t\t\t\t\t\"wire-interface-2-0:INTERFACE_STATUS_TYPE_DOWN\", ",
															"    \t\t\t\t\t\t\t\"wire-interface-2-0:INTERFACE_STATUS_TYPE_TESTING\", ",
															"    \t\t\t\t\t\t\t\"wire-interface-2-0:INTERFACE_STATUS_TYPE_UNKNOWN\", ",
															"    \t\t\t\t\t\t\t\"wire-interface-2-0:INTERFACE_STATUS_TYPE_DORMANT\", ",
															"    \t\t\t\t\t\t\t\"wire-interface-2-0:INTERFACE_STATUS_TYPE_NOT_PRESENT\", ",
															"    \t\t\t\t\t\t\t\"wire-interface-2-0:INTERFACE_STATUS_TYPE_LOWER_LAYER_DOWN\",",
															"    \t\t\t\t\t\t\t\"wire-interface-2-0:INTERFACE_STATUS_TYPE_ADMIN_DOWN\", ",
															"    \t\t\t\t\t\t\t\"wire-interface-2-0:INTERFACE_STATUS_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t      ]",
															"\t\t},",
															"\t\t\"receive-signal-is-detected-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": \t\t\t        { \"type\": \"boolean\" }",
															"\t\t},",
															"\t\t\"pmd-negotiation-state\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:PMD_NEGOTIATION_STATE_TYPE_NONE\", ",
															"\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:PMD_NEGOTIATION_STATE_TYPE_DISABLED\", ",
															"\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:PMD_NEGOTIATION_STATE_TYPE_ENABLED\", ",
															"\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:PMD_NEGOTIATION_STATE_TYPE_IN_PROGRESS\", ",
															"\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:PMD_NEGOTIATION_STATE_TYPE_COMPLETE\", ",
															"\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:PMD_NEGOTIATION_STATE_TYPE_FAILED\", ",
															"\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:PMD_NEGOTIATION_STATE_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t   ]",
															"\t\t},",
															"\t\t\"pmd-is-up\": \t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"signal-ordering-kind-cur\":\t{ \"enum\": [ \t\t\t",
															"\t\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:SIGNAL_ORDERING_KIND_TYPE_MDI\", ",
															"\t\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:SIGNAL_ORDERING_KIND_TYPE_MDI_X\", ",
															"\t\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:SIGNAL_ORDERING_KIND_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t  ]",
															"\t\t},",
															"\t    \"pmd-kind-cur\":                  { \"type\": \"string\" },",
															"\t\t\"rx-sync-role\": { \"enum\": [ \t\t\t",
															"\t\t\t\t\t\t\t\"wire-interface-2-0:RX_SYNC_ROLE_TYPE_MASTER\", ",
															"\t\t\t\t\t\t\t\"wire-interface-2-0:RX_SYNC_ROLE_TYPE_SLAVE\", ",
															"\t\t\t\t\t\t\t\"wire-interface-2-0:RX_SYNC_ROLE_TYPE_FAULT\", ",
															"\t\t\t\t\t\t\t\"wire-interface-2-0:RX_SYNC_ROLE_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t  ]",
															"\t\t},",
															"\t\t\"eee-is-up\": \t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"link-is-up\": \t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"link-is-idle\": \t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"loop-back-kind-up\": { \"enum\": [ \t\t\t",
															"\t\t\t\t\t\t\t\t\"wire-interface-2-0:LOOP_BACK_TYPE_NONE\", ",
															"\t\t\t\t\t\t\t\t\"wire-interface-2-0:LOOP_BACK_TYPE_EXTERNAL\",",
															"\t\t\t\t\t\t\t\t\"wire-interface-2-0:LOOP_BACK_TYPE_INTERNAL\",",
															"\t\t\t\t\t\t\t\t\"wire-interface-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t   ]",
															"\t\t},",
															"\t\t\"tx-level-cur\": \t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"rx-level-cur-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": \t\t\t\t    { \"type\": \"number\" }",
															"\t\t},",
															"\t\t\"performance-monitoring-is-up\": { \"type\": \"boolean\" }",
															"\t},",
															"\t\"required\": [ \"interface-status\", ",
															"    \t\t\t\t  \"receive-signal-is-detected-list\",",
															"    \t\t\t\t  \"pmd-negotiation-state\", ",
															"    \t\t\t\t  \"pmd-is-up\", ",
															"    \t\t\t\t  \"signal-ordering-kind-cur\",",
															"    \t\t\t\t  \"pmd-kind-cur\",",
															"    \t\t\t\t  \"rx-sync-role\",",
															"    \t\t\t\t  \"eee-is-up\", ",
															"    \t\t\t\t  \"link-is-up\", ",
															"    \t\t\t\t  \"link-is-idle\",",
															"    \t\t\t\t  \"loop-back-kind-up\",",
															"    \t\t\t\t  \"tx-level-cur\", ",
															"    \t\t\t\t  \"rx-level-cur-list\",",
															"    \t\t\t\t  \"performance-monitoring-is-up\"",
															"\t]",
															"};",
															"pm.variables.set(\"schema\", WIRE_INTERFACE_STATUS_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"\teval(SettingTheRequestVariables)();",
															"\tCouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"\tCouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"\tpm.test(\"CouldInputBeLoaded\", function () {",
															"\t\tpm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"\t\tpm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"\t});",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"\tattributeUnterTest, contentType,",
															"\tfilteredDepth, filteredFields, requestBody) {",
															"\tpm.test(\"IsValueOfClassUnderTestCorrect\", function () {",
															"\t\tpm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"\t\t\t\"current-problems\", \"current-performance\",",
															"\t\t\t\"historical-performances\"]);",
															"\t});",
															"\tpm.test(\"IsValueOfDatatypeUnderTestCorrect\", function () {",
															"\t\tpm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function () {",
															"\t\tpm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"\t});",
															"\tpm.test(\"IsValueOfAttributeUnderTestCorrect\", function () {",
															"\t\tpm.expect(attributeUnterTest).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfContentTypeCorrect\", function () {",
															"\t\tpm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"\t});",
															"\tpm.test(\"IsValueOfFilteredDepthCorrect\", function () {",
															"\t\tpm.expect(filteredDepth).to.be.a(\"number\");",
															"\t});",
															"\tpm.test(\"IsValueOfFilteredFieldsCorrect\", function () {",
															"\t\tpm.expect(filteredFields).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfRequestBodyCorrect\", function () {",
															"\t\tpm.expect(requestBody).to.be.a(\"string\");",
															"\t});",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"\tpm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"\t\tpm.expect(success).to.be.true;",
															"\t});",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentProblemsCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------Checking WireInterfaceCurrentProblems for Completeness-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* CurrentProblemsCompleteness",
															"* ",
															"* This Request is for validating WireInterface CurrentProblems Objects against definition ",
															"* WireInterface_2.0.0-tsp.200123.1000",
															"* as it can be found on https://github.com/openBackhaul/wireInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the CurrentProblems class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"current-problems\"; // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                             // \"status\", \"current-problems\", \"current-performance\" ",
															"                                             // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let WIRE_INTERFACE_CURRENT_PROBLEMS_SCHEMA = {",
															"\t\"type\": \"object\",",
															"\t\"properties\": {",
															"\t\t\"current-problem-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": { ",
															"\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\"problem-name\": \t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"sequence-number\": \t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\"timestamp\": \t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"problem-severity\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:SEVERITY_TYPE_NON_ALARMED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:SEVERITY_TYPE_WARNING\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:SEVERITY_TYPE_MINOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:SEVERITY_TYPE_MAJOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:SEVERITY_TYPE_CRITICAL\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t  ]",
															"\t\t\t\t\t}",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"problem-name\", ",
															"\t\t\t\t\t\t\t    \"sequence-number\",",
															"\t\t\t\t\t\t\t    \"timestamp\",",
															"\t\t\t\t\t\t\t    \"problem-severity\"\t",
															"\t\t\t\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-current-problems\": \t\t\t{ \"type\": \"number\" },",
															"\t\t\"time-of-latest-change\": \t\t\t\t{ \"type\": \"string\" }",
															"\t},",
															"\t\"required\": [ \"current-problem-list\",",
															"\t                \"number-of-current-problems\",",
															"\t                \"time-of-latest-change\"",
															"\t]",
															"};",
															"",
															"try {",
															"    if (capability[\"supported-alarm-list\"][0] === \"Supported alarms not yet defined.\") {",
															"        pm.variables.set(\"schemaToBeShortened\", WIRE_INTERFACE_CURRENT_PROBLEMS_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"current-problem-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        WIRE_INTERFACE_CURRENT_PROBLEMS_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"        CouldWireInterfaceCurrentProblemsBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldWireInterfaceCurrentProblemsBeShortened(false);",
															"}",
															"",
															"pm.variables.set(\"schema\", WIRE_INTERFACE_CURRENT_PROBLEMS_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"    attributeUnterTest, contentType,",
															"    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function () {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"            \"current-problems\", \"current-performance\",",
															"            \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function () {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function () {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function () {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function () {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function () {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function () {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function () {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldWireInterfaceCurrentProblemsBeShortened(success) {",
															"    pm.test(\"CouldWireInterfaceCurrentProblemsBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentPerformanceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------Checking WireInterfaceCurrentPerformance for Completeness----------------\");",
															"/****************************************************************************************",
															"* ",
															"* CurrentPerformanceCompleteness",
															"* ",
															"* This Request is for validating WireInterface CurrentPerformance Objects against definition ",
															"* WireInterface_2.0.0-tsp.200123.1000",
															"* as it can be found on https://github.com/openBackhaul/wireInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the CurrentPerformance class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"current-performance\"; // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                                // \"status\", \"current-problems\", \"current-performance\" ",
															"                                                // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let WIRE_INTERFACE_CURRENT_PERFORMANCE_SCHEMA = {",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"current-performance-data-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": { ",
															"\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\"performance-data\": {",
															"\t\t\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\"es\": \t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"ses\": \t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"symbol-error-during-carrier\": \t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"low-power-idle-transmitter-ms\":{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"low-power-idle-receiver-ms\": \t{ \"type\": \"number\" }",
															"\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\"required\": [ \"es\", ",
															"\t\t\t\t\t\t\t\t\t\t\"ses\",",
															"\t\t\t\t\t\t\t\t\t\t\"symbol-error-during-carrier\",\t",
															"\t\t\t\t\t\t\t\t\t\t\"low-power-idle-transmitter-ms\",",
															"\t\t\t\t\t\t\t\t\t\t\"low-power-idle-receiver-ms\"",
															"\t\t\t\t\t\t\t\t\t ]\t\t",
															"\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\"timestamp\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\"suspect-interval-flag\": \t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\t\t\"elapsed-time\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\"scanner-id\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\"granularity-period\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t \"wire-interface-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t \"wire-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t \"wire-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t \"wire-interface-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t\t\t}",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"performance-data\",",
															"    \t\t\t\t\t\t\t\"timestamp\",",
															"    \t\t\t\t\t\t\t\"suspect-interval-flag\",",
															"    \t\t\t\t\t\t\t\"elapsed-time\",",
															"    \t\t\t\t\t\t\t\"scanner-id\",",
															"    \t\t\t\t\t\t\t\"granularity-period\"",
															"\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-current-performance-sets\":\t\t    { \"type\": \"number\" }",
															"\t},",
															"\t\"required\":\t[ \"current-performance-data-list\",",
															"\t                \"number-of-current-performance-sets\"",
															"\t]",
															"};",
															"",
															"try {",
															"    if (capability[\"performance-monitoring-is-avail\"] === false) {",
															"        pm.variables.set(\"schemaToBeShortened\", WIRE_INTERFACE_CURRENT_PERFORMANCE_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"current-performance-data-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        WIRE_INTERFACE_CURRENT_PERFORMANCE_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"        CouldWireInterfaceCurrentPerformanceBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldWireInterfaceCurrentPerformanceBeShortened(false);",
															"}",
															"pm.variables.set(\"schema\", WIRE_INTERFACE_CURRENT_PERFORMANCE_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"    attributeUnterTest, contentType,",
															"    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function () {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"            \"current-problems\", \"current-performance\",",
															"            \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function () {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function () {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function () {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function () {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function () {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function () {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function () {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldWireInterfaceCurrentPerformanceBeShortened(success) {",
															"    pm.test(\"CouldWireInterfaceCurrentPerformanceBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "HistoricalPerformancesCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n------------Checking WireInterfaceHistoricalPerformances for Completeness-------------\");",
															"/*******************************************************************************",
															"* ",
															"* HistoricalPerformancesCompleteness",
															"* ",
															"* This Request is for validating WireInterface HistoricalPerformances Objects against definition ",
															"* WireInterface_2.0.0-tsp.200123.1000",
															"* as it can be found on https://github.com/openBackhaul/wireInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the HistoricalPerformances class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"*******************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"\tvar RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"\tvar SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"\tvar capability = pm.collectionVariables.get(\"capability\");",
															"\tCouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"\tCouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"historical-performances\"; // choose from \"pac\", \"capability\", \"configuration\", ",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t// \"status\", \"current-problems\", \"current-performance\" ",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t// or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"\tKEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"\tFILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let WIRE_INTERFACE_HISTORICAL_PERFORMANCES_SCHEMA = {",
															"\t\"type\": \"object\",",
															"\t\"properties\": {",
															"\t\t\"historical-performance-data-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": { ",
															"\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\"performance-data\": {",
															"\t\t\t\t\t\t\"type\": \"object\", ",
															"\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\"es\": \t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"ses\": \t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"symbol-error-during-carrier\": \t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"low-power-idle-transmitter-ms\":{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"low-power-idle-receiver-ms\": \t{ \"type\": \"number\" }",
															"\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\"required\": [ \"es\", ",
															"\t\t\t\t\t\t\t\t\t    \"ses\",",
															"\t\t\t\t\t\t\t\t\t    \"symbol-error-during-carrier\",\t",
															"\t\t\t\t\t\t\t\t    \t\"low-power-idle-transmitter-ms\",",
															"\t\t\t\t\t\t\t\t\t    \"low-power-idle-receiver-ms\"",
															"\t\t\t\t\t\t\t\t\t  ]\t",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"suspect-interval-flag\": \t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\t\"history-data-id\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"period-end-time\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"granularity-period\":{ \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"wire-interface-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t   ]",
															"\t\t\t\t\t}",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"performance-data\",",
															"\t\t\t\t\t\t\t    \"suspect-interval-flag\",",
															"\t\t\t\t\t\t\t    \"history-data-id\",",
															"\t\t\t\t\t\t\t    \"period-end-time\",",
															"\t\t\t\t\t\t\t    \"granularity-period\"",
															"\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-historical-performance-sets\":\t\t{ \"type\": \"number\" },",
															"\t\t\"time-of-latest-change\": \t\t\t\t        { \"type\": \"string\" }",
															"\t},",
															"\t\"required\":\t[ \"historical-performance-data-list\",",
															"\t                \"number-of-historical-performance-sets\",",
															"\t                \"time-of-latest-change\"",
															"\t]",
															"};",
															"try {",
															"\tif (capability[\"performance-monitoring-is-avail\"] === false) {",
															"\t\tpm.variables.set(\"schemaToBeShortened\", WIRE_INTERFACE_HISTORICAL_PERFORMANCES_SCHEMA);",
															"\t\tpm.variables.set(\"unRequiredAttribute\", \"historical-performance-data-list\");",
															"\t\teval(RemoveAttributeFromRequired)();",
															"\t\tWIRE_INTERFACE_HISTORICAL_PERFORMANCES_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"\t\tCouldWireInterfaceHistoricalPerformancesBeShortened(true);",
															"\t}",
															"} catch (error) {",
															"\tCouldWireInterfaceHistoricalPerformancesBeShortened(false);",
															"}",
															"pm.variables.set(\"schema\", WIRE_INTERFACE_HISTORICAL_PERFORMANCES_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"\teval(SettingTheRequestVariables)();",
															"\tCouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"\tCouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"\tpm.test(\"CouldInputBeLoaded\", function () {",
															"\t\tpm.expect(capability).to.be.an(\"object\");",
															"\t\tpm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"\t\tpm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"\t\tpm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"\t\tpm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"\t});",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"\tattributeUnterTest, contentType,",
															"\tfilteredDepth, filteredFields, requestBody) {",
															"\tpm.test(\"IsValueOfClassUnderTestCorrect\", function () {",
															"\t\tpm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"\t\t\t\"current-problems\", \"current-performance\",",
															"\t\t\t\"historical-performances\"]);",
															"\t});",
															"\tpm.test(\"IsValueOfDatatypeUnderTestCorrect\", function () {",
															"\t\tpm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function () {",
															"\t\tpm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"\t});",
															"\tpm.test(\"IsValueOfAttributeUnderTestCorrect\", function () {",
															"\t\tpm.expect(attributeUnterTest).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfContentTypeCorrect\", function () {",
															"\t\tpm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"\t});",
															"\tpm.test(\"IsValueOfFilteredDepthCorrect\", function () {",
															"\t\tpm.expect(filteredDepth).to.be.a(\"number\");",
															"\t});",
															"\tpm.test(\"IsValueOfFilteredFieldsCorrect\", function () {",
															"\t\tpm.expect(filteredFields).to.be.a(\"string\");",
															"\t});",
															"\tpm.test(\"IsValueOfRequestBodyCorrect\", function () {",
															"\t\tpm.expect(requestBody).to.be.a(\"string\");",
															"\t});",
															"}",
															"",
															"function CouldWireInterfaceHistoricalPerformancesBeShortened(success) {",
															"\tpm.test(\"CouldWireInterfaceHistoricalPerformancesBeShortened\", function () {",
															"\t\tpm.expect(success).to.be.true;",
															"\t});",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"\tpm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"\t\tpm.expect(success).to.be.true;",
															"\t});",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NetworkRestoration",
									"item": [
										{
											"name": "SettingOriginalInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------------Restoring the Original Interface Configuration Again-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting the Original Interface Configuration Again",
															"* ",
															"* This Request is for restoring the configuration from before the interface validation ",
															"* on the device.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"        ",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration",
															"                                                   );",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    completeClassName = moduleUnderTest + \":\" + technologyUnderTest + \"-configuration\";",
															"    configuration = AddHeadlineToDataObject(configuration, completeClassName);",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched back on original values.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched back on original values.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointWireInterfaceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------ReversalPoint of WireInterface Validation for Completeness---------------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointWireInterfaceCompleteness\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointWireInterfaceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-----------------------Terminating WireInterfaceCompleteness--------------------------\");",
															"/****************************************************************************************",
															" * ",
															" * ExitPoint",
															" * ",
															" * This Request is for clearing the Collection variables and terminating the TestCase",
															" * ",
															" ****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															" * Required Input Parameters",
															" ****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Clearing all Collection Variables for Terminating the TestCase",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Setting up Local Variables and Preparing the Request",
															" ****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({",
															"        key: \"Accept\",",
															"        value: \"application/json\"",
															"    });",
															"} catch (error) {}",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, controller, indexOfDeviceUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function() {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function() {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "WireInterfaceConfiguration",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n\\n============================ WireInterfaceConfiguration.1 =============================\");",
															"/****************************************************************************************",
															"* ",
															"* RequestCollection for validating Configuration of WireInterface Objects against definition ",
															"* ",
															"*                   WireInterface_2.0.0-tsp.200123.1000",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/wireInterface/tree/tsp",
															"* ",
															"****************************************************************************************/",
															" ",
															"",
															"/****************************************************************************************",
															"* Manual Definition of the Mode of Operation of this TestCase",
															"* ",
															"* It is recommended to apply this TestCase on devices on the local (not remote) site",
															"* of the microwave connection, otherwise the management connection might break and ",
															"* configurations, which are done during the validation, cannot be reversed.",
															"* ",
															"****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"one\"; // \"none\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"wire-interface-2-0:wire-interface-pac\"; // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"CONFIGURATION_VALIDATION_RESULTS = {};",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"pm.collectionVariables.set(\"configurationValidationResults\", CONFIGURATION_VALIDATION_RESULTS);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function () {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function () {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DefiningDummyValuesAndEvaluations()",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--Defining DummyValues and Evaluation Criteria in WireInterface Configuration Validation--\");",
															"/****************************************************************************************",
															"* ",
															"* Definition of DefiningDummyValuesAndEvaluations()",
															"*  ",
															"* Functions for Defining DummyValues and Evaluation Criteria in all WireInterface Configuration Validations.",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Provided Collection Variables ",
															"****************************************************************************************/",
															"class Attribute {",
															"    constructor(CreatingDummyValueAsaString,",
															"                    EvaluatingFeatureSupportAsaString,",
															"                    defaultValueForStandardEvaluation,",
															"                    EvaluatingResultAsaString) {",
															"        this.CreatingDummyValueAsaString = CreatingDummyValueAsaString;",
															"        this.EvaluatingFeatureSupportAsaString = EvaluatingFeatureSupportAsaString;",
															"        this.defaultValueForStandardEvaluation = defaultValueForStandardEvaluation;",
															"        this.EvaluatingResultAsaString = EvaluatingResultAsaString;",
															"    }",
															"}",
															"var attributes = [];",
															"",
															"var CreatingDummyValueAsaString;",
															"var EvaluatingFeatureSupportAsaString;",
															"var defaultValueForStandardEvaluation;",
															"var EvaluatingResultAsaString;",
															"var newAttribute;",
															"",
															"// interface-name",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of interface-name--------------------------\");",
															"",
															"        // Individual Values Definition ",
															"        var dummyValue = \"Dummy \" + String(Math.floor(Math.random() * 999));",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"interface-name\";",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"Interface name not yet defined.\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// interface-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of interface-is-on-----------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"interface-is-on\";",
															"",
															"        // Individual Values Definition ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try { ",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"admin-shut-down-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// remote-wire-interface-name",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------Checking Configuration of remote-wire-interface-name--------------------\");",
															"",
															"        // Individual Values Definition ",
															"        var dummyValue = \"Dummy \" + String(Math.floor(Math.random() * 999));",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"remote-wire-interface-name\";",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"Remote wire interface name not yet defined.\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// transceiver-is-on-list (Doesn't work, since list attributes can't be addressed)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n---------------------Checking Configuration of transceiver-is-on-list-------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"transceiver-is-on-list\";",
															"",
															"        // Individual Values Definition ",
															"        try {",
															"            let configuredTransceiverIsOnList = configuration[ATTRIBUTE_UNDER_TEST];",
															"            configuredTransceiverIsOnList[0] = !configuredTransceiverIsOnList[0];",
															"            var dummyValue = configuredTransceiverIsOnList;",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingResultAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                );",
															"    // attributes.push(newAttribute);",
															"}",
															"",
															"// auto-pmd-negotiation-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------Checking Configuration of auto-pmd-negotiation-is-on-----------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"auto-pmd-negotiation-is-on\";",
															"",
															"        // Individual Values Definition ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try { ",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"auto-pmd-negotiation-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// fixed-pmd-kind",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of fixed-pmd-kind-------------------------\");",
															"",
															"        try {",
															"            let supportedPmdKindNames = [];",
															"            for (let i = 0; i < capability[\"supported-pmd-kind-list\"].length; i++) {",
															"                let sampleName = capability[\"supported-pmd-kind-list\"][i][\"pmd-name\"];",
															"                supportedPmdKindNames.push(sampleName);",
															"            }",
															"            let configuredPmdKind = configuration[\"fixed-pmd-kind\"];",
															"            let configuredPmdKindIndex = supportedPmdKindNames.indexOf(configuredPmdKind);",
															"            let potentialDummyValues = supportedPmdKindNames;",
															"            if (configuredPmdKindIndex >= 0) {",
															"                potentialDummyValues.splice(configuredPmdKindIndex, 1);",
															"            }",
															"            if (potentialDummyValues.length === 0) {",
															"                potentialDummyValues = [\"No alternatives available\"];",
															"            }",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"            CouldDummyBeCreated(supportedPmdKindNames, configuredPmdKind,",
															"                                    configuredPmdKindIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue",
															"                                );",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"fixed-pmd-kind\";",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(supportedPmdKindNames, configuredPmdKind,",
															"                                        configuredPmdKindIndex,",
															"                                        potentialDummyValues,",
															"                                        dummyValueIndex,",
															"                                        dummyValue) {",
															"            pm.test(\"CouldsupportedPmdKindNamesBeRetrieved\", function () {",
															"                pm.expect(supportedPmdKindNames).to.be.an(\"array\");",
															"            });",
															"            pm.test(\"CouldconfiguredPmdKindNameBeRetrieved\", function () {",
															"                pm.expect(configuredPmdKind).to.be.a(\"string\");",
															"            });",
															"            pm.test(\"CouldconfiguredPmdKindIndexBeEvaluated\", function () {",
															"                pm.expect(configuredPmdKindIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldPotentialDummyValuesBeBuild\", function () {",
															"                pm.expect(potentialDummyValues).to.be.an(\"array\");",
															"                pm.expect(potentialDummyValues.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyValueIndexBeCalculated\", function () {",
															"                pm.expect(dummyValueIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// auto-negotiation-pmd-list  (Doesn't work, since list attributes can't be addressed)",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------------------Checking Configuration of auto-negotiation-pmd-list-------------------\");        ",
															"",
															"        try {",
															"            let supportedPmdKindNames = [];",
															"            for (let i = 0; i < capability[\"supported-pmd-kind-list\"].length; i++) {",
															"                let sampleName = capability[\"supported-pmd-kind-list\"][i][\"pmd-name\"];",
															"                supportedPmdKindNames.push(sampleName);",
															"            }",
															"",
															"            let configuredAutoNegotiationPmdList = configuration[\"auto-negotiation-pmd-list\"];",
															"            var dummyValue = configuredAutoNegotiationPmdList;",
															"",
															"            if ( configuredAutoNegotiationPmdList.length < supportedPmdKindNames.length ) {",
															"                for (let i = 0; i < supportedPmdKindNames.length; i++) {",
															"                    let sample = supportedPmdKindNames[i];",
															"                    if ( configuredAutoNegotiationPmdList.indexOf(sample) < 0 ) {",
															"                        dummyValue.push(sample);",
															"                    }",
															"                }",
															"            } else if ( configuredAutoNegotiationPmdList.length > 0 ) {",
															"                dummyValue.pop();",
															"            } else {",
															"                dummyValue = [\"No supported PMD kind names defined.\"]",
															"            }",
															"",
															"            CouldDummyBeCreated(supportedPmdKindNames, configuredAutoNegotiationPmdList,",
															"                                    dummyValue);",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"auto-negotiation-pmd-list\";",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(supportedPmdKindNames, configuredAutoNegotiationPmdList,",
															"                                        dummyValue) {",
															"            pm.test(\"CouldsupportedPmdKindNamesBeRetrieved\", function () {",
															"                pm.expect(supportedPmdKindNames).to.be.an(\"array\");",
															"            });",
															"            pm.test(\"CouldConfiguredAutoNegotiationPmdListBeRetrieved\", function () {",
															"                pm.expect(configuredAutoNegotiationPmdList).to.be.an(\"array\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.an(\"array\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"auto-negotiation-pmd-selection-is-avail\";",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingResultAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                );",
															"    // attributes.push(newAttribute);",
															"}",
															"",
															"// auto-signal-ordering-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------Checking Configuration of auto-signal-ordering-is-on-----------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"auto-signal-ordering-is-on\";",
															"",
															"        // Individual Values Definition ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try { ",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"auto-signal-ordering-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// fixed-signal-ordering-kind",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------Checking Configuration of fixed-signal-ordering-kind--------------------\");",
															"",
															"        try {",
															"            let supportedSignalOrders = capability[\"supported-signal-ordering-kind-list\"];",
															"            let configuredSignalOrder = configuration[\"fixed-signal-ordering-kind\"];",
															"            let configuredSignalOrderIndex = supportedSignalOrders.indexOf(configuredSignalOrder);",
															"            let potentialDummyValues = supportedSignalOrders;",
															"            if (configuredSignalOrderIndex >= 0) {",
															"                potentialDummyValues.splice(configuredSignalOrderIndex, 1);",
															"            }",
															"            if (potentialDummyValues.length === 0) {",
															"                potentialDummyValues = [\"wire-interface-2-0:SIGNAL_ORDERING_KIND_TYPE_MDI_X\"];",
															"            }",
															"",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"            CouldDummyBeCreated(supportedSignalOrders, configuredSignalOrder,",
															"                                    configuredSignalOrderIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue",
															"                                );",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"fixed-signal-ordering-kind\";",
															"",
															"        // Self Testing Function",
															"        function CouldDummyBeCreated(supportedSignalOrders, configuredSignalOrder,",
															"                                        configuredSignalOrderIndex,",
															"                                        potentialDummyValues,",
															"                                        dummyValueIndex,",
															"                                        dummyValue) {",
															"            pm.test(\"CouldsupportedSignalOrdersBeCreated\", function () {",
															"                pm.expect(supportedSignalOrders).to.be.an(\"array\");",
															"            });",
															"            pm.test(\"CouldconfiguredSignalOrderBeRetrieved\", function () {",
															"                pm.expect(configuredSignalOrder).to.be.a(\"string\");",
															"            });",
															"            pm.test(\"CouldconfiguredSignalOrderIndexBeEvaluated\", function () {",
															"                pm.expect(configuredSignalOrderIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldPotentialDummyValuesBeBuild\", function () {",
															"                pm.expect(potentialDummyValues).to.be.an(\"array\");",
															"                pm.expect(potentialDummyValues.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyValueIndexBeCalculated\", function () {",
															"                pm.expect(dummyValueIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try { ",
															"            var supportedSignalOrders = capability[\"supported-signal-ordering-kind-list\"];",
															"            if ( (supportedSignalOrders.length===1) ",
															"                    && (supportedSignalOrders[0]===\"wire-interface-2-0:SIGNAL_ORDERING_KIND_TYPE_NOT_YET_DEFINED\") ) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            }",
															"            CouldSupportedInformationRateBeRead(supportedSignalOrders, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        } catch (error) {",
															"            CouldSupportedInformationRateBeRead();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldSupportedInformationRateBeRead(supportedSignalOrders, capabilitiesAreIndicatingThatFeatureNotSupported) {",
															"            pm.test(\"CouldSupportedSignalOrdersBeRead\", function () {",
															"                pm.expect(supportedSignalOrders).to.be.an(\"array\");",
															"                pm.expect(capabilitiesAreIndicatingThatFeatureNotSupported).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"wire-interface-2-0:SIGNAL_ORDERING_KIND_TYPE_NOT_YET_DEFINED\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// wavelength-list (Doesn't work, since list attributes can't be addressed)",
															"{",
															"    // attributes.push(newAttribute);",
															"}",
															"",
															"// rx-sync-preference",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of rx-sync-preference------------------------\");",
															"",
															"        try {",
															"            let alternativeRxSyncPreferences = [\"wire-interface-2-0:RX_SYNC_PREFERENCE_TYPE_AUTO_MULTIPORT_DEVICE\",",
															"                                                    \"wire-interface-2-0:RX_SYNC_PREFERENCE_TYPE_AUTO_SINGLE_PORT_DEVICE\",",
															"                                                    \"wire-interface-2-0:RX_SYNC_PREFERENCE_TYPE_MANUAL_MASTER\",",
															"                                                    \"wire-interface-2-0:RX_SYNC_PREFERENCE_TYPE_MANUAL_SLAVE\",",
															"                                                    \"wire-interface-2-0:RX_SYNC_PREFERENCE_TYPE_NOT_YET_DEFINED\",",
															"                                                ];",
															"            let configuredRxSyncPreference = configuration[\"rx-sync-preference\"];",
															"            let configuredRxSyncPreferenceIndex = alternativeRxSyncPreferences.indexOf(configuredRxSyncPreference);",
															"            let potentialDummyValues = alternativeRxSyncPreferences;",
															"            if (configuredRxSyncPreferenceIndex >= 0) {",
															"                potentialDummyValues.splice(configuredRxSyncPreferenceIndex, 1);",
															"            }",
															"        ",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"",
															"            CouldDummyBeCreated(alternativeRxSyncPreferences, configuredRxSyncPreference,",
															"                                    configuredRxSyncPreferenceIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue",
															"                                );",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"rx-sync-preference\";",
															"",
															"        // Self Testing Function",
															"        function CouldDummyBeCreated(alternativeRxSyncPreferences, configuredRxSyncPreference,",
															"                                        configuredRxSyncPreferenceIndex,",
															"                                        potentialDummyValues,",
															"                                        dummyValueIndex,",
															"                                        dummyValue) {",
															"            pm.test(\"CouldalternativeRxSyncPreferencesBeCreated\", function () {",
															"                pm.expect(alternativeRxSyncPreferences).to.be.an(\"array\");",
															"            });",
															"            pm.test(\"CouldconfiguredRxSyncPreferenceBeRetrieved\", function () {",
															"                pm.expect(configuredRxSyncPreference).to.be.a(\"string\");",
															"            });",
															"            pm.test(\"CouldconfiguredRxSyncPreferenceIndexBeEvaluated\", function () {",
															"                pm.expect(configuredRxSyncPreferenceIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldPotentialDummyValuesBeBuild\", function () {",
															"                pm.expect(potentialDummyValues).to.be.an(\"array\");",
															"                pm.expect(potentialDummyValues.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyValueIndexBeCalculated\", function () {",
															"                pm.expect(dummyValueIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try { ",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"configuration-of-rx-sync-preference-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"wire-interface-2-0:RX_SYNC_PREFERENCE_TYPE_NOT_YET_DEFINED\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// short-reach-mode-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------------------Checking Configuration of short-reach-mode-is-on--------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"short-reach-mode-is-on\";",
															"",
															"        // Individual Values Definition ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try { ",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"short-reach-mode-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// eee-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n---------------------------Checking Configuration of eee-is-on--------------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"eee-is-on\";",
															"",
															"        // Individual Values Definition ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try { ",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"eee-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// unidirectional-operation-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----------------Checking Configuration of unidirectional-operation-is-on----------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"unidirectional-operation-is-on\";",
															"",
															"        // Individual Values Definition ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try { ",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"unidirectional-operation-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// number-of-bip-errors-per-ses",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------Checking Configuration of number-of-bip-errors-per-ses-----------------\");",
															"        ",
															"        try {",
															"            var dummyValue = 1 + Math.floor(Math.random() * 9);",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"number-of-bip-errors-per-ses\";",
															"",
															"        // Self Testing Function",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try { ",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"configuration-of-number-of-bip-errors-per-ses-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// restart-pmd-negotiation-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------Checking Configuration of restart-pmd-negotiation-is-on----------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"restart-pmd-negotiation-is-on\";",
															"",
															"        // Individual Values Definition ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// isolation-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of isolation-is-on-----------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"isolation-is-on\";",
															"",
															"        // Individual Values Definition ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try { ",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"isolation-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// loop-back-kind-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of loop-back-kind-on------------------------\");",
															"",
															"        try {",
															"            let supportedLoopBackKindList = capability[\"supported-loop-back-kind-list\"];",
															"            let loopBackKindOn = configuration[\"loop-back-kind-on\"];",
															"            let loopBackKindOnIndex = supportedLoopBackKindList.indexOf(loopBackKindOn);",
															"            let potentialDummyValues = supportedLoopBackKindList;",
															"            if (loopBackKindOnIndex >= 0) {",
															"                potentialDummyValues.splice(loopBackKindOnIndex, 1);",
															"            }",
															"            if (potentialDummyValues.length === 0) {",
															"                potentialDummyValues = [\"wire-interface-2-0:LOOP_BACK_TYPE_INTERNAL\"];",
															"            }",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"            CouldDummyBeCreated(supportedLoopBackKindList, loopBackKindOn, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"loop-back-kind-on\";",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(supportedLoopBackKindList, loopBackKindOn, dummyValue) {",
															"            pm.test(\"CouldDummyBeCreated\", function () {",
															"                pm.expect(supportedLoopBackKindList).to.be.an(\"array\");",
															"                pm.expect(loopBackKindOn).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var supportedLoopBackTypes = [];",
															"        try {",
															"            supportedLoopBackTypes = capability[\"supported-loop-back-kind-list\"];",
															"            var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"            if ( (supportedLoopBackTypes.length===1) ",
															"                    && ( (supportedLoopBackTypes[0]===\"wire-interface-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\")",
															"                            || (supportedLoopBackTypes[0]===\"wire-interface-2-0:LOOP_BACK_TYPE_NONE\") ) ) {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"            } else {",
															"                capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"            }",
															"            CouldFeaturesBeEvaluated(supportedLoopBackTypes, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        } catch (error) {",
															"            CouldFeaturesBeEvaluated(supportedLoopBackTypes, capabilitiesAreIndicatingThatFeatureNotSupported);",
															"        }",
															"        ",
															"        // Self Testing Functions",
															"        function CouldFeaturesBeEvaluated(supportedLoopBackTypes, capabilitiesAreIndicatingThatFeatureNotSupported) {",
															"            pm.test(\"CouldSupportedLoopBackTypesBeRead\", function () {",
															"                pm.expect(supportedLoopBackTypes).to.be.an(\"array\");",
															"                pm.expect(supportedLoopBackTypes.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldCapabilitiesAreIndicatingThatFeatureNotSupportedBeCalculated\", function () {",
															"                pm.expect(capabilitiesAreIndicatingThatFeatureNotSupported).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"wire-interface-2-0:LOOP_BACK_TYPE_NONE\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// maintenance-timer",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of maintenance-timer------------------------\");",
															"",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"maintenance-timer\";",
															"",
															"        try {",
															"            let maintenanceTimerRange = capability[\"maintenance-timer-range\"];",
															"            let currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
															"            if (maintenanceTimerRange === \"Range of the maintenance timer not yet defined.\") {",
															"                maintenanceTimerRange = \"0-0\";",
															"            }",
															"            var dummyValue = getRandomValues(maintenanceTimerRange, currentValue);",
															"            CouldDummyValueBeDefined(maintenanceTimerRange, currentValue, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeDefined();",
															"        }",
															"",
															"        // Functions",
															"        function getRandomValues(availableValues, currentValue) {",
															"            var randomValue = 0;",
															"            if (availableValues.includes(\"-\")) {",
															"                var rangeValues = availableValues.split(\"-\");",
															"                do {",
															"                    randomValue = getRandomValueFromAvailableValues(rangeValues[0], rangeValues[1]);",
															"                } while (randomValue === currentValue);",
															"            } else if (availableValues.includes(\",\")) {",
															"                var concreteValues = availableValues.split(\",\");",
															"                do {",
															"                    var randomIndex = getRandomValueFromAvailableValues(0, concreteValues.length);",
															"                    randomValue = concreteValues[randomIndex];",
															"                } while (randomValue === currentValue);",
															"            }",
															"            else {",
															"                randomValue = availableValues;",
															"            }",
															"            return parseInt(randomValue);",
															"        }",
															"",
															"        function getRandomValueFromAvailableValues(min, max) {",
															"            return Math.floor(Math.random() * (max - min) + min);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeDefined(maintenanceTimerRange, currentValue, dummyValue) {",
															"            pm.test(\"CouldAnAvailableConfigurationValueBeRead\", function () {",
															"                pm.expect(maintenanceTimerRange).to.be.a(\"string\");",
															"                pm.expect(maintenanceTimerRange).to.not.have.lengthOf(0);",
															"            });",
															"            pm.test(\"CouldDCurrentValueBeRead\", function () {",
															"                pm.expect(currentValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(dummyValue).to.not.be.undefined;",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var supportedMaintenanceTimerRange = \"Range of the maintenance timer not yet defined.\";",
															"        try {",
															"            supportedMaintenanceTimerRange = capability[\"maintenance-timer-range\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        if ( supportedMaintenanceTimerRange === \"Range of the maintenance timer not yet defined.\" ) {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"        } else {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = -1;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// problem-kind-severity-list/problem-kind-severity",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n---------Checking Configuration of problem-kind-severity-list/problem-kind-severity--------\");",
															"        ",
															"        var DATATYPE_UNDER_TEST = \"problem-kind-severity-list\";",
															"        var DATATYPE_INDEX_UNDER_TEST = 0;",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"problem-kind-name\";",
															"        var ATTRIBUTE_UNDER_TEST = \"problem-kind-severity\";",
															"",
															"        var dummyValue;",
															"        try {",
															"            let currentValue;",
															"            currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"            if (currentValue !== \"wire-interface-2-0:SEVERITY_TYPE_MINOR\") {",
															"                dummyValue  = \"wire-interface-2-0:SEVERITY_TYPE_MINOR\";",
															"            } else {",
															"                dummyValue = \"wire-interface-2-0:SEVERITY_TYPE_MAJOR\";",
															"            }",
															"",
															"            keysOfDatatypeInstanceUnderTest[0].value",
															"                = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[0].key];",
															"        } catch (error) {",
															"            dummyValue = \"-1\";",
															"        }",
															"",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"",
															"        // Self Testing Function",
															"",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var supportedAlarmList = [];",
															"        var currentSeverityConfiguration;",
															"        try {",
															"            supportedAlarmList = capability[\"supported-alarm-list\"];",
															"            currentSeverityConfiguration = configuration[\"problem-kind-severity-list\"][0][\"problem-kind-severity\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported;",
															"        if ( (supportedAlarmList.length>0) ",
															"                && (supportedAlarmList[0]!==\"Supported alarms not yet defined.\")",
															"                && (currentSeverityConfiguration!==\"wire-interface-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\") ) {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        } else {",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = true;",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = \"wire-interface-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\";",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"// performance-monitoring-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------Checking Configuration of performance-monitoring-is-on------------------\");",
															"        ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"",
															"        try {",
															"            var dummyValue = !configuration[\"performance-monitoring-is-on\"];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"",
															"    EvaluatingFeatureSupport = () => {",
															"        var capabilitiesAreIndicatingThatFeatureNotSupported = false;",
															"        try { ",
															"            capabilitiesAreIndicatingThatFeatureNotSupported = !capability[\"performance-monitoring-is-avail\"];",
															"            CouldCapabilitiesBeRead(true);",
															"        } catch (error) {",
															"            CouldCapabilitiesBeRead(false);",
															"        }",
															"",
															"        // Self Testing Functions",
															"        function CouldCapabilitiesBeRead(success) {",
															"            pm.test(\"CouldCapabilitiesBeRead\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingFeatureSupportAsaString = ConvertingThisFunctionToString(EvaluatingFeatureSupport);",
															"",
															"    defaultValueForStandardEvaluation = false;",
															"",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString,",
															"                                    EvaluatingFeatureSupportAsaString,",
															"                                    defaultValueForStandardEvaluation,",
															"                                    EvaluatingResultAsaString,",
															"                                );",
															"}   attributes.push(newAttribute);",
															"",
															"pm.collectionVariables.set(\"attributes\", attributes);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function ConvertingThisFunctionToString(functionToBeConverted) {",
															"    let functionAsAString = String(functionToBeConverted);",
															"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
															"    return functionAsAString.slice(indexOfFirstCurly);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointWireInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------EntryPoint of WireInterface Validation of Configuration-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the WireInterfaceConfiguration TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].wireInterfaceList.length;",
															"    var maximumIndexOfLtpUnderTest;",
															"    ",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.min( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointWireInterfaceConfiguration\");",
															"        console.log(\"Proceeding with terminating WireInterface validation for Completeness.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Provided Collection Variables ",
															"****************************************************************************************/",
															"INITIAL_INDEX_OF_ATTRIBUTE_UNDER_TEST = 0;",
															"",
															"pm.collectionVariables.set(\"indexOfAttributeUnderTest\", INITIAL_INDEX_OF_ATTRIBUTE_UNDER_TEST);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "CollectionInformationLoading",
									"item": [
										{
											"name": "UploadingInterfaceCapability",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Capabilities-------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the Interface Capabilities",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Configuration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Configuration",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceStatus",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n------------------------------Uploading Interface Status----------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Status",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"status\";          // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Displaying the Collection Variables right before starting the validation",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NetworkPreparation",
									"item": [],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "AttributeConfiguration",
									"item": [
										{
											"name": "EntryPointWireAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the AttributeConfiguration Tests ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var attributes = pm.collectionVariables.get(\"attributes\");",
															"    var indexOfAttributeUnderTest = pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
															"    ",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    ",
															"    CouldTheInputBeLoaded(attributes, indexOfAttributeUnderTest, dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"        ",
															"    if ( indexOfAttributeUnderTest < attributes.length ) {",
															"        postman.setNextRequest();",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointWireAttributeConfiguration\");",
															"    }",
															"        ",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(attributes, indexOfAttributeUnderTest, dummyUri) {",
															"    pm.test(\"CouldTheAttributesBeLoaded\", function () {",
															"        pm.expect(attributes).to.be.an(\"array\");",
															"    });",
															"    pm.test(\"CouldIndexOfAttributeUnderTestBeLoaded\", function () {",
															"        pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"CouldTheDummyUriBeLoaded\", function () {",
															"        pm.expect(dummyUri).to.be.a(\"string\");",
															"        pm.expect(dummyUri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Writing",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Retrieving DummyCode",
															"****************************************************************************************/",
															"try {",
															"    var dummyCode = JSON.parse(pm.response.code);",
															"    var dummyErrorMessage = \"\";",
															"    if ( Math.floor(dummyCode/100) !== 2 ) {",
															"        var dummyErrorMessage = JSON.parse(pm.response.stream).errors.error[0][\"error-message\"];",
															"    }",
															"    CouldResponseBeRetrieved(dummyCode, dummyErrorMessage);",
															"} catch (error) {",
															"    CouldResponseBeRetrieved();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting Local Variables",
															"****************************************************************************************/   ",
															"pm.variables.set(\"dummyCode\", dummyCode);",
															"pm.variables.set(\"dummyErrorMessage\", dummyErrorMessage);",
															"",
															"    ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldResponseBeRetrieved(responseCode, responseErrorMessage) {",
															"    pm.test(\"CouldTheDummyCodeOfPuttingBeReceived\", function () {",
															"        pm.expect(responseCode).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"CouldTheErrorMessagePuttingBeComposed\", function () {",
															"        pm.expect(responseErrorMessage).to.be.a(\"string\");",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Writing",
															"* ",
															"* This Request is for PUTting an boolean attribute with the alternate value and",
															"* providing this value as dummyValueString to the local Variables.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfWritingAsaString = pm.environment.get(\"PreRequestOfWritingAsaString\");",
															"    eval(PreRequestOfWritingAsaString);",
															"    CouldPreRequestOfWritingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfWritingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfWritingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfWritingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Reading",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Reading",
															"* ",
															"* This Request is for GETting the value of the attributeUnderTest and providing it ",
															"* as ResultValue to the local Variables",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfReadingAsaString = pm.environment.get(\"PreRequestOfReadingAsaString\");",
															"    eval(PreRequestOfReadingAsaString);",
															"    CouldPreRequestOfReadingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfReadingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfReadingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfReadingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PostRequestOfReadingAsaString = pm.environment.get(\"PostRequestOfReadingAsaString\");",
															"    eval(PostRequestOfReadingAsaString);",
															"    CouldPostRequestOfReadingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPostRequestOfReadingBeExecuted();",
															"}",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPostRequestOfReadingBeExecuted(success) {",
															"    pm.test(\"CouldPostRequestOfReadingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Evaluating",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Evaluating",
															"* ",
															"* This Request compares resultValue with dummyValue.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfEvaluatingAsaString = pm.environment.get(\"PreRequestOfEvaluatingAsaString\");",
															"    var dummyCode = pm.variables.get(\"dummyCode\");",
															"    ",
															"    eval(PreRequestOfEvaluatingAsaString);",
															"",
															"    if ( Math.floor(dummyCode/100) !==2 ) {",
															"        postman.setNextRequest(\"ReversalPointWireAttributeConfiguration\");",
															"    }",
															"    ",
															"    CouldPreRequestOfEvaluatingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfEvaluatingBeExecuted();",
															"}",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfEvaluatingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfEvaluatingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Restoring",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Restoring",
															"* ",
															"* This Request is for Restoring the initial value to the attributeUnderTest",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfRestoringAsaString = pm.environment.get(\"PreRequestOfRestoringAsaString\");",
															"    eval(PreRequestOfRestoringAsaString);",
															"    CouldPreRequestOfRestoringBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfRestoringBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfRestoringBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfRestoringBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Setting Local Variables",
															"****************************************************************************************/   ",
															"pm.variables.clear();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ReversalPointWireAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"        ",
															"    var indexOfAttributeUnderTest = pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
															"        ",
															"    CouldTheInputBeLoaded(dummyUri, indexOfAttributeUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextAttributeUnderTest = indexOfAttributeUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfAttributeUnderTest\", indexOfPotentialNextAttributeUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointWireAttributeConfiguration\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfAttributeUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointWireAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* ExitPoint",
															"* ",
															"* This Request is terminating the Test",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NetworkRestoration",
									"item": [
										{
											"name": "SettingOriginalInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------------Restoring the Original Interface Configuration Again-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting the Original Interface Configuration Again",
															"* ",
															"* This Request is for restoring the configuration from before the interface validation ",
															"* on the device.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"        ",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration",
															"                                                   );",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    completeClassName = moduleUnderTest + \":\" + technologyUnderTest + \"-configuration\";",
															"    configuration = AddHeadlineToDataObject(configuration, completeClassName);",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched back on original values.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched back on original values.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointWireInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------ReversalPoint of WireInterface Validation of Configuration---------------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Console.log of Validation Results",
															" ****************************************************************************************/",
															"let allConfigurationValidationResults = { \"allConfigurationValidationResults\" : configurationValidationResults };",
															"console.log(allConfigurationValidationResults);",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointWireInterfaceConfiguration\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointWireInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n----------------------Terminating WireInterfaceConfiguration--------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ExitPoint",
															"* ",
															"* This Request is for clearing the Collection variables and terminating the TestCase",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Clearing all Collection Variables for Terminating the TestCase",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "LtpValidation",
					"item": [
						{
							"name": "LtpAugmentCompleteness",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputCompletenessLtpAugment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n\\n===================== LogicalTerminationPointAugmentCompleteness.1 =======================\");",
															"/****************************************************************************************",
															"* ",
															"* RequestCollection for validating Completeness of LogicalTerminationPoint Objects against definition ",
															"* ",
															"* LtpAugment_1.0.0-tsp.200826.0800a",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/ltpAugment/tree/tsp",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Manual Definition of the Mode of Operation of this TestCase",
															"****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"one\"; // \"none\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"ltp-augment-1-0:ltp-augment-pac\"; // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function () {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function () {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointLtpAugmentCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n------EntryPoint of LogicalTerminationPointAugment Validation for Completeness---------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the LogicalTerminationPointCompleteness TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].wireInterfaceList.length;",
															"    var maximumIndexOfLtpUnderTest;",
															"    ",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.min( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointLtpAugmentCompleteness\");",
															"        console.log(\"Proceeding with terminating LogicalTerminationPoint validation for Completeness.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Displaying the Collection Variables right before starting the validation",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "functions()",
									"item": [
										{
											"name": "SettingTheLtpRequestVariables()",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n----------------Uploading Function for Setting the Ltp Request Variables------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Definition of SettingTheLtpRequestVariables()",
															"* ",
															"* Function for composing and setting of the local variables for GET requests.",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Provided Collection Variables ",
															"****************************************************************************************/",
															"const SETTING_THE_LTP_REQUEST_VARIABLES = () => {",
															"    // Required Input Parameters",
															"    try {",
															"        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
															"            ",
															"        var controller = pm.environment.get(\"controller\");",
															"        var dummyUri = pm.environment.get(\"dummyUri\");",
															"        var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"                    ",
															"        var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"        var pacUnderTest = pm.collectionVariables.get(\"pacUnderTest\");",
															"        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
															"            ",
															"        var classUnderTest = pm.variables.get(\"classUnderTest\");",
															"        var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");",
															"        var keysOfDatatypeInstanceUnderTest = pm.variables.get(\"keysOfDatatypeInstanceUnderTest\");",
															"        var filteredContent = pm.variables.get(\"filteredContent\");",
															"        var filteredDepth = pm.variables.get(\"filteredDepth\");",
															"        var filteredFields = pm.variables.get(\"filteredFields\");",
															"        CouldInputForSettingTheLtpRequestVariablesBeLoaded(attributeUnderTest,",
															"                                                            controller, ",
															"                                                            dummyUri,",
															"                                                            indexOfDeviceUnderTest, ",
															"                                                            indexOfLtpUnderTest,",
															"                                                            pacUnderTest,",
															"                                                            moduleUnderTest,",
															"                                                            technologyUnderTest,",
															"                                                            classUnderTest,",
															"                                                            datatypeUnderTest,",
															"                                                            keysOfDatatypeInstanceUnderTest,",
															"                                                            filteredContent,",
															"                                                            filteredDepth,",
															"                                                            filteredFields",
															"                                                        );",
															"    } catch (error) {",
															"        CouldInputForSettingTheLtpRequestVariablesBeLoaded();",
															"    }",
															"        ",
															"    // Preparing the Request",
															"    try {",
															"        let nodeIds = controller.nodeList[indexOfDeviceUnderTest];",
															"        var idPair;",
															"        idPair = nodeIds.wireInterfaceList[indexOfLtpUnderTest];",
															"        CouldIdPairForSettingTheLtpRequestVariablesBeRetrieved(attributeUnderTest, idPair);",
															"    } catch (error) {",
															"        CouldIdPairForSettingTheLtpRequestVariablesBeRetrieved(attributeUnderTest);",
															"    }",
															"        ",
															"    try {",
															"        var objectUnderTest = \"/core-model-1-4:control-construct/logical-termination-point=\" ",
															"                                    + idPair.ltpUuid",
															"                                    + \"/\"",
															"                                    + pacUnderTest;",
															"        if ( (typeof technologyUnderTest!=\"undefined\") ",
															"                && (technologyUnderTest!==\"\")",
															"                && (classUnderTest!==\"pac\") ) {",
															"            objectUnderTest = objectUnderTest",
															"                                    + \"/\"",
															"                                    + technologyUnderTest",
															"                                    + \"-\"",
															"                                    + classUnderTest;",
															"        }",
															"        if ( (typeof datatypeUnderTest!=\"undefined\") && (datatypeUnderTest !== \"\") ) {",
															"            objectUnderTest = objectUnderTest",
															"                                    + \"/\"",
															"                                    + datatypeUnderTest;",
															"        }",
															"        if ( (typeof keysOfDatatypeInstanceUnderTest[0].value!=\"undefined\") && (keysOfDatatypeInstanceUnderTest[0].value!==\"\") ) {",
															"            objectUnderTest = objectUnderTest",
															"                                    + \"=\"",
															"                                    + ReplaceColonsInside(keysOfDatatypeInstanceUnderTest[0].value);",
															"            for (let i=1; i<keysOfDatatypeInstanceUnderTest.length; i++) {",
															"                objectUnderTest = objectUnderTest",
															"                                    + \",\"",
															"                                    + ReplaceColonsInside(keysOfDatatypeInstanceUnderTest[i].value);",
															"            }",
															"        } ",
															"        if ( (typeof attributeUnderTest!=\"undefined\") && (attributeUnderTest !== \"\") ) {",
															"            objectUnderTest = objectUnderTest",
															"                                    + \"/\"",
															"                                    + attributeUnderTest;",
															"        }    ",
															"        let alreadySomeFilterAttached = false;",
															"        if ( (typeof filteredContent!=\"undefined\") ",
															"                && (typeof filteredDepth!=\"undefined\") ",
															"                && (typeof filteredFields!=\"undefined\") ) {",
															"            if (filteredContent !== \"\" || filteredDepth !== 0 || filteredFields !== \"\") {",
															"                objectUnderTest = objectUnderTest",
															"                                        + \"?\";",
															"            }",
															"            if (filteredContent !== \"\") {",
															"                objectUnderTest = objectUnderTest",
															"                                        + \"content=\"",
															"                                        + filteredContent;",
															"                alreadySomeFilterAttached = true;",
															"            }",
															"            if (filteredDepth !== 0) {",
															"                if (alreadySomeFilterAttached) {",
															"                     objectUnderTest = objectUnderTest",
															"                                        + \"&\";",
															"                }",
															"                objectUnderTest = objectUnderTest",
															"                                        + \"depth=\"",
															"                                        + filteredDepth;",
															"                alreadySomeFilterAttached = true;",
															"            }",
															"            if (filteredFields !== \"\") {",
															"                if (alreadySomeFilterAttached) {",
															"                     objectUnderTest = objectUnderTest",
															"                                        + \"&\";",
															"                }",
															"                objectUnderTest = objectUnderTest",
															"                                        + \"fields=\"",
															"                                        + filteredFields;",
															"                alreadySomeFilterAttached = true;",
															"            }",
															"        }",
															"        HasObjectUnderTestBeenDefinedForSettingTheLtpRequestVariables(attributeUnderTest, objectUnderTest);",
															"    } catch (error) {",
															"        HasObjectUnderTestBeenDefinedForSettingTheLtpRequestVariables(attributeUnderTest);",
															"    }",
															"        ",
															"    try {",
															"        var uri = \"http://\" ",
															"                    + controller.controllerAddress ",
															"                    + controller.pathToDbAndMountPoint ",
															"                    + \"/node=\" ",
															"                    + controller.nodeList[indexOfDeviceUnderTest].nodeId ",
															"                    + \"/yang-ext:mount\" ",
															"                    + objectUnderTest;",
															"        HasUriBeenDefinedForSettingTheLtpRequestVariables(attributeUnderTest, uri);",
															"    } catch (error) {",
															"",
															"    console.log(\"Jetzt kriegt er die Adrese nich hin\")",
															"        uri = dummyUri;",
															"        HasUriBeenDefinedForSettingTheLtpRequestVariables(attributeUnderTest);",
															"    }",
															"        ",
															"    pm.variables.set(\"uri\", uri);",
															"    pm.request.headers.upsert({key:\"Authorization\", value:controller.authorizationCode});",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:\"application/json\"});",
															"        ",
															"    // Functions",
															"    function ReplaceColonsInside(keyAttributeValue) {",
															"        return encodeURIComponent(keyAttributeValue);",
															"    }",
															"",
															"    // Self Testing Functions",
															"    function CouldInputForSettingTheLtpRequestVariablesBeLoaded(attributeUnderTest,",
															"                                                                controller, ",
															"                                                                uri,",
															"                                                                indexOfDeviceUnderTest, ",
															"                                                                indexOfLtpUnderTest,",
															"                                                                pacUnderTest,",
															"                                                                moduleUnderTest,",
															"                                                                technologyUnderTest,",
															"                                                                classUnderTest,",
															"                                                                datatypeUnderTest,",
															"                                                                keysOfDatatypeInstanceUnderTest,",
															"                                                                filteredContent,",
															"                                                                filteredDepth,",
															"                                                                filteredFields) {",
															"        pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
															"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
															"        });",
															"        pm.test(\"CouldControllerBeLoaded (\" + attributeUnderTest + \")\", function () {",
															"            pm.expect(controller).to.be.an(\"object\");",
															"        });",
															"        pm.test(\"CouldUriBeLoaded (\" + attributeUnderTest + \")\", function () {",
															"            pm.expect(uri).to.be.a(\"string\");",
															"        });",
															"        pm.test(\"CouldIndexOfDeviceUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
															"            pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
															"        });",
															"        pm.test(\"CouldIndexOfLtpUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
															"            pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"        });",
															"        pm.test(\"CouldPacUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
															"            pm.expect(pacUnderTest).to.be.a(\"string\");",
															"            pm.expect(pacUnderTest).to.not.have.lengthOf(0);",
															"        });",
															"        pm.test(\"CouldModuleUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
															"            pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        });",
															"        pm.test(\"CouldTechnologyUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
															"            pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"        });",
															"        pm.test(\"CouldClassUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
															"            pm.expect(classUnderTest).to.be.a(\"string\");",
															"            pm.expect(classUnderTest).to.not.have.lengthOf(0);",
															"        });",
															"        pm.test(\"CouldDatatypeUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
															"            pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"        });",
															"        pm.test(\"CouldKeysOfDatatypeInstanceUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
															"            pm.expect(keysOfDatatypeInstanceUnderTest).to.be.an(\"array\");",
															"        });",
															"        pm.test(\"CouldFilteredContentBeLoaded (\" + attributeUnderTest + \")\", function () {",
															"            pm.expect(filteredContent).to.be.a(\"string\");",
															"        });",
															"        pm.test(\"CouldFilteredDepthBeLoaded (\" + attributeUnderTest + \")\", function () {",
															"            pm.expect(filteredDepth).to.be.a(\"number\");",
															"            pm.expect(filteredFields).to.be.a(\"string\");",
															"        });",
															"    }",
															"        ",
															"    function CouldIdPairForSettingTheLtpRequestVariablesBeRetrieved(location, idPair) {",
															"        pm.test(\"CouldIdPairForSettingTheLtpRequestVariablesBeRetrieved (\" + location + \")\", function () {",
															"            pm.expect(idPair.ltpUuid).to.be.a(\"string\");",
															"            pm.expect(idPair.ltpUuid).to.not.have.lengthOf(0);",
															"            pm.expect(idPair.lpLid).to.be.an(\"string\");",
															"            pm.expect(idPair.lpLid).to.not.have.lengthOf(0);",
															"        });",
															"    }",
															"    ",
															"    function HasObjectUnderTestBeenDefinedForSettingTheLtpRequestVariables(location, objectUnderTest) {",
															"        pm.test(\"HasObjectUnderTestBeenDefinedForSettingTheLtpRequestVariables (\" + location + \")\", function () {",
															"            pm.expect(objectUnderTest).to.be.a(\"string\");",
															"            pm.expect(objectUnderTest).to.not.have.lengthOf(0);",
															"        });",
															"    }",
															"    ",
															"    function HasUriBeenDefinedForSettingTheLtpRequestVariables(location, uri) {",
															"        pm.test(\"HasUriBeenDefinedForSettingTheLtpRequestVariables (\" + location + \")\", function () {",
															"            pm.expect(uri).to.be.a(\"string\");",
															"            pm.expect(uri).to.not.have.lengthOf(0);",
															"        });",
															"    }",
															"};",
															"pm.collectionVariables.set( \"SettingTheLtpRequestVariables\", SETTING_THE_LTP_REQUEST_VARIABLES.toString() );",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															" ",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NetworkPreparation",
									"item": [],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "ValidationRequests",
									"item": [
										{
											"name": "LtpAugmentCapabilityCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n-------------Checking LogicalTerminationPointAugmentCapability for Completeness----------------\");",
															"/****************************************************************************************",
															"* ",
															"* CapabilityCompleteness",
															"* ",
															"* This Request is for validating LogicalTerminationPointAugment Capability Objects against definition ",
															"* LtpAugment_1.0.0-tsp.200826.0800a",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/ltpAugment/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Capability class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheLtpRequestVariables = pm.collectionVariables.get(\"SettingTheLtpRequestVariables\");    ",
															"    CouldInputBeLoaded(SettingTheLtpRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let LTP_AUGMENT_CAPABILITY_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"equipment\": {",
															"\t\t\t\"type\": \"array\",",
															"            \"items\": {",
															"            \t\"type\": \"string\"",
															"            }",
															"\t\t},",
															"\t\t\"connector\": \t\t\t\t{ \"type\": \"string\" }, ",
															"\t},",
															"\t\"required\": [\"equipment\",",
															"\t\t\t\t\t\"connector\"",
															"\t]",
															"};",
															"pm.variables.set(\"schema\", LTP_AUGMENT_CAPABILITY_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheLtpRequestVariables)();",
															"    CouldFunctionForSettingTheLtpRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheLtpRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheLtpRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheLtpRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheLtpRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheLtpRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheLtpRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "NetworkRestoration",
									"item": [],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointLtpAugmentCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n------ReversalPoint of LogicalTerminationPointAugment Validation for Completeness---------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointLtpAugmentCompleteness\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointLtpAugmentCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"\\n----------------Terminating LogicalTerminationPointAugmentCompleteness--------------------\");",
															"/****************************************************************************************",
															" * ",
															" * ExitPoint",
															" * ",
															" * This Request is for clearing the Collection variables and terminating the TestCase",
															" * ",
															" ****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															" * Required Input Parameters",
															" ****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Clearing all Collection Variables for Terminating the TestCase",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Setting up Local Variables and Preparing the Request",
															" ****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({",
															"        key: \"Accept\",",
															"        value: \"application/json\"",
															"    });",
															"} catch (error) {}",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, controller, indexOfDeviceUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function() {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function() {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "NetworkRestoration",
			"item": [],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Terminating",
			"item": [
				{
					"name": "ReversalPointInterfaceValidator",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"\\n------------------------ReversalPoint of the Interface Validator--------------------------\");",
									"/****************************************************************************************",
									"* ",
									"* ReversalPoint",
									"* ",
									"* Directs the flow of execution back to the StartPoint",
									"* ",
									"****************************************************************************************/",
									" ",
									" ",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
									"    CouldTheInputBeLoaded(dummyUri, indexOfDeviceUnderTest);",
									"} catch (error) {",
									"    CouldTheInputBeLoaded();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Providing Environment Variables for either Repeating or Terminating the Device Testing",
									" ****************************************************************************************/",
									"var indexOfPotentialNextDeviceUnderTest = indexOfDeviceUnderTest + 1;",
									"pm.environment.set(\"indexOfDeviceUnderTest\", indexOfPotentialNextDeviceUnderTest);",
									"",
									"postman.setNextRequest(\"StartPointDeviceTesting\");",
									"",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    pm.variables.set(\"uri\", dummyUri);",
									"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
									"} catch (error) { }",
									"CouldTheRequestBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									" * Self Testing Functions",
									" ****************************************************************************************/",
									"function CouldTheInputBeLoaded(uri, indexOfDeviceUnderTest) {",
									"    pm.test(\"CouldTheInputBeLoaded\", function () {",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
									"    });",
									"}",
									"",
									"function CouldTheRequestBePrepared() {",
									"    pm.test(\"CouldTheRequestBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "EndPointInterfaceValidator",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"\\n--------------------------Terminating the InterfaceValidator------------------------------\");",
									"/****************************************************************************************",
									"* ",
									"* EndPoint of the Interface Validator",
									"* ",
									"* This Request is for clearing the Environment variables and terminating the Program",
									"* ",
									"****************************************************************************************/",
									" ",
									" ",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    CouldTheInputBeLoaded(dummyUri);",
									"} catch (error) {",
									"    CouldTheInputBeLoaded();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Clearing all Environment Variables for Terminating the Program",
									" ****************************************************************************************/",
									"//pm.environment.clear();",
									"",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    pm.variables.set(\"uri\", dummyUri);",
									"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
									"} catch (error) { }",
									"CouldTheRequestBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									" * Self Testing Functions",
									" ****************************************************************************************/",
									"function CouldTheInputBeLoaded(uri, controller, indexOfDeviceUnderTest) {",
									"    pm.test(\"CouldTheInputBeLoaded\", function () {",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldTheRequestBePrepared() {",
									"    pm.test(\"CouldTheRequestBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}