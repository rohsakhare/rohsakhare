{
  "id": "7f6db08d-1a2e-4ef3-a63e-ca71685532fb",
  "values": [
    {
      "type": "any",
      "value": {
        "controllerAddress": "172.29.145.220:8181",
        "authorizationCode": "c2VudGhpbHZlbC5zOlBSU2UwOA==",
        "pathToDbAndMountPoint": "/rests/data/network-topology:network-topology/topology=topology-netconf",
        "nodeList": [
          {
            "nodeId": "513250010",
            "airInterfaceList": [
              {
                "ltpUuid": "RF-2146697601",
                "lpLid": "2146697601",
                "ltpName": "air-interface"
              }
            ],
            "ethernetContainerList": [
              {
                "ltpUuid": "ETH-2134638594",
                "lpLid": "2134638594",
                "ltpName": "ethernet-container"
              }
            ],
            "hybridMwStructureList": [
              {
                "ltpUuid": "HMS-2146697473",
                "lpLid": "2146697473",
                "ltpName": "hybrid-mw-structure"
              }
            ],
            "ipInterfaceList": [],
            "macInterfaceList": [],
            "pureEthernetStructureList": [],
            "tdmContainerList": [],
            "vlanInterfaceList": [],
            "wireInterfaceList": []
          }
        ]
      },
      "key": "controller"
    },
    {
      "type": "any",
      "value": [
        {
          "objectUnderTest": "air-interface-",
          "attributeUnderTest": "",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 200,
          "message": "",
          "description": "",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=RF-2146697601?content=nonconfig&depth=5"
        },
        {
          "objectUnderTest": "air-interface-pac",
          "attributeUnderTest": "",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 200,
          "message": "",
          "description": "",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=RF-2146697601/layer-protocol=2146697601/air-interface-2-0:air-interface-pac?content=nonconfig&depth=3"
        },
        {
          "objectUnderTest": "air-interface-capability",
          "attributeUnderTest": "",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 200,
          "message": "",
          "description": "",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=RF-2146697601/layer-protocol=2146697601/air-interface-2-0:air-interface-pac/air-interface-capability?content=nonconfig"
        },
        {
          "objectUnderTest": "air-interface-configuration",
          "attributeUnderTest": "",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 200,
          "message": "",
          "description": "",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=RF-2146697601/layer-protocol=2146697601/air-interface-2-0:air-interface-pac/air-interface-configuration?content=nonconfig"
        },
        {
          "objectUnderTest": "air-interface-status",
          "attributeUnderTest": "",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 200,
          "message": "",
          "description": "",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=RF-2146697601/layer-protocol=2146697601/air-interface-2-0:air-interface-pac/air-interface-status?content=nonconfig"
        },
        {
          "objectUnderTest": "air-interface-current-problems",
          "attributeUnderTest": "",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 200,
          "message": "",
          "description": "",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=RF-2146697601/layer-protocol=2146697601/air-interface-2-0:air-interface-pac/air-interface-current-problems?content=nonconfig"
        },
        {
          "objectUnderTest": "air-interface-current-performance",
          "attributeUnderTest": "",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 200,
          "message": "",
          "description": "",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=RF-2146697601/layer-protocol=2146697601/air-interface-2-0:air-interface-pac/air-interface-current-performance?content=nonconfig"
        },
        {
          "objectUnderTest": "air-interface-historical-performances",
          "attributeUnderTest": "",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 200,
          "message": "",
          "description": "",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=RF-2146697601/layer-protocol=2146697601/air-interface-2-0:air-interface-pac/air-interface-historical-performances?content=nonconfig"
        },
        {
          "objectUnderTest": "ethernet-container-",
          "attributeUnderTest": "",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Fail",
          "responseCode": 200,
          "message": "Missing required property: connector",
          "description": "ValidationError",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594?content=nonconfig&depth=5"
        },
        {
          "objectUnderTest": "ethernet-container-pac",
          "attributeUnderTest": "",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 200,
          "message": "",
          "description": "",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac?content=nonconfig&depth=3"
        },
        {
          "objectUnderTest": "ethernet-container-capability",
          "attributeUnderTest": "",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 200,
          "message": "",
          "description": "",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac/ethernet-container-capability?content=nonconfig"
        },
        {
          "objectUnderTest": "ethernet-container-configuration",
          "attributeUnderTest": "",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Fail",
          "responseCode": 200,
          "message": "Missing required property: wred-profile",
          "description": "ValidationError",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac/ethernet-container-configuration?content=nonconfig"
        },
        {
          "objectUnderTest": "ethernet-container-status",
          "attributeUnderTest": "",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 200,
          "message": "",
          "description": "",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac/ethernet-container-status?content=nonconfig"
        },
        {
          "objectUnderTest": "ethernet-container-current-problems",
          "attributeUnderTest": "",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Fail",
          "responseCode": 200,
          "message": "Missing required property: current-problem-list",
          "description": "ValidationError",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac/ethernet-container-current-problems?content=nonconfig"
        },
        {
          "objectUnderTest": "ethernet-container-current-performance",
          "attributeUnderTest": "",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 200,
          "message": "",
          "description": "",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac/ethernet-container-current-performance?content=nonconfig"
        },
        {
          "objectUnderTest": "ethernet-container-historical-performances",
          "attributeUnderTest": "",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 200,
          "message": "",
          "description": "",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac/ethernet-container-historical-performances?content=nonconfig"
        },
        {
          "objectUnderTest": "ethernet-container-configuration",
          "attributeUnderTest": "interface-name",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 500,
          "message": "dummyValue contradicts existing configuration",
          "description": "Error in Configuration of interface-name",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac/ethernet-container-configuration/interface-name?content=config"
        },
        {
          "objectUnderTest": "ethernet-container-configuration",
          "attributeUnderTest": "interface-is-on",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 500,
          "message": "dummyValue contradicts existing configuration",
          "description": "Error in Configuration of interface-is-on",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac/ethernet-container-configuration/interface-is-on?content=config"
        },
        {
          "objectUnderTest": "ethernet-container-configuration",
          "attributeUnderTest": "queue-behavior-list/queue-depth",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 500,
          "message": "dummyValue out of hardware range",
          "description": "Error in Configuration of queue-behavior-list/queue-depth",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac/ethernet-container-configuration/queue-behavior-list=ethernet-container-2-0%3AQUEUE_NAME_TYPE_EXPEDITED_FORWARDING_QUEUE/queue-depth?content=config"
        },
        {
          "objectUnderTest": "ethernet-container-configuration",
          "attributeUnderTest": "queue-behavior-list/dropping-behavior-kind",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Fail",
          "responseCode": 500,
          "message": "Not configurable on application layer",
          "description": "Error in Configuration of queue-behavior-list/dropping-behavior-kind",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac/ethernet-container-configuration/queue-behavior-list=ethernet-container-2-0%3AQUEUE_NAME_TYPE_EXPEDITED_FORWARDING_QUEUE/dropping-behavior-kind?content=config"
        },
        {
          "objectUnderTest": "ethernet-container-configuration",
          "attributeUnderTest": "queue-behavior-list/scheduler-kind",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Fail",
          "responseCode": 500,
          "message": "Not configurable on application layer",
          "description": "Error in Configuration of queue-behavior-list/scheduler-kind",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac/ethernet-container-configuration/queue-behavior-list=ethernet-container-2-0%3AQUEUE_NAME_TYPE_EXPEDITED_FORWARDING_QUEUE/scheduler-kind?content=config"
        },
        {
          "objectUnderTest": "ethernet-container-configuration",
          "attributeUnderTest": "queue-behavior-list/weighting",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 500,
          "message": "OK (not supported by hardware)",
          "description": "Error in Configuration of queue-behavior-list/weighting",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac/ethernet-container-configuration/queue-behavior-list=ethernet-container-2-0%3AQUEUE_NAME_TYPE_CLASS_SELECTOR_QUEUE7/weighting?content=config"
        },
        {
          "objectUnderTest": "ethernet-container-configuration",
          "attributeUnderTest": "explicit-congestion-notification-is-on",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 500,
          "message": "OK (not supported by hardware)",
          "description": "Error in Configuration of explicit-congestion-notification-is-on",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac/ethernet-container-configuration/explicit-congestion-notification-is-on?content=config"
        },
        {
          "objectUnderTest": "ethernet-container-configuration",
          "attributeUnderTest": "egress-shaping-is-on",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 500,
          "message": "dummyValue out of hardware range",
          "description": "Error in Configuration of egress-shaping-is-on",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac/ethernet-container-configuration/egress-shaping-is-on?content=config"
        },
        {
          "objectUnderTest": "ethernet-container-configuration",
          "attributeUnderTest": "maximum-information-rate",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 500,
          "message": "dummyValue out of hardware range",
          "description": "Error in Configuration of maximum-information-rate",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac/ethernet-container-configuration/maximum-information-rate?content=config"
        },
        {
          "objectUnderTest": "ethernet-container-configuration",
          "attributeUnderTest": "maximum-burst-size",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 500,
          "message": "dummyValue out of hardware range",
          "description": "Error in Configuration of maximum-burst-size",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac/ethernet-container-configuration/maximum-burst-size?content=config"
        },
        {
          "objectUnderTest": "ethernet-container-configuration",
          "attributeUnderTest": "bundling-is-on",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 500,
          "message": "OK (not supported by hardware)",
          "description": "Error in Configuration of bundling-is-on",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac/ethernet-container-configuration/bundling-is-on?content=config"
        },
        {
          "objectUnderTest": "ethernet-container-configuration",
          "attributeUnderTest": "header-compression-kind",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 500,
          "message": "OK (not supported by hardware)",
          "description": "Error in Configuration of header-compression-kind",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac/ethernet-container-configuration/header-compression-kind?content=config"
        },
        {
          "objectUnderTest": "ethernet-container-configuration",
          "attributeUnderTest": "fec-is-on",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 500,
          "message": "OK (not supported by hardware)",
          "description": "Error in Configuration of fec-is-on",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac/ethernet-container-configuration/fec-is-on?content=config"
        },
        {
          "objectUnderTest": "ethernet-container-configuration",
          "attributeUnderTest": "fec-word-size",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 500,
          "message": "OK (not supported by hardware)",
          "description": "Error in Configuration of fec-word-size",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac/ethernet-container-configuration/fec-word-size?content=config"
        },
        {
          "objectUnderTest": "ethernet-container-configuration",
          "attributeUnderTest": "fec-redundancy-size",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 500,
          "message": "OK (not supported by hardware)",
          "description": "Error in Configuration of fec-redundancy-size",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac/ethernet-container-configuration/fec-redundancy-size?content=config"
        },
        {
          "objectUnderTest": "ethernet-container-configuration",
          "attributeUnderTest": "fec-interleaver-kind",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 500,
          "message": "OK (not supported by hardware)",
          "description": "Error in Configuration of fec-interleaver-kind",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac/ethernet-container-configuration/fec-interleaver-kind?content=config"
        },
        {
          "objectUnderTest": "ethernet-container-configuration",
          "attributeUnderTest": "fec-interleaver-depth",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 500,
          "message": "OK (not supported by hardware)",
          "description": "Error in Configuration of fec-interleaver-depth",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac/ethernet-container-configuration/fec-interleaver-depth?content=config"
        },
        {
          "objectUnderTest": "ethernet-container-configuration",
          "attributeUnderTest": "encryption-is-on",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 500,
          "message": "OK (not supported by hardware)",
          "description": "Error in Configuration of encryption-is-on",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac/ethernet-container-configuration/encryption-is-on?content=config"
        },
        {
          "objectUnderTest": "ethernet-container-configuration",
          "attributeUnderTest": "cryptographic-key",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 500,
          "message": "OK (not supported by hardware)",
          "description": "Error in Configuration of cryptographic-key",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac/ethernet-container-configuration/cryptographic-key?content=config"
        },
        {
          "objectUnderTest": "ethernet-container-configuration",
          "attributeUnderTest": "loop-back-kind-on",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 500,
          "message": "OK (not supported by hardware)",
          "description": "Error in Configuration of loop-back-kind-on",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac/ethernet-container-configuration/loop-back-kind-on?content=config"
        },
        {
          "objectUnderTest": "ethernet-container-configuration",
          "attributeUnderTest": "maintenance-timer",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 500,
          "message": "OK (not supported by hardware)",
          "description": "Error in Configuration of maintenance-timer",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac/ethernet-container-configuration/maintenance-timer?content=config"
        },
        {
          "objectUnderTest": "ethernet-container-configuration",
          "attributeUnderTest": "statistics-is-on",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 500,
          "message": "dummyValue out of hardware range",
          "description": "Error in Configuration of statistics-is-on",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac/ethernet-container-configuration/statistics-is-on?content=config"
        },
        {
          "objectUnderTest": "ethernet-container-configuration",
          "attributeUnderTest": "problem-kind-severity-list/problem-kind-severity",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 500,
          "message": "OK (not supported by hardware)",
          "description": "Error in Configuration of problem-kind-severity-list/problem-kind-severity",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac/ethernet-container-configuration/problem-kind-severity-list=RDI%20bit%20set%20in%20CCM/problem-kind-severity?content=config"
        },
        {
          "objectUnderTest": "ethernet-container-configuration",
          "attributeUnderTest": "performance-monitoring-is-on",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 500,
          "message": "dummyValue out of hardware range",
          "description": "Error in Configuration of performance-monitoring-is-on",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac/ethernet-container-configuration/performance-monitoring-is-on?content=config"
        },
        {
          "objectUnderTest": "hybrid-mw-structure-",
          "attributeUnderTest": "",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Fail",
          "responseCode": 200,
          "message": "Missing required property: connector",
          "description": "ValidationError",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=HMS-2146697473?content=nonconfig&depth=5"
        },
        {
          "objectUnderTest": "hybrid-mw-structure-pac",
          "attributeUnderTest": "",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 200,
          "message": "",
          "description": "",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=HMS-2146697473/layer-protocol=2146697473/hybrid-mw-structure-2-0:hybrid-mw-structure-pac?content=nonconfig&depth=3"
        },
        {
          "objectUnderTest": "hybrid-mw-structure-capability",
          "attributeUnderTest": "",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 200,
          "message": "",
          "description": "",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=HMS-2146697473/layer-protocol=2146697473/hybrid-mw-structure-2-0:hybrid-mw-structure-pac/hybrid-mw-structure-capability?content=nonconfig"
        },
        {
          "objectUnderTest": "hybrid-mw-structure-configuration",
          "attributeUnderTest": "",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 200,
          "message": "",
          "description": "",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=HMS-2146697473/layer-protocol=2146697473/hybrid-mw-structure-2-0:hybrid-mw-structure-pac/hybrid-mw-structure-configuration?content=nonconfig"
        },
        {
          "objectUnderTest": "hybrid-mw-structure-status",
          "attributeUnderTest": "",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 200,
          "message": "",
          "description": "",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=HMS-2146697473/layer-protocol=2146697473/hybrid-mw-structure-2-0:hybrid-mw-structure-pac/hybrid-mw-structure-status?content=nonconfig"
        },
        {
          "objectUnderTest": "hybrid-mw-structure-current-problems",
          "attributeUnderTest": "",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 200,
          "message": "",
          "description": "",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=HMS-2146697473/layer-protocol=2146697473/hybrid-mw-structure-2-0:hybrid-mw-structure-pac/hybrid-mw-structure-current-problems?content=nonconfig"
        },
        {
          "objectUnderTest": "hybrid-mw-structure-current-performance",
          "attributeUnderTest": "",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 200,
          "message": "",
          "description": "",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=HMS-2146697473/layer-protocol=2146697473/hybrid-mw-structure-2-0:hybrid-mw-structure-pac/hybrid-mw-structure-current-performance?content=nonconfig"
        },
        {
          "objectUnderTest": "hybrid-mw-structure-historical-performances",
          "attributeUnderTest": "",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 200,
          "message": "",
          "description": "",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=HMS-2146697473/layer-protocol=2146697473/hybrid-mw-structure-2-0:hybrid-mw-structure-pac/hybrid-mw-structure-historical-performances?content=nonconfig"
        },
        {
          "objectUnderTest": "hybrid-mw-structure-configuration",
          "attributeUnderTest": "tdm-structure-kind",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Fail",
          "responseCode": 500,
          "message": "Not configurable on application layer",
          "description": "Error in Configuration of tdm-structure-kind",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=HMS-2146697473/layer-protocol=2146697473/hybrid-mw-structure-2-0:hybrid-mw-structure-pac/hybrid-mw-structure-configuration/tdm-structure-kind?content=config"
        },
        {
          "objectUnderTest": "hybrid-mw-structure-configuration",
          "attributeUnderTest": "number-of-tdm-segments-to-be-reserved",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 500,
          "message": "dummyValue out of hardware range",
          "description": "Error in Configuration of number-of-tdm-segments-to-be-reserved",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=HMS-2146697473/layer-protocol=2146697473/hybrid-mw-structure-2-0:hybrid-mw-structure-pac/hybrid-mw-structure-configuration/number-of-tdm-segments-to-be-reserved?content=config"
        },
        {
          "objectUnderTest": "hybrid-mw-structure-configuration",
          "attributeUnderTest": "problem-kind-severity-list/problem-kind-severity",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 400,
          "message": "OK (not existing, because not supported)",
          "description": "Error in Configuration of problem-kind-severity-list/problem-kind-severity",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=HMS-2146697473/layer-protocol=2146697473/hybrid-mw-structure-2-0:hybrid-mw-structure-pac/hybrid-mw-structure-configuration/problem-kind-severity-list/problem-kind-severity?content=config"
        },
        {
          "objectUnderTest": "hybrid-mw-structure-configuration",
          "attributeUnderTest": "g-826-threshold-cross-alarm-list/alarm-raising-threshold",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 400,
          "message": "OK (not existing, because not supported)",
          "description": "Error in Configuration of g-826-threshold-cross-alarm-list/alarm-raising-threshold",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=HMS-2146697473/layer-protocol=2146697473/hybrid-mw-structure-2-0:hybrid-mw-structure-pac/hybrid-mw-structure-configuration/g-826-threshold-cross-alarm-list/alarm-raising-threshold?content=config"
        },
        {
          "objectUnderTest": "hybrid-mw-structure-configuration",
          "attributeUnderTest": "g-826-threshold-cross-alarm-list/alarm-clearing-threshold",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 400,
          "message": "OK (not existing, because not supported)",
          "description": "Error in Configuration of g-826-threshold-cross-alarm-list/alarm-clearing-threshold",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=HMS-2146697473/layer-protocol=2146697473/hybrid-mw-structure-2-0:hybrid-mw-structure-pac/hybrid-mw-structure-configuration/g-826-threshold-cross-alarm-list/alarm-clearing-threshold?content=config"
        },
        {
          "objectUnderTest": "hybrid-mw-structure-configuration",
          "attributeUnderTest": "clearing-threshold-cross-alarms-is-on",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 500,
          "message": "OK (not supported by hardware)",
          "description": "Error in Configuration of clearing-threshold-cross-alarms-is-on",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=HMS-2146697473/layer-protocol=2146697473/hybrid-mw-structure-2-0:hybrid-mw-structure-pac/hybrid-mw-structure-configuration/clearing-threshold-cross-alarms-is-on?content=config"
        },
        {
          "objectUnderTest": "hybrid-mw-structure-configuration",
          "attributeUnderTest": "performance-monitoring-is-on",
          "nameOfTheDeviceUnderTest": "513250010",
          "testResult": "Pass",
          "responseCode": 500,
          "message": "OK (not supported by hardware)",
          "description": "Error in Configuration of performance-monitoring-is-on",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=HMS-2146697473/layer-protocol=2146697473/hybrid-mw-structure-2-0:hybrid-mw-structure-pac/hybrid-mw-structure-configuration/performance-monitoring-is-on?content=config"
        }
      ],
      "key": "validationReport"
    },
    {
      "type": "any",
      "value": [
        {
          "objectUnderTest": "ethernet-container-",
          "attributeUnderTest": "",
          "nameOfTheDeviceUnderTest": "513250010",
          "responseCode": 200,
          "message": "Missing required property: connector",
          "description": "ValidationError",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594?content=nonconfig&depth=5",
          "requestBody": "",
          "response": {
            "core-model-1-4:logical-termination-point": [
              {
                "uuid": "ETH-2134638594",
                "lifecycle-state": "core-model-1-4:LIFECYCLE_STATE_INSTALLED",
                "client-ltp": [
                  "MAC-2134638594"
                ],
                "server-ltp": [
                  "PES-2134638594"
                ],
                "layer-protocol": [
                  {
                    "local-id": "2134638594",
                    "lifecycle-state": "core-model-1-4:LIFECYCLE_STATE_INSTALLED",
                    "layer-protocol-name": "ethernet-container-2-0:LAYER_PROTOCOL_NAME_TYPE_ETHERNET_CONTAINER_LAYER",
                    "termination-state": "core-model-1-4:TERMINATION_STATE_TERMINATED_BIDIRECTIONAL",
                    "administrative-state": "core-model-1-4:ADMINISTRATIVE_STATE_UNLOCKED",
                    "lp-direction": "core-model-1-4:TERMINATION_DIRECTION_BIDIRECTIONAL",
                    "ethernet-container-2-0:ethernet-container-pac": {
                      "ethernet-container-configuration": {
                        "fec-redundancy-size": "ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_NOT_YET_DEFINED",
                        "interface-is-on": true,
                        "explicit-congestion-notification-is-on": false,
                        "queue-behavior-list": [
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {}
                        ],
                        "maximum-information-rate": -1,
                        "fec-interleaver-depth": "ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_NOT_YET_DEFINED",
                        "fec-is-on": false,
                        "loop-back-kind-on": "ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED",
                        "egress-shaping-is-on": false,
                        "encryption-is-on": false,
                        "bundling-is-on": false,
                        "interface-name": "to MBRL-DEMUC-8-2001",
                        "performance-monitoring-is-on": true,
                        "cryptographic-key": "Cryptographic key not yet defined.",
                        "maximum-burst-size": 128,
                        "maintenance-timer": -1,
                        "problem-kind-severity-list": [
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {}
                        ],
                        "header-compression-kind": "no-compression",
                        "statistics-is-on": true,
                        "fec-word-size": -1,
                        "fec-interleaver-kind": "ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_NOT_YET_DEFINED"
                      },
                      "ethernet-container-historical-performances": {
                        "number-of-historical-performance-sets": 97,
                        "historical-performance-data-list": [
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {}
                        ],
                        "time-of-latest-change": "2021-06-17T14:15:00+02:00"
                      },
                      "ethernet-container-current-performance": {
                        "current-performance-data-list": [
                          {}
                        ],
                        "number-of-current-performance-sets": 1
                      },
                      "ethernet-container-status": {
                        "remote-site-is-faulty": false,
                        "loop-back-kind-up": "ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED",
                        "interface-status": "ethernet-container-2-0:INTERFACE_STATUS_TYPE_UP",
                        "timestamp": "2021-06-17T14:22:52.209+02:00",
                        "total-bytes-input": "109550678",
                        "forwarded-bytes-output": "0",
                        "bundling-is-up": false,
                        "total-bytes-output": "0",
                        "last-10-sec-data-output-rate": -1,
                        "statistics-is-up": true,
                        "last-10-sec-data-input-rate": -1,
                        "forwarded-bytes-input": "0",
                        "performance-monitoring-is-up": true
                      },
                      "ethernet-container-capability": {
                        "ingress-policing-is-avail": true,
                        "information-rate-max": -1,
                        "egress-shaping-is-avail": false,
                        "burst-size-max": -1,
                        "supported-header-compression-kind-list": [
                          {}
                        ],
                        "admin-shut-down-is-avail": true,
                        "bundling-group-size-max": -1,
                        "fec-word-size-max": -1,
                        "burst-size-min": -1,
                        "performance-monitoring-is-avail": true,
                        "explicit-congestion-notification-is-avail": false,
                        "encryption-is-avail": false,
                        "support-of-management-frames-without-preamble-is-avail": false,
                        "available-queue-list": [
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {}
                        ],
                        "bundling-is-avail": false,
                        "statistics-is-avail": true,
                        "information-rate-min": -1,
                        "fec-is-avail": false,
                        "maintenance-timer-range": "Range of the maintenance timer not yet defined."
                      },
                      "ethernet-container-current-problems": {
                        "number-of-current-problems": 0,
                        "time-of-latest-change": "2010-11-20T14:00:00+01:00"
                      }
                    },
                    "name": [
                      {
                        "value-name": "lpName",
                        "value": "2134638594"
                      }
                    ],
                    "operational-state": "core-model-1-4:OPERATIONAL_STATE_ENABLED",
                    "administrative-control": "core-model-1-4:ADMINISTRATIVE_CONTROL_UNLOCK"
                  }
                ],
                "ltp-direction": "core-model-1-4:TERMINATION_DIRECTION_BIDIRECTIONAL",
                "ltp-augment-1-0:ltp-augment-pac": {
                  "ltp-augment-capability": {
                    "equipment": [
                      "1921254143"
                    ]
                  }
                },
                "administrative-state": "core-model-1-4:ADMINISTRATIVE_STATE_UNLOCKED",
                "name": [
                  {
                    "value-name": "ltpName",
                    "value": "LAN 1/0/2"
                  },
                  {
                    "value-name": "externalLabel",
                    "value": "to MBRL-DEMUC-8-2001"
                  }
                ],
                "operational-state": "core-model-1-4:OPERATIONAL_STATE_ENABLED",
                "administrative-control": "core-model-1-4:ADMINISTRATIVE_CONTROL_UNLOCK"
              }
            ]
          }
        },
        {
          "objectUnderTest": "ethernet-container-configuration",
          "attributeUnderTest": "",
          "nameOfTheDeviceUnderTest": "513250010",
          "responseCode": 200,
          "message": "Missing required property: wred-profile",
          "description": "ValidationError",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac/ethernet-container-configuration?content=nonconfig",
          "requestBody": "",
          "response": {
            "ethernet-container-2-0:ethernet-container-configuration": {
              "fec-redundancy-size": "ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_NOT_YET_DEFINED",
              "interface-is-on": true,
              "explicit-congestion-notification-is-on": false,
              "queue-behavior-list": [
                {
                  "queue-name": "ethernet-container-2-0:QUEUE_NAME_TYPE_CLASS_SELECTOR_QUEUE7",
                  "scheduler-kind": "ethernet-container-2-0:SCHEDULER_KIND_TYPE_STRICT",
                  "weighting": -1,
                  "queue-depth": -1,
                  "wred-behavior-list": [
                    {
                      "affected-drop-precedence": "ethernet-container-2-0:DROP_PRECEDENCE_TYPE_ALL",
                      "affected-protocol": "ethernet-container-2-0:PROTOCOL_LAYER_TYPE_NONE"
                    }
                  ],
                  "dropping-behavior-kind": "ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_NOT_YET_DEFINED"
                },
                {
                  "queue-name": "ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE4",
                  "scheduler-kind": "ethernet-container-2-0:SCHEDULER_KIND_TYPE_STRICT",
                  "weighting": -1,
                  "queue-depth": -1,
                  "wred-behavior-list": [
                    {
                      "affected-drop-precedence": "ethernet-container-2-0:DROP_PRECEDENCE_TYPE_ALL",
                      "affected-protocol": "ethernet-container-2-0:PROTOCOL_LAYER_TYPE_NONE"
                    }
                  ],
                  "dropping-behavior-kind": "ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_NOT_YET_DEFINED"
                },
                {
                  "queue-name": "ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE3",
                  "scheduler-kind": "ethernet-container-2-0:SCHEDULER_KIND_TYPE_STRICT",
                  "weighting": -1,
                  "queue-depth": -1,
                  "wred-behavior-list": [
                    {
                      "affected-drop-precedence": "ethernet-container-2-0:DROP_PRECEDENCE_TYPE_ALL",
                      "affected-protocol": "ethernet-container-2-0:PROTOCOL_LAYER_TYPE_NONE"
                    }
                  ],
                  "dropping-behavior-kind": "ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_NOT_YET_DEFINED"
                },
                {
                  "queue-name": "ethernet-container-2-0:QUEUE_NAME_TYPE_EXPEDITED_FORWARDING_QUEUE",
                  "scheduler-kind": "ethernet-container-2-0:SCHEDULER_KIND_TYPE_STRICT",
                  "weighting": -1,
                  "queue-depth": -1,
                  "wred-behavior-list": [
                    {
                      "affected-drop-precedence": "ethernet-container-2-0:DROP_PRECEDENCE_TYPE_ALL",
                      "affected-protocol": "ethernet-container-2-0:PROTOCOL_LAYER_TYPE_NONE"
                    }
                  ],
                  "dropping-behavior-kind": "ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_NOT_YET_DEFINED"
                },
                {
                  "queue-name": "ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE2",
                  "scheduler-kind": "ethernet-container-2-0:SCHEDULER_KIND_TYPE_STRICT",
                  "weighting": -1,
                  "queue-depth": -1,
                  "wred-behavior-list": [
                    {
                      "affected-drop-precedence": "ethernet-container-2-0:DROP_PRECEDENCE_TYPE_ALL",
                      "affected-protocol": "ethernet-container-2-0:PROTOCOL_LAYER_TYPE_NONE"
                    }
                  ],
                  "dropping-behavior-kind": "ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_NOT_YET_DEFINED"
                },
                {
                  "queue-name": "ethernet-container-2-0:QUEUE_NAME_TYPE_BEST_EFFORT_QUEUE",
                  "scheduler-kind": "ethernet-container-2-0:SCHEDULER_KIND_TYPE_STRICT",
                  "weighting": -1,
                  "queue-depth": -1,
                  "wred-behavior-list": [
                    {
                      "affected-drop-precedence": "ethernet-container-2-0:DROP_PRECEDENCE_TYPE_ALL",
                      "affected-protocol": "ethernet-container-2-0:PROTOCOL_LAYER_TYPE_NONE"
                    }
                  ],
                  "dropping-behavior-kind": "ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_NOT_YET_DEFINED"
                },
                {
                  "queue-name": "ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE1",
                  "scheduler-kind": "ethernet-container-2-0:SCHEDULER_KIND_TYPE_STRICT",
                  "weighting": -1,
                  "queue-depth": -1,
                  "wred-behavior-list": [
                    {
                      "affected-drop-precedence": "ethernet-container-2-0:DROP_PRECEDENCE_TYPE_ALL",
                      "affected-protocol": "ethernet-container-2-0:PROTOCOL_LAYER_TYPE_NONE"
                    }
                  ],
                  "dropping-behavior-kind": "ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_NOT_YET_DEFINED"
                },
                {
                  "queue-name": "ethernet-container-2-0:QUEUE_NAME_TYPE_CLASS_SELECTOR_QUEUE6",
                  "scheduler-kind": "ethernet-container-2-0:SCHEDULER_KIND_TYPE_STRICT",
                  "weighting": -1,
                  "queue-depth": -1,
                  "wred-behavior-list": [
                    {
                      "affected-drop-precedence": "ethernet-container-2-0:DROP_PRECEDENCE_TYPE_ALL",
                      "affected-protocol": "ethernet-container-2-0:PROTOCOL_LAYER_TYPE_NONE"
                    }
                  ],
                  "dropping-behavior-kind": "ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_NOT_YET_DEFINED"
                }
              ],
              "maximum-information-rate": -1,
              "fec-interleaver-depth": "ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_NOT_YET_DEFINED",
              "fec-is-on": false,
              "loop-back-kind-on": "ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED",
              "egress-shaping-is-on": false,
              "encryption-is-on": false,
              "bundling-is-on": false,
              "interface-name": "to MBRL-DEMUC-8-2001",
              "performance-monitoring-is-on": true,
              "cryptographic-key": "Cryptographic key not yet defined.",
              "maximum-burst-size": 128,
              "maintenance-timer": -1,
              "problem-kind-severity-list": [
                {
                  "problem-kind-name": "RDI bit set in CCM",
                  "problem-kind-severity": "ethernet-container-2-0:SEVERITY_TYPE_NOT_YET_DEFINED"
                },
                {
                  "problem-kind-name": "Loss Of Continuity",
                  "problem-kind-severity": "ethernet-container-2-0:SEVERITY_TYPE_NOT_YET_DEFINED"
                },
                {
                  "problem-kind-name": "Def Xcon CCM",
                  "problem-kind-severity": "ethernet-container-2-0:SEVERITY_TYPE_NOT_YET_DEFINED"
                },
                {
                  "problem-kind-name": "RLIME Resource Group-1 Oversubscription",
                  "problem-kind-severity": "ethernet-container-2-0:SEVERITY_TYPE_NOT_YET_DEFINED"
                },
                {
                  "problem-kind-name": "RLIME Oversubscription",
                  "problem-kind-severity": "ethernet-container-2-0:SEVERITY_TYPE_NOT_YET_DEFINED"
                },
                {
                  "problem-kind-name": "No Traffic",
                  "problem-kind-severity": "ethernet-container-2-0:SEVERITY_TYPE_NOT_YET_DEFINED"
                },
                {
                  "problem-kind-name": "Unable to Protect",
                  "problem-kind-severity": "ethernet-container-2-0:SEVERITY_TYPE_NOT_YET_DEFINED"
                },
                {
                  "problem-kind-name": "Interface/Port status not Up",
                  "problem-kind-severity": "ethernet-container-2-0:SEVERITY_TYPE_NOT_YET_DEFINED"
                },
                {
                  "problem-kind-name": "Reassembly failure",
                  "problem-kind-severity": "ethernet-container-2-0:SEVERITY_TYPE_NOT_YET_DEFINED"
                },
                {
                  "problem-kind-name": "Received Invalid CCM",
                  "problem-kind-severity": "ethernet-container-2-0:SEVERITY_TYPE_NOT_YET_DEFINED"
                },
                {
                  "problem-kind-name": "Mismerge (incorrect MA ID in CCM)",
                  "problem-kind-severity": "ethernet-container-2-0:SEVERITY_TYPE_NOT_YET_DEFINED"
                },
                {
                  "problem-kind-name": "Unexpected MD Level in CCM",
                  "problem-kind-severity": "ethernet-container-2-0:SEVERITY_TYPE_NOT_YET_DEFINED"
                },
                {
                  "problem-kind-name": "Lost CCMs",
                  "problem-kind-severity": "ethernet-container-2-0:SEVERITY_TYPE_NOT_YET_DEFINED"
                },
                {
                  "problem-kind-name": "Degraded Service",
                  "problem-kind-severity": "ethernet-container-2-0:SEVERITY_TYPE_NOT_YET_DEFINED"
                },
                {
                  "problem-kind-name": "Unexpected Period in CCM",
                  "problem-kind-severity": "ethernet-container-2-0:SEVERITY_TYPE_NOT_YET_DEFINED"
                },
                {
                  "problem-kind-name": "Unexpected MEP Condition",
                  "problem-kind-severity": "ethernet-container-2-0:SEVERITY_TYPE_NOT_YET_DEFINED"
                }
              ],
              "header-compression-kind": "no-compression",
              "statistics-is-on": true,
              "fec-word-size": -1,
              "fec-interleaver-kind": "ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_NOT_YET_DEFINED"
            }
          }
        },
        {
          "objectUnderTest": "ethernet-container-current-problems",
          "attributeUnderTest": "",
          "nameOfTheDeviceUnderTest": "513250010",
          "responseCode": 200,
          "message": "Missing required property: current-problem-list",
          "description": "ValidationError",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac/ethernet-container-current-problems?content=nonconfig",
          "requestBody": "",
          "response": {
            "ethernet-container-2-0:ethernet-container-current-problems": {
              "number-of-current-problems": 0,
              "time-of-latest-change": "2010-11-20T14:00:00+01:00"
            }
          }
        },
        {
          "objectUnderTest": "ethernet-container-configuration",
          "attributeUnderTest": "queue-behavior-list/dropping-behavior-kind",
          "nameOfTheDeviceUnderTest": "513250010",
          "responseCode": 500,
          "message": "Not configurable on application layer",
          "description": "Error in Configuration of queue-behavior-list/dropping-behavior-kind",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac/ethernet-container-configuration/queue-behavior-list=ethernet-container-2-0%3AQUEUE_NAME_TYPE_EXPEDITED_FORWARDING_QUEUE/dropping-behavior-kind?content=config",
          "requestBody": "{ \"ethernet-container-2-0:dropping-behavior-kind\": \"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_DROP_TAIL\" }",
          "response": "RemoteDevice{513250010}:RPC during tx failed. /control-construct/logical-termination-point[uuid='ETH-2134638594']/layer-protocol[local-id='2134638594']/ethernet-container:ethernet-container-pac/ethernet-container-configuration/queue-behavior-list[queue-name='ethernet-container:QUEUE_NAME_TYPE_EXPEDITED_FORWARDING_QUEUE']/dropping-behavior-kind: Exception in callback: #[onf:Attribute/feature not supported by the hardware.]# Attribute can only be set globally<bad-element>dropping-behavior-kind</bad-element>"
        },
        {
          "objectUnderTest": "ethernet-container-configuration",
          "attributeUnderTest": "queue-behavior-list/scheduler-kind",
          "nameOfTheDeviceUnderTest": "513250010",
          "responseCode": 500,
          "message": "Not configurable on application layer",
          "description": "Error in Configuration of queue-behavior-list/scheduler-kind",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=ETH-2134638594/layer-protocol=2134638594/ethernet-container-2-0:ethernet-container-pac/ethernet-container-configuration/queue-behavior-list=ethernet-container-2-0%3AQUEUE_NAME_TYPE_EXPEDITED_FORWARDING_QUEUE/scheduler-kind?content=config",
          "requestBody": "{ \"ethernet-container-2-0:scheduler-kind\": \"ethernet-container-2-0:SCHEDULER_KIND_TYPE_WFQ\" }",
          "response": "RemoteDevice{513250010}:RPC during tx failed. /control-construct/logical-termination-point[uuid='ETH-2134638594']/layer-protocol[local-id='2134638594']/ethernet-container:ethernet-container-pac/ethernet-container-configuration/queue-behavior-list[queue-name='ethernet-container:QUEUE_NAME_TYPE_EXPEDITED_FORWARDING_QUEUE']/scheduler-kind: Exception in callback: #[onf:Attribute/feature not supported by the hardware.]# Attribute can only be set globally<bad-element>scheduler-kind</bad-element>"
        },
        {
          "objectUnderTest": "hybrid-mw-structure-",
          "attributeUnderTest": "",
          "nameOfTheDeviceUnderTest": "513250010",
          "responseCode": 200,
          "message": "Missing required property: connector",
          "description": "ValidationError",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=HMS-2146697473?content=nonconfig&depth=5",
          "requestBody": "",
          "response": {
            "core-model-1-4:logical-termination-point": [
              {
                "uuid": "HMS-2146697473",
                "lifecycle-state": "core-model-1-4:LIFECYCLE_STATE_INSTALLED",
                "client-ltp": [
                  "TDM-2147352839",
                  "TDM-2147352837",
                  "TDM-2147352838",
                  "TDM-2147352835",
                  "TDM-2147352836",
                  "TDM-2147352833",
                  "TDM-2147352844",
                  "TDM-2147352834",
                  "TDM-2147352842",
                  "TDM-2147352832",
                  "TDM-2147352843",
                  "TDM-2147352840",
                  "TDM-2147352841"
                ],
                "server-ltp": [
                  "RF-2146697473"
                ],
                "layer-protocol": [
                  {
                    "local-id": "2146697473",
                    "lifecycle-state": "core-model-1-4:LIFECYCLE_STATE_INSTALLED",
                    "hybrid-mw-structure-2-0:hybrid-mw-structure-pac": {
                      "hybrid-mw-structure-configuration": {
                        "number-of-tdm-segments-to-be-reserved": 13,
                        "clearing-threshold-cross-alarms-is-on": false,
                        "tdm-structure-kind": "e1",
                        "performance-monitoring-is-on": false
                      },
                      "hybrid-mw-structure-capability": {
                        "supported-tdm-structure-kind-list": [
                          {}
                        ],
                        "performance-monitoring-is-avail": false
                      },
                      "hybrid-mw-structure-current-performance": {
                        "number-of-current-performance-sets": -1
                      },
                      "hybrid-mw-structure-historical-performances": {
                        "time-of-latest-change": "2010-11-20T14:00:00+01:00",
                        "number-of-historical-performance-sets": -1
                      },
                      "hybrid-mw-structure-current-problems": {
                        "time-of-latest-change": "2010-11-20T14:00:00+01:00",
                        "number-of-current-problems": -1
                      },
                      "hybrid-mw-structure-status": {
                        "segment-status-list": [
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {}
                        ],
                        "performance-monitoring-is-up": false
                      }
                    },
                    "layer-protocol-name": "hybrid-mw-structure-2-0:LAYER_PROTOCOL_NAME_TYPE_HYBRID_MW_STRUCTURE_LAYER",
                    "termination-state": "core-model-1-4:TERMINATION_STATE_TERMINATED_BIDIRECTIONAL",
                    "administrative-state": "core-model-1-4:ADMINISTRATIVE_STATE_UNLOCKED",
                    "lp-direction": "core-model-1-4:TERMINATION_DIRECTION_BIDIRECTIONAL",
                    "name": [
                      {
                        "value-name": "lpName",
                        "value": "2146697473"
                      }
                    ],
                    "operational-state": "core-model-1-4:OPERATIONAL_STATE_ENABLED",
                    "administrative-control": "core-model-1-4:ADMINISTRATIVE_CONTROL_UNLOCK"
                  }
                ],
                "ltp-direction": "core-model-1-4:TERMINATION_DIRECTION_BIDIRECTIONAL",
                "ltp-augment-1-0:ltp-augment-pac": {
                  "ltp-augment-capability": {
                    "equipment": [
                      "1921262079",
                      "1921265663"
                    ]
                  }
                },
                "administrative-state": "core-model-1-4:ADMINISTRATIVE_STATE_UNLOCKED",
                "name": [
                  {
                    "value-name": "ltpName",
                    "value": "RF 1/2.1/1"
                  }
                ],
                "operational-state": "core-model-1-4:OPERATIONAL_STATE_DISABLED",
                "administrative-control": "core-model-1-4:ADMINISTRATIVE_CONTROL_UNLOCK"
              }
            ]
          }
        },
        {
          "objectUnderTest": "hybrid-mw-structure-configuration",
          "attributeUnderTest": "tdm-structure-kind",
          "nameOfTheDeviceUnderTest": "513250010",
          "responseCode": 500,
          "message": "Not configurable on application layer",
          "description": "Error in Configuration of tdm-structure-kind",
          "requestUri": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf/node=513250010/yang-ext:mount/core-model-1-4:control-construct/logical-termination-point=HMS-2146697473/layer-protocol=2146697473/hybrid-mw-structure-2-0:hybrid-mw-structure-pac/hybrid-mw-structure-configuration/tdm-structure-kind?content=config",
          "requestBody": "{ \"hybrid-mw-structure-2-0:tdm-structure-kind\": \"cpri7\" }",
          "response": "RemoteDevice{513250010}:RPC during tx failed. /control-construct/logical-termination-point[uuid='HMS-2146697473']/layer-protocol[local-id='2146697473']/hybrid-mw-structure:hybrid-mw-structure-pac/hybrid-mw-structure-configuration/tdm-structure-kind (value \"cpri7\"): the 'must' expression \"boolean(/core-model:control-construct/core-model:logical-termination-point/core-model:layer-protocol/hybrid-mw-structure:hybrid-mw-structure-pac/hybrid-mw-structure:hybrid-mw-structure-capability/hybrid-mw-structure:supported-tdm-structure-kind-list[tdm-structure-name=current()])\" failed<bad-element>tdm-structure-kind</bad-element>"
        }
      ],
      "key": "validationErrorResults"
    },
    {
      "type": "any",
      "value": "off",
      "key": "mantisInterfaceStatus"
    },
    {
      "type": "any",
      "value": "http://172.29.145.220:8181/rests/data/network-topology:network-topology/topology=topology-netconf?content=config&fields=node(node-id;netconf-node-topology:connection-status)",
      "key": "dummyUri"
    },
    {
      "type": "any",
      "value": 500,
      "key": "responseCodeForConfigurationError"
    },
    {
      "type": "any",
      "value": "#[onf:Attribute/feature not supported by the hardware.]#",
      "key": "errorMessageForNotSupported"
    },
    {
      "type": "any",
      "value": "#[onf:Configuration value out of range of hardware capabilities.]#",
      "key": "errorMessageForOutOfRange"
    },
    {
      "type": "any",
      "value": "#[onf:Wished change contradicts existing configuration.]#",
      "key": "errorMessageForAgainstExisting"
    },
    {
      "type": "any",
      "value": "#[onf:Wished changes are not consistent.]#",
      "key": "errorMessageForInconsistent"
    },
    {
      "type": "any",
      "value": "parallel",
      "key": "TEST_EXECUTION"
    },
    {
      "type": "any",
      "value": "complete",
      "key": "LOAD_LTP_FROM_NETWORK"
    },
    {
      "type": "any",
      "value": null,
      "key": "TEST_CONFIG_DATA"
    },
    {
      "type": "any",
      "value": [
        513250010
      ],
      "key": "deviceListUnderTest"
    },
    {
      "type": "any",
      "value": 1,
      "key": "indexOfDeviceUnderTest"
    },
    {
      "type": "any",
      "value": "one",
      "key": "multiplicityOfDeviceIterations"
    },
    {
      "type": "any",
      "value": [
        "air-interface",
        "ethernet-container",
        "hybrid-mw-structure"
      ],
      "key": "interfaceListUnderTest"
    },
    {
      "type": "any",
      "value": "one",
      "key": "multiplicityOfinterfaceIterations"
    },
    {
      "type": "any",
      "value": [],
      "key": "NAME_OF_NOT_REQUIRED_DEVICE_FROM_TEST"
    },
    {
      "type": "any",
      "value": 1,
      "key": "TotalNumberOfNodes"
    },
    {
      "type": "any",
      "value": 1,
      "key": "NumberOfConnectedNodes"
    },
    {
      "type": "any",
      "value": [
        "513250010"
      ],
      "key": "ConnectedNodes"
    },
    {
      "type": "any",
      "value": 0,
      "key": "NumberOfFaultyNodes"
    },
    {
      "type": "any",
      "value": [],
      "key": "FaultyNodes"
    },
    {
      "type": "any",
      "value": 0,
      "key": "NumberOfFailedLTPNodes"
    },
    {
      "type": "any",
      "value": [],
      "key": "FailedLTPNodes"
    },
    {
      "type": "any",
      "value": [],
      "key": "NewIdentifiedNodeList"
    },
    {
      "type": "any",
      "value": 0,
      "key": "NumberOfNewIdentifiedNodes"
    },
    {
      "type": "any",
      "value": [],
      "key": "SelectedFaultyNodeList"
    },
    {
      "type": "any",
      "value": 1,
      "key": "NumberOfSuccessfulLTPNodes"
    },
    {
      "type": "any",
      "value": [
        "513250010"
      ],
      "key": "SuccessfulLTPNodes"
    },
    {
      "type": "any",
      "value": "() => {\n    // Required Input Parameters\n    try {\n        var mantisIssueList = pm.environment.get(\"mantisIssueList\");\n        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");\n        var classUnderTest = pm.variables.get(\"classUnderTest\");\n        var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");\n        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");\n        CouldInputForFilteringMantisIssuesBeLoaded(mantisIssueList, technologyUnderTest, \n                                                        classUnderTest,\n                                                        attributeUnderTest\n                                                   );\n    } catch (error) {\n        CouldInputForFilteringMantisIssuesBeLoaded();\n    }\n\n    // Filtering the Mantis Issues for Technology and Class\n    try {\n        let technologyAndClassUnderTest = technologyUnderTest + \"-\" + classUnderTest;\n        var filteredIssueList = mantisIssueList;\n        for (let i=(filteredIssueList.length-1); i>=0; i--) {\n            let summary = filteredIssueList[i].summary;\n            let indexOfTwoColons = summary.indexOf(\"::\");\n            let technologyAndClass = summary.slice(0, indexOfTwoColons);\n            if (technologyAndClass!==technologyAndClassUnderTest){\n                filteredIssueList.splice(i,1);\n            } else {\n                if ( (datatypeUnderTest!==undefined) && (datatypeUnderTest!==\"\") ) {\n                    let indexOfSecondTwoColons = summary.indexOf(\"::\", indexOfTwoColons+1);\n                    let dataType = summary.slice(indexOfTwoColons+2, indexOfSecondTwoColons);\n                    if (dataType!==datatypeUnderTest){\n                        filteredIssueList.splice(i,1);\n                    } else {\n                        if ( (attributeUnderTest!==undefined) && (attributeUnderTest!==\"\") ) {\n                            let indexOfBlank = summary.indexOf(\" \");\n                            let attributeName = summary.slice(indexOfSecondTwoColons+2, indexOfBlank);\n                            if (attributeName!==attributeUnderTest){\n                                filteredIssueList.splice(i,1);\n                            }\n                        }\n                    }\n                } else {\n                    if ( (attributeUnderTest!==undefined) && (attributeUnderTest!==\"\") ) {\n                        let indexOfBlank = summary.indexOf(\" \");\n                        let attributeName = summary.slice(indexOfTwoColons+2, indexOfBlank);\n                        if (attributeName!==attributeUnderTest){\n                            filteredIssueList.splice(i,1);\n                        }\n                    }\n                }\n            }\n        }\n        CouldMantisIssueListBeFiltered(filteredIssueList);\n    } catch (error) {\n        CouldMantisIssueListBeFiltered();\n    }\n    \n    // Printing filtered Issues into the Console\n    try {\n        if ( filteredIssueList.length>0 ) {\n            console.log(\"Issues documented in Mantis:\");\n            for (let i=0; i<filteredIssueList.length; i++) {\n                let indexOfIssue = filteredIssueList[i].id;\n                let summary = filteredIssueList[i].summary;\n                let indexOfTwoColons = summary.indexOf(\"::\");\n                let attributeAndError = summary.slice(indexOfTwoColons+2);\n                let status = filteredIssueList[i].status;\n                console.log(\"#\" + indexOfIssue + \" : \" + attributeAndError + \" (\" + status + \")\");\n            }\n        }\n        CouldMantisIssueListBePrinted(true);\n    } catch (error) {\n        CouldMantisIssueListBePrinted(false);\n    }\n    \n    // Provided Output Parameters\n    pm.variables.set(\"filteredIssueList\", filteredIssueList);\n    \n    // Self Testing Functions\n    function CouldInputForFilteringMantisIssuesBeLoaded(mantisIssueList, technologyUnderTest, \n                                                            classUnderTest,\n                                                            attributeUnderTest) {\n        pm.test(\"CouldInputForFilteringMantisIssuesBeLoaded\", function () {\n            pm.expect(mantisIssueList).to.be.an(\"array\");\n            pm.expect(technologyUnderTest).to.be.a(\"string\");\n            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);\n            pm.expect(classUnderTest).to.be.a(\"string\");\n            pm.expect(classUnderTest).to.not.have.lengthOf(0);\n            pm.expect(attributeUnderTest).to.be.a(\"string\");\n        });\n    }\n    \n    function CouldMantisIssueListBeFiltered(filteredIssueList) {\n        pm.test(\"CouldMantisIssueListBeFiltered\", function () {\n            pm.expect(filteredIssueList).to.be.an(\"array\");\n        });\n    }\n        \n    function CouldMantisIssueListBePrinted(success) {\n        pm.test(\"CouldMantisIssueListBePrinted\", function () {\n            pm.expect(success).to.be.true;\n        });\n    }\n}",
      "key": "PrintMantisIssuesForTechnologyAndClass"
    },
    {
      "type": "any",
      "value": "() => {\n    // Required Input Parameters\n    try {\n        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");\n            \n        var controller = pm.environment.get(\"controller\");\n        var dummyUri = pm.environment.get(\"dummyUri\");\n        var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");\n                    \n        var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");\n        var pacUnderTest = pm.collectionVariables.get(\"pacUnderTest\");\n        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");\n        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");\n            \n        var classUnderTest = pm.variables.get(\"classUnderTest\");\n        var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");\n        var keysOfDatatypeInstanceUnderTest = pm.variables.get(\"keysOfDatatypeInstanceUnderTest\");\n        var filteredContent = pm.variables.get(\"filteredContent\");\n        var filteredDepth = pm.variables.get(\"filteredDepth\");\n        var filteredFields = pm.variables.get(\"filteredFields\");\n        CouldInputForSettingTheRequestVariablesBeLoaded(attributeUnderTest,\n                                                            controller, \n                                                            dummyUri,\n                                                            indexOfDeviceUnderTest, \n                                                            indexOfLtpUnderTest,\n                                                            pacUnderTest,\n                                                            moduleUnderTest,\n                                                            technologyUnderTest,\n                                                            classUnderTest,\n                                                            datatypeUnderTest,\n                                                            keysOfDatatypeInstanceUnderTest,\n                                                            filteredContent,\n                                                            filteredDepth,\n                                                            filteredFields\n                                                        );\n    } catch (error) {\n        CouldInputForSettingTheRequestVariablesBeLoaded();\n    }\n        \n    // Preparing the Request\n    try {\n        let nodeIds = controller.nodeList[indexOfDeviceUnderTest];\n        var idPair;\n        switch (technologyUnderTest) {\n            case \"air-interface\":\n                idPair = nodeIds.airInterfaceList[indexOfLtpUnderTest];\n                break;\n            case \"ethernet-container\":\n                idPair = nodeIds.ethernetContainerList[indexOfLtpUnderTest];\n                break;\n            case \"hybrid-mw-structure\":\n                idPair = nodeIds.hybridMwStructureList[indexOfLtpUnderTest];\n                break;\n            case \"ip-interface\":\n                idPair = nodeIds.ipInterfaceList[indexOfLtpUnderTest];\n                break;\n            case \"mac-interface\":\n                idPair = nodeIds.macInterfaceList[indexOfLtpUnderTest];\n                break;\n            case \"pure-ethernet-structure\":\n                idPair = nodeIds.pureEthernetStructureList[indexOfLtpUnderTest];\n                break;\n            case \"tdm-container\":\n                idPair = nodeIds.tdmContainerList[indexOfLtpUnderTest];\n                break;\n            case \"vlan-interface\":\n                idPair = nodeIds.vlanInterfaceList[indexOfLtpUnderTest];\n                break;\n            case \"wire-interface\":\n                idPair = nodeIds.wireInterfaceList[indexOfLtpUnderTest];\n                break;\n        }\n        CouldIdPairForSettingTheRequestVariablesBeRetrieved(attributeUnderTest, idPair);\n    } catch (error) {\n        CouldIdPairForSettingTheRequestVariablesBeRetrieved(attributeUnderTest);\n    }\n        \n    try {\n        var objectUnderTest = \"/core-model-1-4:control-construct/logical-termination-point=\" \n                                    + idPair.ltpUuid;\n        if (classUnderTest!==\"\") {\n            objectUnderTest = objectUnderTest\n                                    + \"/layer-protocol=\" \n                                    + idPair.lpLid\n                                    + \"/\"\n                                    + pacUnderTest;\n        }\n        if ( (typeof technologyUnderTest!=\"undefined\") \n                && (technologyUnderTest!==\"\")\n                && (classUnderTest!==\"\")\n                && (classUnderTest!==\"pac\") ) {\n            objectUnderTest = objectUnderTest\n                                    + \"/\"\n                                    + technologyUnderTest\n                                    + \"-\"\n                                    + classUnderTest;\n        }\n        if ( (typeof datatypeUnderTest!=\"undefined\") && (datatypeUnderTest !== \"\") ) {\n            objectUnderTest = objectUnderTest\n                                    + \"/\"\n                                    + datatypeUnderTest;\n        }\n        if ( (typeof keysOfDatatypeInstanceUnderTest[0].value!=\"undefined\") && (keysOfDatatypeInstanceUnderTest[0].value!==\"\") ) {\n            objectUnderTest = objectUnderTest\n                                    + \"=\"\n                                    + ReplaceColonsInside(keysOfDatatypeInstanceUnderTest[0].value);\n            for (let i=1; i<keysOfDatatypeInstanceUnderTest.length; i++) {\n                objectUnderTest = objectUnderTest\n                                    + \",\"\n                                    + ReplaceColonsInside(keysOfDatatypeInstanceUnderTest[i].value);\n            }\n        } \n        if ( (typeof attributeUnderTest!=\"undefined\") && (attributeUnderTest !== \"\") ) {\n            objectUnderTest = objectUnderTest\n                                    + \"/\"\n                                    + attributeUnderTest;\n        }    \n        let alreadySomeFilterAttached = false;\n        if ( (typeof filteredContent!=\"undefined\") \n                && (typeof filteredDepth!=\"undefined\") \n                && (typeof filteredFields!=\"undefined\") ) {\n            if (filteredContent !== \"\" || filteredDepth !== 0 || filteredFields !== \"\") {\n                objectUnderTest = objectUnderTest\n                                        + \"?\";\n            }\n            if (filteredContent !== \"\") {\n                objectUnderTest = objectUnderTest\n                                        + \"content=\"\n                                        + filteredContent;\n                alreadySomeFilterAttached = true;\n            }\n            if (filteredDepth !== 0) {\n                if (alreadySomeFilterAttached) {\n                     objectUnderTest = objectUnderTest\n                                        + \"&\";\n                }\n                objectUnderTest = objectUnderTest\n                                        + \"depth=\"\n                                        + filteredDepth;\n                alreadySomeFilterAttached = true;\n            }\n            if (filteredFields !== \"\") {\n                if (alreadySomeFilterAttached) {\n                     objectUnderTest = objectUnderTest\n                                        + \"&\";\n                }\n                objectUnderTest = objectUnderTest\n                                        + \"fields=\"\n                                        + filteredFields;\n                alreadySomeFilterAttached = true;\n            }\n        }\n        HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(attributeUnderTest, objectUnderTest);\n    } catch (error) {\n        HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(attributeUnderTest);\n    }\n        \n    try {\n        var uri = \"http://\" \n                    + controller.controllerAddress \n                    + controller.pathToDbAndMountPoint \n                    + \"/node=\" \n                    + controller.nodeList[indexOfDeviceUnderTest].nodeId \n                    + \"/yang-ext:mount\" \n                    + objectUnderTest;\n        HasUriBeenDefinedForSettingTheRequestVariables(attributeUnderTest, uri);\n    } catch (error) {\n\n    console.log(\"Jetzt kriegt er die Adrese nich hin\")\n        uri = dummyUri;\n        HasUriBeenDefinedForSettingTheRequestVariables(attributeUnderTest);\n    }\n        \n    pm.variables.set(\"uri\", uri);\n    pm.request.headers.upsert({key:\"Authorization\", value:controller.authorizationCode});\n    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});\n    pm.request.headers.upsert({key:\"Content-Type\", value:\"application/json\"});    \n    //pm.collectionVariables.set(\"requestUri\", uri);\n    pm.variables.set(\"requestUri\", uri);\n\n    // Functions\n    function ReplaceColonsInside(keyAttributeValue) {\n        return encodeURIComponent(keyAttributeValue);\n    }\n\n    // Self Testing Functions\n    function CouldInputForSettingTheRequestVariablesBeLoaded(attributeUnderTest,\n                                                                controller, \n                                                                uri,\n                                                                indexOfDeviceUnderTest, \n                                                                indexOfLtpUnderTest,\n                                                                pacUnderTest,\n                                                                moduleUnderTest,\n                                                                technologyUnderTest,\n                                                                classUnderTest,\n                                                                datatypeUnderTest,\n                                                                keysOfDatatypeInstanceUnderTest,\n                                                                filteredContent,\n                                                                filteredDepth,\n                                                                filteredFields) {\n        pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {\n            pm.expect(attributeUnderTest).to.be.a(\"string\");\n        });\n        pm.test(\"CouldControllerBeLoaded (\" + attributeUnderTest + \")\", function () {\n            pm.expect(controller).to.be.an(\"object\");\n        });\n        pm.test(\"CouldUriBeLoaded (\" + attributeUnderTest + \")\", function () {\n            pm.expect(uri).to.be.a(\"string\");\n        });\n        pm.test(\"CouldIndexOfDeviceUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {\n            pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");\n        });\n        pm.test(\"CouldIndexOfLtpUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {\n            pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");\n        });\n        pm.test(\"CouldPacUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {\n            pm.expect(pacUnderTest).to.be.a(\"string\");\n            pm.expect(pacUnderTest).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldModuleUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {\n            pm.expect(moduleUnderTest).to.be.a(\"string\");\n            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldTechnologyUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {\n            pm.expect(technologyUnderTest).to.be.a(\"string\");\n            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldClassUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {\n            pm.expect(classUnderTest).to.be.a(\"string\");\n        });\n        pm.test(\"CouldDatatypeUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {\n            pm.expect(datatypeUnderTest).to.be.a(\"string\");\n        });\n        pm.test(\"CouldKeysOfDatatypeInstanceUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {\n            pm.expect(keysOfDatatypeInstanceUnderTest).to.be.an(\"array\");\n        });\n        pm.test(\"CouldFilteredContentBeLoaded (\" + attributeUnderTest + \")\", function () {\n            pm.expect(filteredContent).to.be.a(\"string\");\n        });\n        pm.test(\"CouldFilteredDepthBeLoaded (\" + attributeUnderTest + \")\", function () {\n            pm.expect(filteredDepth).to.be.a(\"number\");\n            pm.expect(filteredFields).to.be.a(\"string\");\n        });\n    }\n        \n    function CouldIdPairForSettingTheRequestVariablesBeRetrieved(location, idPair) {\n        pm.test(\"CouldIdPairForSettingTheRequestVariablesBeRetrieved (\" + location + \")\", function () {\n            pm.expect(idPair.ltpUuid).to.be.a(\"string\");\n            pm.expect(idPair.ltpUuid).to.not.have.lengthOf(0);\n            pm.expect(idPair.lpLid).to.be.an(\"string\");\n            pm.expect(idPair.lpLid).to.not.have.lengthOf(0);\n        });\n    }\n    \n    function HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(location, objectUnderTest) {\n        pm.test(\"HasObjectUnderTestBeenDefinedForSettingTheRequestVariables (\" + location + \")\", function () {\n            pm.expect(objectUnderTest).to.be.a(\"string\");\n            pm.expect(objectUnderTest).to.not.have.lengthOf(0);\n        });\n    }\n    \n    function HasUriBeenDefinedForSettingTheRequestVariables(location, uri) {\n        pm.test(\"HasUriBeenDefinedForSettingTheRequestVariables (\" + location + \")\", function () {\n            pm.expect(uri).to.be.a(\"string\");\n            pm.expect(uri).to.not.have.lengthOf(0);\n        });\n    }\n}",
      "key": "SettingTheRequestVariables"
    },
    {
      "type": "any",
      "value": "() => {\n    // Required Input Parameters\n    try {\n        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");\n            \n        var controller = pm.environment.get(\"controller\");\n        var dummyUri = pm.environment.get(\"dummyUri\");\n        var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");\n            \n        var indexOfFdUnderTest = pm.collectionVariables.get(\"indexOfFdUnderTest\");\n        var pacUnderTest = pm.collectionVariables.get(\"pacUnderTest\");\n        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");\n        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");\n            \n        var classUnderTest = pm.variables.get(\"classUnderTest\");\n        var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");\n        var keysOfDatatypeInstanceUnderTest = pm.variables.get(\"keysOfDatatypeInstanceUnderTest\");\n        var filteredContent = pm.variables.get(\"filteredContent\");\n        var filteredDepth = pm.variables.get(\"filteredDepth\");\n        var filteredFields = pm.variables.get(\"filteredFields\");\n        CouldInputForSettingTheRequestVariablesBeLoaded(attributeUnderTest,\n                                                            controller, \n                                                            dummyUri,\n                                                            indexOfDeviceUnderTest, \n                                                            indexOfFdUnderTest,\n                                                            pacUnderTest,\n                                                            moduleUnderTest,\n                                                            technologyUnderTest,\n                                                            classUnderTest,\n                                                            datatypeUnderTest,\n                                                            keysOfDatatypeInstanceUnderTest,\n                                                            filteredContent,\n                                                            filteredDepth,\n                                                            filteredFields\n                                                        );\n    } catch (error) {\n        CouldInputForSettingTheRequestVariablesBeLoaded();\n    }\n\n    // Preparing the Request\n    try {\n        let nodeIds = controller.nodeList[indexOfDeviceUnderTest];\n        var idPair;\n        switch (technologyUnderTest) {\n            case \"ethernet-container-fd\":\n                idPair = nodeIds.ethernetContainerFdList[indexOfFdUnderTest];\n                break;\n            case \"mac-fd\":\n                idPair = nodeIds.macFdList[indexOfFdUnderTest];\n                break;\n            case \"tdm-container-fd\":\n                idPair = nodeIds.tdmContainerFdList[indexOfFdUnderTest];\n                break;\n            case \"vlan-fd\":\n                idPair = nodeIds.vlanFdList[indexOfFdUnderTest];\n                break;\n        }\n        CouldIdPairForSettingTheRequestVariablesBeRetrieved(attributeUnderTest, idPair);\n    } catch (error) {\n        CouldIdPairForSettingTheRequestVariablesBeRetrieved(attributeUnderTest);\n    }\n        \n    try {\n        var objectUnderTest = \"/core-model-1-4:control-construct/forwarding-domain=\" \n                                    + idPair.ltpUuid;\n        if (classUnderTest!==\"\") {\n            objectUnderTest = objectUnderTest\n                                    + \"/\"\n                                    + pacUnderTest;\n        }\n        if ( (typeof technologyUnderTest!=\"undefined\") \n                && (technologyUnderTest!==\"\")\n                && (classUnderTest!==\"\")\n                && (classUnderTest!==\"pac\") ) {\n            objectUnderTest = objectUnderTest\n                                    + \"/\"\n                                    + technologyUnderTest\n                                    + \"-\"\n                                    + classUnderTest;\n        }\n        if ( (typeof datatypeUnderTest!=\"undefined\") && (datatypeUnderTest !== \"\") ) {\n            objectUnderTest = objectUnderTest\n                                    + \"/\"\n                                    + datatypeUnderTest;\n        }\n        if ( (typeof keysOfDatatypeInstanceUnderTest[0].value!=\"undefined\") && (keysOfDatatypeInstanceUnderTest[0].value!==\"\") ) {\n            objectUnderTest = objectUnderTest\n                                    + \"=\"\n                                    + ReplaceColonsInside(keysOfDatatypeInstanceUnderTest[0].value);\n            for (let i=1; i<keysOfDatatypeInstanceUnderTest.length; i++) {\n                objectUnderTest = objectUnderTest\n                                    + \",\"\n                                    + ReplaceColonsInside(keysOfDatatypeInstanceUnderTest[i].value);\n            }\n        } \n        if ( (typeof attributeUnderTest!=\"undefined\") && (attributeUnderTest !== \"\") ) {\n            objectUnderTest = objectUnderTest\n                                    + \"/\"\n                                    + attributeUnderTest;\n        }    \n        let alreadySomeFilterAttached = false;\n        if ( (typeof filteredContent!=\"undefined\") \n                && (typeof filteredDepth!=\"undefined\") \n                && (typeof filteredFields!=\"undefined\") ) {\n            if (filteredContent !== \"\" || filteredDepth !== 0 || filteredFields !== \"\") {\n                objectUnderTest = objectUnderTest\n                                        + \"?\";\n            }\n            if (filteredContent !== \"\") {\n                objectUnderTest = objectUnderTest\n                                        + \"content=\"\n                                        + filteredContent;\n                alreadySomeFilterAttached = true;\n            }\n            if (filteredDepth !== 0) {\n                if (alreadySomeFilterAttached) {\n                     objectUnderTest = objectUnderTest\n                                        + \"&\";\n                }\n                objectUnderTest = objectUnderTest\n                                        + \"depth=\"\n                                        + filteredDepth;\n                alreadySomeFilterAttached = true;\n            }\n            if (filteredFields !== \"\") {\n                if (alreadySomeFilterAttached) {\n                     objectUnderTest = objectUnderTest\n                                        + \"&\";\n                }\n                objectUnderTest = objectUnderTest\n                                        + \"fields=\"\n                                        + filteredFields;\n                alreadySomeFilterAttached = true;\n            }\n        }\n        HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(attributeUnderTest, objectUnderTest);\n    } catch (error) {\n        HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(attributeUnderTest);\n    }\n        \n    try {\n        var uri = \"http://\" \n                    + controller.controllerAddress \n                    + controller.pathToDbAndMountPoint \n                    + \"/node=\" \n                    + controller.nodeList[indexOfDeviceUnderTest].nodeId \n                    + \"/yang-ext:mount\" \n                    + objectUnderTest;\n        HasUriBeenDefinedForSettingTheRequestVariables(attributeUnderTest, uri);\n    } catch (error) {\n        uri = dummyUri;\n        HasUriBeenDefinedForSettingTheRequestVariables(attributeUnderTest);\n    }\n        \n    pm.variables.set(\"uri\", uri);\n    pm.request.headers.upsert({key:\"Authorization\", value:controller.authorizationCode});\n    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});\n    pm.request.headers.upsert({key:\"Content-Type\", value:\"application/json\"});\n        \n    // Functions\n    function ReplaceColonsInside(keyAttributeValue) {\n        return encodeURIComponent(keyAttributeValue);\n    }\n\n    // Self Testing Functions\n    function CouldInputForSettingTheRequestVariablesBeLoaded(attributeUnderTest,\n                                                                controller, \n                                                                uri,\n                                                                indexOfDeviceUnderTest, \n                                                                indexOfFdUnderTest,\n                                                                pacUnderTest,\n                                                                moduleUnderTest,\n                                                                technologyUnderTest,\n                                                                classUnderTest,\n                                                                datatypeUnderTest,\n                                                                keysOfDatatypeInstanceUnderTest,\n                                                                filteredContent,\n                                                                filteredDepth,\n                                                                filteredFields) {\n        pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {\n            pm.expect(attributeUnderTest).to.be.a(\"string\");\n        });\n        pm.test(\"CouldInputForSettingTheRequestVariablesBeLoaded (\" + attributeUnderTest + \")\", function () {\n            pm.expect(controller).to.be.an(\"object\");\n            pm.expect(uri).to.be.a(\"string\");\n            pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");\n            pm.expect(indexOfFdUnderTest).to.be.a(\"number\");\n            pm.expect(pacUnderTest).to.be.a(\"string\");\n            pm.expect(pacUnderTest).to.not.have.lengthOf(0);\n            pm.expect(moduleUnderTest).to.be.a(\"string\");\n            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);\n            pm.expect(technologyUnderTest).to.be.a(\"string\");\n            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);\n            pm.expect(classUnderTest).to.be.a(\"string\");\n            pm.expect(datatypeUnderTest).to.be.a(\"string\");\n            pm.expect(keysOfDatatypeInstanceUnderTest).to.be.an(\"array\");\n            pm.expect(filteredContent).to.be.a(\"string\");\n            pm.expect(filteredDepth).to.be.a(\"number\");\n            pm.expect(filteredFields).to.be.a(\"string\");\n        });\n    }\n        \n    function CouldIdPairForSettingTheRequestVariablesBeRetrieved(location, idPair) {\n        pm.test(\"CouldIdPairForSettingTheRequestVariablesBeRetrieved (\" + location + \")\", function () {\n            pm.expect(idPair.ltpUuid).to.be.a(\"string\");\n            pm.expect(idPair.ltpUuid).to.not.have.lengthOf(0);\n            pm.expect(idPair.lpLid).to.be.an(\"string\");\n        });\n    }\n    \n    function HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(location, objectUnderTest) {\n        pm.test(\"HasObjectUnderTestBeenDefinedForSettingTheRequestVariables (\" + location + \")\", function () {\n            pm.expect(objectUnderTest).to.be.a(\"string\");\n            pm.expect(objectUnderTest).to.not.have.lengthOf(0);\n        });\n    }\n    \n    function HasUriBeenDefinedForSettingTheRequestVariables(location, uri) {\n        pm.test(\"HasUriBeenDefinedForSettingTheRequestVariables (\" + location + \")\", function () {\n            pm.expect(uri).to.be.a(\"string\");\n            pm.expect(uri).to.not.have.lengthOf(0);\n        });\n    }\n}",
      "key": "SettingTheFdRequestVariables"
    },
    {
      "type": "any",
      "value": "() => {\n    // Required Input Parameters\n    try {\n        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");\n            \n        var controller = pm.environment.get(\"controller\");\n        var dummyUri = pm.environment.get(\"dummyUri\");\n        var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");\n            \n        var indexOfFcUnderTest = pm.collectionVariables.get(\"indexOfFcUnderTest\");\n        var pacUnderTest = pm.collectionVariables.get(\"pacUnderTest\");\n        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");\n        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");\n            \n        var classUnderTest = pm.variables.get(\"classUnderTest\");\n        var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");\n        var keysOfDatatypeInstanceUnderTest = pm.variables.get(\"keysOfDatatypeInstanceUnderTest\");\n        var filteredContent = pm.variables.get(\"filteredContent\");\n        var filteredDepth = pm.variables.get(\"filteredDepth\");\n        var filteredFields = pm.variables.get(\"filteredFields\");\n        CouldInputForSettingTheRequestVariablesBeLoaded(attributeUnderTest,\n                                                            controller, \n                                                            dummyUri,\n                                                            indexOfDeviceUnderTest, \n                                                            indexOfFcUnderTest,\n                                                            pacUnderTest,\n                                                            moduleUnderTest,\n                                                            technologyUnderTest,\n                                                            classUnderTest,\n                                                            datatypeUnderTest,\n                                                            keysOfDatatypeInstanceUnderTest,\n                                                            filteredContent,\n                                                            filteredDepth,\n                                                            filteredFields\n                                                        );\n    } catch (error) {\n        CouldInputForSettingTheRequestVariablesBeLoaded();\n    }\n\n    // Preparing the Request\n    try {\n        let nodeIds = controller.nodeList[indexOfDeviceUnderTest];\n        var idPair;\n        switch (technologyUnderTest) {\n            case \"ethernet-container-fc\":\n                idPair = nodeIds.ethernetContainerFcList[indexOfFcUnderTest];\n                break;\n            case \"tdm-container-fc\":\n                idPair = nodeIds.tdmContainerFcList[indexOfFcUnderTest];\n                break;\n            case \"vlan-fc\":\n                idPair = nodeIds.vlanFcList[indexOfFcUnderTest];\n                break;\n        }\n        CouldIdPairForSettingTheRequestVariablesBeRetrieved(attributeUnderTest, idPair);\n    } catch (error) {\n        CouldIdPairForSettingTheRequestVariablesBeRetrieved(attributeUnderTest);\n    }\n        \n    try {\n        var objectUnderTest = \"/core-model-1-4:control-construct/forwarding-domain=\" \n                                    + idPair.ltpUuid\n                                    + \"/fc=\" \n                                    + idPair.lpLid\n        if (classUnderTest!==\"\") {\n            objectUnderTest = objectUnderTest\n                                    + \"/\"\n                                    + pacUnderTest;\n        }\n        if ( (typeof technologyUnderTest!=\"undefined\") \n                && (technologyUnderTest!==\"\")\n                && (classUnderTest!==\"\")\n                && (classUnderTest!==\"pac\") ) {\n            objectUnderTest = objectUnderTest\n                                    + \"/\"\n                                    + technologyUnderTest\n                                    + \"-\"\n                                    + classUnderTest;\n        }\n        if ( (typeof datatypeUnderTest!=\"undefined\") && (datatypeUnderTest !== \"\") ) {\n            objectUnderTest = objectUnderTest\n                                    + \"/\"\n                                    + datatypeUnderTest;\n        }\n        if ( (typeof keysOfDatatypeInstanceUnderTest[0].value!=\"undefined\") && (keysOfDatatypeInstanceUnderTest[0].value!==\"\") ) {\n            objectUnderTest = objectUnderTest\n                                    + \"=\"\n                                    + ReplaceColonsInside(keysOfDatatypeInstanceUnderTest[0].value);\n            for (let i=1; i<keysOfDatatypeInstanceUnderTest.length; i++) {\n                objectUnderTest = objectUnderTest\n                                    + \",\"\n                                    + ReplaceColonsInside(keysOfDatatypeInstanceUnderTest[i].value);\n            }\n        } \n        if ( (typeof attributeUnderTest!=\"undefined\") && (attributeUnderTest !== \"\") ) {\n            objectUnderTest = objectUnderTest\n                                    + \"/\"\n                                    + attributeUnderTest;\n        }    \n        let alreadySomeFilterAttached = false;\n        if ( (typeof filteredContent!=\"undefined\") \n                && (typeof filteredDepth!=\"undefined\") \n                && (typeof filteredFields!=\"undefined\") ) {\n            if (filteredContent !== \"\" || filteredDepth !== 0 || filteredFields !== \"\") {\n                objectUnderTest = objectUnderTest\n                                        + \"?\";\n            }\n            if (filteredContent !== \"\") {\n                objectUnderTest = objectUnderTest\n                                        + \"content=\"\n                                        + filteredContent;\n                alreadySomeFilterAttached = true;\n            }\n            if (filteredDepth !== 0) {\n                if (alreadySomeFilterAttached) {\n                     objectUnderTest = objectUnderTest\n                                        + \"&\";\n                }\n                objectUnderTest = objectUnderTest\n                                        + \"depth=\"\n                                        + filteredDepth;\n                alreadySomeFilterAttached = true;\n            }\n            if (filteredFields !== \"\") {\n                if (alreadySomeFilterAttached) {\n                     objectUnderTest = objectUnderTest\n                                        + \"&\";\n                }\n                objectUnderTest = objectUnderTest\n                                        + \"fields=\"\n                                        + filteredFields;\n                alreadySomeFilterAttached = true;\n            }\n        }\n        HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(attributeUnderTest, objectUnderTest);\n    } catch (error) {\n        HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(attributeUnderTest);\n    }\n        \n    try {\n        var uri = \"http://\" \n                    + controller.controllerAddress \n                    + controller.pathToDbAndMountPoint \n                    + \"/node=\" \n                    + controller.nodeList[indexOfDeviceUnderTest].nodeId \n                    + \"/yang-ext:mount\" \n                    + objectUnderTest;\n        HasUriBeenDefinedForSettingTheRequestVariables(attributeUnderTest, uri);\n    } catch (error) {\n        uri = dummyUri;\n        HasUriBeenDefinedForSettingTheRequestVariables(attributeUnderTest);\n    }\n\n    pm.variables.set(\"uri\", uri);\n    pm.request.headers.upsert({key:\"Authorization\", value:controller.authorizationCode});\n    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});\n    pm.request.headers.upsert({key:\"Content-Type\", value:\"application/json\"});\n        \n    // Functions\n    function ReplaceColonsInside(keyAttributeValue) {\n        return encodeURIComponent(keyAttributeValue);\n    }\n\n    // Self Testing Functions\n    function CouldInputForSettingTheRequestVariablesBeLoaded(attributeUnderTest,\n                                                                controller, \n                                                                uri,\n                                                                indexOfDeviceUnderTest, \n                                                                indexOfFcUnderTest,\n                                                                pacUnderTest,\n                                                                moduleUnderTest,\n                                                                technologyUnderTest,\n                                                                classUnderTest,\n                                                                datatypeUnderTest,\n                                                                keysOfDatatypeInstanceUnderTest,\n                                                                filteredContent,\n                                                                filteredDepth,\n                                                                filteredFields) {\n        pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {\n            pm.expect(attributeUnderTest).to.be.a(\"string\");\n        });\n        pm.test(\"CouldInputForSettingTheRequestVariablesBeLoaded (\" + attributeUnderTest + \")\", function () {\n            pm.expect(controller).to.be.an(\"object\");\n            pm.expect(uri).to.be.a(\"string\");\n            pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");\n            pm.expect(indexOfFcUnderTest).to.be.a(\"number\");\n            pm.expect(pacUnderTest).to.be.a(\"string\");\n            pm.expect(pacUnderTest).to.not.have.lengthOf(0);\n            pm.expect(moduleUnderTest).to.be.a(\"string\");\n            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);\n            pm.expect(technologyUnderTest).to.be.a(\"string\");\n            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);\n            pm.expect(classUnderTest).to.be.a(\"string\");\n            pm.expect(datatypeUnderTest).to.be.a(\"string\");\n            pm.expect(keysOfDatatypeInstanceUnderTest).to.be.an(\"array\");\n            pm.expect(filteredContent).to.be.a(\"string\");\n            pm.expect(filteredDepth).to.be.a(\"number\");\n            pm.expect(filteredFields).to.be.a(\"string\");\n        });\n    }\n        \n    function CouldIdPairForSettingTheRequestVariablesBeRetrieved(location, idPair) {\n        pm.test(\"CouldIdPairForSettingTheRequestVariablesBeRetrieved (\" + location + \")\", function () {\n            pm.expect(idPair.ltpUuid).to.be.a(\"string\");\n            pm.expect(idPair.ltpUuid).to.not.have.lengthOf(0);\n            pm.expect(idPair.lpLid).to.be.an(\"string\");\n            pm.expect(idPair.lpLid).to.not.have.lengthOf(0);\n        });\n    }\n    \n    function HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(location, objectUnderTest) {\n        pm.test(\"HasObjectUnderTestBeenDefinedForSettingTheRequestVariables (\" + location + \")\", function () {\n            pm.expect(objectUnderTest).to.be.a(\"string\");\n            pm.expect(objectUnderTest).to.not.have.lengthOf(0);\n        });\n    }\n    \n    function HasUriBeenDefinedForSettingTheRequestVariables(location, uri) {\n        pm.test(\"HasUriBeenDefinedForSettingTheRequestVariables (\" + location + \")\", function () {\n            pm.expect(uri).to.be.a(\"string\");\n            pm.expect(uri).to.not.have.lengthOf(0);\n        });\n    }\n}",
      "key": "SettingTheFcRequestVariables"
    },
    {
      "type": "any",
      "value": "() => {\n    // Required Input Parameters\n    try {\n        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");\n            \n        var controller = pm.environment.get(\"controller\");\n        var dummyUri = pm.environment.get(\"dummyUri\");\n        var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");\n            \n        var indexOfProfileUnderTest = pm.collectionVariables.get(\"indexOfProfileUnderTest\");\n        var pacUnderTest = pm.collectionVariables.get(\"pacUnderTest\");\n        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");\n        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");\n            \n        var classUnderTest = pm.variables.get(\"classUnderTest\");\n        var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");\n        var keysOfDatatypeInstanceUnderTest = pm.variables.get(\"keysOfDatatypeInstanceUnderTest\");\n        var filteredContent = pm.variables.get(\"filteredContent\");\n        var filteredDepth = pm.variables.get(\"filteredDepth\");\n        var filteredFields = pm.variables.get(\"filteredFields\");\n        CouldInputForSettingTheRequestVariablesBeLoaded(attributeUnderTest,\n                                                            controller, \n                                                            dummyUri,\n                                                            indexOfDeviceUnderTest, \n                                                            indexOfProfileUnderTest,\n                                                            pacUnderTest,\n                                                            moduleUnderTest,\n                                                            technologyUnderTest,\n                                                            classUnderTest,\n                                                            datatypeUnderTest,\n                                                            keysOfDatatypeInstanceUnderTest,\n                                                            filteredContent,\n                                                            filteredDepth,\n                                                            filteredFields\n                                                        );\n    } catch (error) {\n        CouldInputForSettingTheRequestVariablesBeLoaded();\n    }\n        \n    // Preparing the Request\n    try {\n        let nodeIds = controller.nodeList[indexOfDeviceUnderTest];\n        var idPair;\n        switch (technologyUnderTest) {\n            case \"co-channel-profile\":\n                idPair = nodeIds.coChannelProfileList[indexOfProfileUnderTest];\n                break;\n            case \"l3vpn-profile\":\n                idPair = nodeIds.l3vpnProfileList[indexOfProfileUnderTest];\n                break;\n            case \"qos-profile\":\n                idPair = nodeIds.qosProfileList[indexOfProfileUnderTest];\n                break;\n            case \"wred-profile\":\n                idPair = nodeIds.wredProfileList[indexOfProfileUnderTest];\n                break;\n        }\n        CouldIdPairForSettingTheRequestVariablesBeRetrieved(attributeUnderTest, idPair);\n    } catch (error) {\n        CouldIdPairForSettingTheRequestVariablesBeRetrieved(attributeUnderTest);\n    }\n        \n    try {\n        var objectUnderTest = \"/core-model-1-4:control-construct/profile-collection/profile=\" \n                                    + idPair.ltpUuid\n                                    + \"/\"\n                                    + pacUnderTest;\n        if ( (typeof technologyUnderTest!=\"undefined\") \n                && (technologyUnderTest!==\"\")\n                && (classUnderTest!==\"pac\") ) {\n            objectUnderTest = objectUnderTest\n                                    + \"/\"\n                                    + technologyUnderTest\n                                    + \"-\"\n                                    + classUnderTest;\n        }\n        if ( (typeof datatypeUnderTest!=\"undefined\") && (datatypeUnderTest !== \"\") ) {\n            objectUnderTest = objectUnderTest\n                                    + \"/\"\n                                    + datatypeUnderTest;\n        }\n        if ( (typeof keysOfDatatypeInstanceUnderTest[0].value!=\"undefined\") && (keysOfDatatypeInstanceUnderTest[0].value!==\"\") ) {\n            objectUnderTest = objectUnderTest\n                                    + \"=\"\n                                    + ReplaceColonsInside(keysOfDatatypeInstanceUnderTest[0].value);\n            for (let i=1; i<keysOfDatatypeInstanceUnderTest.length; i++) {\n                objectUnderTest = objectUnderTest\n                                    + \",\"\n                                    + ReplaceColonsInside(keysOfDatatypeInstanceUnderTest[i].value);\n            }\n        } \n        if ( (typeof attributeUnderTest!=\"undefined\") && (attributeUnderTest !== \"\") ) {\n            objectUnderTest = objectUnderTest\n                                    + \"/\"\n                                    + attributeUnderTest;\n        }    \n        let alreadySomeFilterAttached = false;\n        if ( (typeof filteredContent!=\"undefined\") \n                && (typeof filteredDepth!=\"undefined\") \n                && (typeof filteredFields!=\"undefined\") ) {\n            if (filteredContent !== \"\" || filteredDepth !== 0 || filteredFields !== \"\") {\n                objectUnderTest = objectUnderTest\n                                        + \"?\";\n            }\n            if (filteredContent !== \"\") {\n                objectUnderTest = objectUnderTest\n                                        + \"content=\"\n                                        + filteredContent;\n                alreadySomeFilterAttached = true;\n            }\n            if (filteredDepth !== 0) {\n                if (alreadySomeFilterAttached) {\n                     objectUnderTest = objectUnderTest\n                                        + \"&\";\n                }\n                objectUnderTest = objectUnderTest\n                                        + \"depth=\"\n                                        + filteredDepth;\n                alreadySomeFilterAttached = true;\n            }\n            if (filteredFields !== \"\") {\n                if (alreadySomeFilterAttached) {\n                     objectUnderTest = objectUnderTest\n                                        + \"&\";\n                }\n                objectUnderTest = objectUnderTest\n                                        + \"fields=\"\n                                        + filteredFields;\n                alreadySomeFilterAttached = true;\n            }\n        }\n        HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(attributeUnderTest, objectUnderTest);\n    } catch (error) {\n        HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(attributeUnderTest);\n    }\n        \n    try {\n        var uri = \"http://\" \n                    + controller.controllerAddress \n                    + controller.pathToDbAndMountPoint \n                    + \"/node=\" \n                    + controller.nodeList[indexOfDeviceUnderTest].nodeId \n                    + \"/yang-ext:mount\" \n                    + objectUnderTest;\n        HasUriBeenDefinedForSettingTheRequestVariables(attributeUnderTest, uri);\n    } catch (error) {\n        uri = dummyUri;\n        HasUriBeenDefinedForSettingTheRequestVariables(attributeUnderTest);\n    }\n        \n    pm.variables.set(\"uri\", uri);\n    pm.request.headers.upsert({key:\"Authorization\", value:controller.authorizationCode});\n    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});\n    pm.request.headers.upsert({key:\"Content-Type\", value:\"application/json\"});\n        \n    // Functions\n    function ReplaceColonsInside(keyAttributeValue) {\n        return encodeURIComponent(keyAttributeValue);\n    }\n\n    // Self Testing Functions\n    function CouldInputForSettingTheRequestVariablesBeLoaded(attributeUnderTest,\n                                                                controller, \n                                                                uri,\n                                                                indexOfDeviceUnderTest, \n                                                                indexOfProfileUnderTest,\n                                                                pacUnderTest,\n                                                                moduleUnderTest,\n                                                                technologyUnderTest,\n                                                                classUnderTest,\n                                                                datatypeUnderTest,\n                                                                keysOfDatatypeInstanceUnderTest,\n                                                                filteredContent,\n                                                                filteredDepth,\n                                                                filteredFields) {\n        pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {\n            pm.expect(attributeUnderTest).to.be.a(\"string\");\n        });\n        pm.test(\"CouldWRONGInputForSettingTheRequestVariablesBeLoaded (\" + attributeUnderTest + \")\", function () {\n            pm.expect(controller).to.be.an(\"object\");\n            pm.expect(uri).to.be.a(\"string\");\n            pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");\n            pm.expect(indexOfProfileUnderTest).to.be.a(\"number\");\n            pm.expect(pacUnderTest).to.be.a(\"string\");\n            pm.expect(pacUnderTest).to.not.have.lengthOf(0);\n            pm.expect(moduleUnderTest).to.be.a(\"string\");\n            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);\n            pm.expect(technologyUnderTest).to.be.a(\"string\");\n            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);\n            pm.expect(classUnderTest).to.be.a(\"string\");\n            pm.expect(classUnderTest).to.not.have.lengthOf(0);\n            pm.expect(datatypeUnderTest).to.be.a(\"string\");\n            pm.expect(keysOfDatatypeInstanceUnderTest).to.be.an(\"array\");\n            pm.expect(filteredContent).to.be.a(\"string\");\n            pm.expect(filteredDepth).to.be.a(\"number\");\n            pm.expect(filteredFields).to.be.a(\"string\");\n        });\n    }\n        \n    function CouldIdPairForSettingTheRequestVariablesBeRetrieved(location, idPair) {\n        pm.test(\"CouldIdPairForSettingTheRequestVariablesBeRetrieved (\" + location + \")\", function () {\n            pm.expect(idPair.ltpUuid).to.be.a(\"string\");\n            pm.expect(idPair.ltpUuid).to.not.have.lengthOf(0);\n            pm.expect(idPair.lpLid).to.be.an(\"string\");\n        });\n    }\n    \n    function HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(location, objectUnderTest) {\n        pm.test(\"HasObjectUnderTestBeenDefinedForSettingTheRequestVariables (\" + location + \")\", function () {\n            pm.expect(objectUnderTest).to.be.a(\"string\");\n            pm.expect(objectUnderTest).to.not.have.lengthOf(0);\n        });\n    }\n    \n    function HasUriBeenDefinedForSettingTheRequestVariables(location, uri) {\n        pm.test(\"HasUriBeenDefinedForSettingTheRequestVariables (\" + location + \")\", function () {\n            pm.expect(uri).to.be.a(\"string\");\n            pm.expect(uri).to.not.have.lengthOf(0);\n        });\n    }\n}",
      "key": "SettingTheProfileRequestVariables"
    },
    {
      "type": "any",
      "value": "() => {\n    // Required Input Parameters\n    try {\n        var validationErrorResults = pm.environment.get(\"validationErrorResults\");\n        var validationReport = pm.environment.get(\"validationReport\");\n        var controller = pm.environment.get(\"controller\");\n        var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");\n        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");\n        var classUnderTest = pm.variables.get(\"classUnderTest\");\n        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");\n        var requestBody = pm.variables.get(\"requestBod\");\n        var requestUri = pm.variables.get(\"requestUri\");\n        var responseCode = pm.variables.get(\"responseCode\");\n        var errorMessage = pm.variables.get(\"errorMessage\");\n        var errorDescription = pm.variables.get(\"errorDescription\");\n        var response = pm.variables.get(\"response\");\n        if (attributeUnderTest) {\n            var attributeUnderTest = pm.variables.get(\"NameOfAttributeUnderTest\");\n        }\n        CouldTheInputValuesBeLoaded(validationErrorResults, controller, indexOfDeviceUnderTest,\n                                    technologyUnderTest, classUnderTest, attributeUnderTest,\n                                    requestUri, responseCode, errorMessage, errorDescription,\n                                    requestBody, response\n                                   );\n    } catch (error) {\n        CouldTheInputValuesBeLoaded();\n    }\n\n    // Prepare DeviceUnderTest and objectUnderTest\n    try {\n        var nameOfTheDeviceUnderTest = controller.nodeList[indexOfDeviceUnderTest].nodeId;\n        var objectUnderTest = technologyUnderTest + \"-\" + classUnderTest;\n        CouldLocalVariablesBeRetrieved(nameOfTheDeviceUnderTest, objectUnderTest);\n    } catch (error) {\n        CouldLocalVariablesBeRetrieved();\n    }\n\n    //Prepare Error object\n    try {\n        if ((errorMessage.includes(\"Not configurable\")) ||\n            ((errorMessage.includes(\"Missing\") && (responseCode/100) === 2))) {\n                let errorObject = {\n                    objectUnderTest:        objectUnderTest,\n                    attributeUnderTest:     attributeUnderTest,\n                    nameOfTheDeviceUnderTest: nameOfTheDeviceUnderTest,\n                    responseCode:           responseCode,\n                    message:                errorMessage,\n                    description:            errorDescription,\n                    requestUri:             requestUri,\n                    requestBody:            requestBody,\n                    response:               response\n                };\n                validationErrorResults.push(errorObject);\n                CouldErrorResultBeUpdated(errorObject, validationErrorResults);\n                pm.environment.set(\"validationErrorResults\", validationErrorResults);\n\n                let testValidErrorResults = { \"Valid-ErrorResults\": validationErrorResults };\n                console.log(testValidErrorResults);\n        }\n    } catch (error) {\n        CouldErrorResultBeUpdated();\n    }\n\n    if ((errorMessage.includes(\"Not configurable\")) ||\n        ((errorMessage.includes(\"Missing\") && (responseCode/100) === 2))) {\n        var testResult = \"Fail\";\n    } else {\n        var testResult = \"Pass\";\n    }\n\n    //Prepare Validation Report\n    try {\n            let reportObject = {\n                objectUnderTest:          objectUnderTest,\n                attributeUnderTest:       attributeUnderTest,\n                nameOfTheDeviceUnderTest: nameOfTheDeviceUnderTest,\n                testResult:               testResult,\n                responseCode:             responseCode,\n                message:                  errorMessage,\n                description:              errorDescription,\n                requestUri:               requestUri\n            };\n            validationReport.push(reportObject);\n            console.log(reportObject);\n            let testValidationResults = { \"testValidationResults\": validationReport };\n            console.log(testValidationResults);\n            pm.environment.set(\"validationReport\", validationReport);\n            CouldErrorResultBeUpdated(reportObject, validationReport);\n    } catch (error) {\n        CouldErrorResultBeUpdated();\n    }\n\n    // Self Testing Functions\n    function CouldTheInputValuesBeLoaded(validationErrorResults, controller, indexOfDeviceUnderTest,\n                                            technologyUnderTest, classUnderTest, attributeUnderTest,\n                                            requestUri, responseCode, errorMessage, errorDescription,\n                                            requestBody, response\n                                        ) {\n        pm.test(\"CouldTheInputValuesBeLoaded\", function () {\n            pm.expect(validationErrorResults).to.be.an(\"array\");\n            pm.expect(controller).to.be.an(\"object\");\n            pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");\n            pm.expect(technologyUnderTest).to.be.a(\"string\");\n            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);\n            pm.expect(classUnderTest).to.be.a(\"string\");\n            pm.expect(classUnderTest).to.not.have.lengthOf(0);\n            pm.expect(attributeUnderTest).to.be.a(\"string\");\n            pm.expect(requestUri).to.be.a(\"string\");\n            pm.expect(requestUri).to.not.have.lengthOf(0);\n            pm.expect(responseCode).to.be.a(\"number\");\n            pm.expect(errorMessage).to.be.a(\"string\");\n            pm.expect(errorMessage).to.not.have.lengthOf(0);\n            pm.expect(errorDescription).to.be.a(\"string\");\n            pm.expect(errorDescription).to.not.have.lengthOf(0);\n            pm.expect(requestBody).to.be.a(\"string\");\n            pm.expect(response).to.be.an(\"object\");\n        });\n    }\n\n    function CouldLocalVariablesBeRetrieved(nameOfTheDeviceUnderTest, objectUnderTest) {\n        pm.test(\"CouldLocalVariablesBeRetrieved\", function () {\n            pm.expect(nameOfTheDeviceUnderTest).to.be.a(\"string\");\n            pm.expect(nameOfTheDeviceUnderTest).to.not.have.lengthOf(0);\n            pm.expect(objectUnderTest).to.be.a(\"string\");\n            pm.expect(objectUnderTest).to.not.have.lengthOf(0);\n        });\n    }\n\n    function CouldErrorResultBeUpdated(errorObject, validationErrorResults) {\n        pm.test(\"CouldErrorResultBeUpdated\", function () {\n            pm.expect(errorObject).to.be.an(\"object\");\n            pm.expect(validationErrorResults).to.be.an(\"array\");\n        });\n    }\n}",
      "key": "UpdateErrorResults"
    },
    {
      "type": "any",
      "value": "() => {\n    // Required Input Parameters\n    try {\n        var controller = pm.environment.get(\"controller\");\n        var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");\n            \n        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");\n            \n        var classUnderTest = pm.variables.get(\"classUnderTest\");\n        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");\n        var positiveOutcome = pm.variables.get(\"positiveOutcome\");\n        var negativeOutcome = pm.variables.get(\"negativeOutcome\");\n        var response = pm.variables.get(\"response\");\n        CouldInputForCommentingResponseBeLoaded(controller, indexOfDeviceUnderTest,\n                                                            technologyUnderTest,\n                                                            classUnderTest,\n                                                            attributeUnderTest,\n                                                            positiveOutcome,\n                                                            negativeOutcome,\n                                                            response\n                                                );\n    } catch (error) {\n        CouldInputForCommentingResponseBeLoaded();\n    }\n        \n    // Typing the comment\n    try {\n        let nameOfTheDeviceUnderTest = controller.nodeList[indexOfDeviceUnderTest].nodeId;\n        let objectUnderTest = technologyUnderTest + \"-\" + classUnderTest;\n        let responseCode = parseInt(response.code);\n        if (attributeUnderTest!==\"\") {\n            objectUnderTest = objectUnderTest\n                                + \"::\"\n                                + attributeUnderTest;\n        }\n        \n        if (Math.floor(responseCode/100) === 2) {\n            console.log(objectUnderTest + \" at \" + nameOfTheDeviceUnderTest + positiveOutcome);\n        } else {\n            console.log(\" ERROR: \" + objectUnderTest + \" at \" + nameOfTheDeviceUnderTest \n                                + negativeOutcome + \" Response Code: \" + pm.response.code);\n        }\n        CouldCommentBeComposedandPrinted(nameOfTheDeviceUnderTest, objectUnderTest);\n    } catch (error) {\n        CouldCommentBeComposedandPrinted();\n    }\n        \n    // Self Testing Functions\n    function CouldInputForCommentingResponseBeLoaded(controller, indexOfDeviceUnderTest,\n                                                            technologyUnderTest,\n                                                            classUnderTest,\n                                                            attributeUnderTest,\n                                                            positiveOutcome,\n                                                            negativeOutcome,\n                                                            response) {\n        pm.test(\"CouldEnvironmentForCommentingResponseBeLoaded\", function () {\n            pm.expect(controller).to.be.a(\"object\");\n        });\n        pm.test(\"CouldIndexOfDeviceForCommentingResponseBeLoaded\", function () {\n            pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");\n        });\n        pm.test(\"CouldTechnologyUnderTestForCommentingResponseBeLoaded\", function () {\n            pm.expect(technologyUnderTest).to.be.a(\"string\");\n            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldClassUnderTestForCommentingResponseBeLoaded\", function () {\n            pm.expect(classUnderTest).to.be.a(\"string\");\n            pm.expect(classUnderTest).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldAttributeUnderTestForCommentingResponseBeLoaded\", function () {\n            pm.expect(attributeUnderTest).to.be.a(\"string\");\n        });\n        pm.test(\"CouldPositiveOutcomeForCommentingResponseBeLoaded\", function () {\n            pm.expect(positiveOutcome).to.be.a(\"string\");\n            pm.expect(positiveOutcome).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldNegativeOutcomeForCommentingResponseBeLoaded\", function () {\n            pm.expect(negativeOutcome).to.be.a(\"string\");\n            pm.expect(negativeOutcome).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldResponseForCommentingResponseBeLoaded\", function () {\n            pm.expect(response).to.be.a(\"object\");\n        });\n    }\n    function CouldCommentBeComposedandPrinted(nameOfTheDeviceUnderTest, objectUnderTest) {\n        pm.test(\"CouldCommentBeComposedandPrinted\", function () {\n            pm.expect(nameOfTheDeviceUnderTest).to.be.a(\"string\");\n            pm.expect(nameOfTheDeviceUnderTest).to.not.have.lengthOf(0);\n            pm.expect(objectUnderTest).to.be.a(\"string\");\n            pm.expect(objectUnderTest).to.not.have.lengthOf(0);\n        });\n    }\n}",
      "key": "CommentingResponse"
    },
    {
      "type": "any",
      "value": "() => {\n    // Required Input Parameters\n    try {\n        var CommentingResponse = pm.environment.get(\"CommentingResponse\");\n        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");\n        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");\n        var classUnderTest = pm.variables.get(\"classUnderTest\");\n        var response = pm.variables.get(\"response\");\n        CouldInputForUploadingInterfaceInformationBeLoaded(moduleUnderTest, \n                                                                technologyUnderTest, \n                                                                CommentingResponse, \n                                                                classUnderTest,\n                                                                response\n                                                            );\n    } catch (error) {\n        CouldInputForUploadingInterfaceInformationBeLoaded();\n    }\n    \n    // Commenting the ResponseCode\n    pm.variables.set(\"positiveOutcome\", \" successfully uploaded.\");\n    pm.variables.set(\"negativeOutcome\", \" could not be retrieved.\");\n    try {\n        eval(CommentingResponse)();\n        CouldCommentingResponseBeSuccessfullyCalled(true);\n    } catch (error) {\n        CouldCommentingResponseBeSuccessfullyCalled(false);\n    }\n    \n    // Extracting Uploaded Information\n    try {\n        var objectWithoutHeadline;\n        if (response.code == 200) {\n            let objectInclHeadline;\n            objectInclHeadline = response.json();\n            objectWithoutHeadline = objectInclHeadline[moduleUnderTest \n                                                            + \":\" \n                                                            + technologyUnderTest \n                                                            + \"-\" \n                                                            + classUnderTest\n                                                        ];\n        } else {\n            objectWithoutHeadline = {};\n        }\n        CouldInformationObjectBeSuccessfullyExtracted(objectWithoutHeadline);\n    } catch (error) {\n        CouldInformationObjectBeSuccessfullyExtracted();\n    }\n    \n    // Provided Output Parameters\n    pm.collectionVariables.set(classUnderTest, objectWithoutHeadline);\n        \n    // Self Testing Functions\n    function CouldInputForUploadingInterfaceInformationBeLoaded(moduleUnderTest, \n                                                                technologyUnderTest, \n                                                                CommentingResponse, \n                                                                classUnderTest,\n                                                                response) {\n        pm.test(\"CouldModuleUnderTestForUploadingInterfaceInformationBeLoaded\", function () {\n            pm.expect(moduleUnderTest).to.be.a(\"string\");\n            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldTechnologyUnderTestForUploadingInterfaceInformationBeLoaded\", function () {\n            pm.expect(technologyUnderTest).to.be.a(\"string\");\n            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldCommentingResponseForUploadingInterfaceInformationBeLoaded\", function () {\n            pm.expect(CommentingResponse).to.be.a(\"string\");\n            pm.expect(CommentingResponse).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldClassUnderTestForUploadingInterfaceInformationBeLoaded\", function () {\n            pm.expect(classUnderTest).to.be.a(\"string\");\n            pm.expect(classUnderTest).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldResponseForUploadingInterfaceInformationBeLoaded\", function () {\n            pm.expect(response).to.be.a(\"object\");\n        });\n    }\n        \n    function CouldCommentingResponseBeSuccessfullyCalled(success) {\n        pm.test(\"CouldCommentingResponseBeSuccessfullyCalled\", function () {\n            pm.expect(success).to.be.true;\n        });\n    }\n    \n    function CouldInformationObjectBeSuccessfullyExtracted(objectWithoutHeadline) {\n        pm.test(\"CouldInformationObjectBeSuccessfullyExtracted\", function () {\n            pm.expect(objectWithoutHeadline).to.be.a(\"object\");\n        });\n    }    \n}",
      "key": "UploadingInterfaceInformation"
    },
    {
      "type": "any",
      "value": "() => {\n    // Required Input Parameters\n    try {\n        var schemaToBeShortened = pm.variables.get(\"schemaToBeShortened\");\n        var unRequiredAttribute = pm.variables.get(\"unRequiredAttribute\");\n        CouldInputForRemoveAttributeFromRequiredBeLoaded(schemaToBeShortened, unRequiredAttribute);\n    } catch (error) {\n        CouldInputForRemoveAttributeFromRequiredBeLoaded();\n    }\n        \n    // Removing the Attribute from Required\n    try {\n        unRequiredAttribute = '\"' + unRequiredAttribute + '\"';\n        let schemaString = JSON.stringify(schemaToBeShortened);\n        let indexOfStartOfSubStringToBeDeleted = schemaString.lastIndexOf(unRequiredAttribute);\n        let precedingSubString = schemaString.slice(0, indexOfStartOfSubStringToBeDeleted);\n        const COMMA = 1;\n        let indexOfEndOfSubStringToBeDeleted = indexOfStartOfSubStringToBeDeleted + unRequiredAttribute.length + COMMA;\n        let subsequentSubString = schemaString.slice(indexOfEndOfSubStringToBeDeleted);\n        schemaString = precedingSubString + subsequentSubString;\n        var shortenedSchema = JSON.parse(schemaString);\n        CouldTheAttributeBeRemovedFromRequired(shortenedSchema);\n    } catch (error) {\n        CouldTheAttributeBeRemovedFromRequired();\n    }    \n        \n    // Provided Output Parameters\n    pm.variables.set(\"shortenedSchema\", shortenedSchema);\n    \n    // Self Testing Functions\n    function CouldInputForRemoveAttributeFromRequiredBeLoaded(schemaToBeShortened, unRequiredAttribute) {\n        pm.test(\"CouldInputForRemoveAttributeFromRequiredBeLoaded\", function () {\n            pm.expect(schemaToBeShortened).to.be.a(\"object\");\n            pm.expect(unRequiredAttribute).to.be.a(\"string\");\n            pm.expect(unRequiredAttribute).to.not.have.lengthOf(0);\n        });\n    }\n    \n    function CouldTheAttributeBeRemovedFromRequired(shortenedSchema) {\n        pm.test(\"CouldTheAttributeBeRemovedFromRequired\", function () {\n            pm.expect(shortenedSchema).to.be.an(\"object\");\n        });\n    }    \n}",
      "key": "RemoveAttributeFromRequired"
    },
    {
      "type": "any",
      "value": "() => {\n    // Required Input Parameters\n    try {\n        var controller = pm.environment.get(\"controller\");\n        var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");\n        var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");\n        var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");\n        var UpdateErrorResults = pm.environment.get(\"UpdateErrorResults\");\n        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");\n        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");\n\n        var classUnderTest = pm.variables.get(\"classUnderTest\");\n        var reference = pm.variables.get(\"schema\");\n        var response = pm.variables.get(\"response\");\n        CouldInputForValidatingCompletenessBeLoaded(controller, mantisInterfaceStatus, \n                                                        indexOfDeviceUnderTest, \n                                                        moduleUnderTest, \n                                                        technologyUnderTest, \n                                                        PrintMantisIssuesForTechnologyAndClass, \n                                                        classUnderTest, \n                                                        reference,\n                                                        response);\n    } catch (error) {\n        CouldInputForValidatingCompletenessBeLoaded();\n    }\n\n    // Validating Completeness\n    try {\n        var nameOfTheDeviceUnderTest = controller.nodeList[indexOfDeviceUnderTest].nodeId;\n        var objectUnderTest = technologyUnderTest + \"-\" + classUnderTest;\n        CouldLocalVariablesBeRetrieved(nameOfTheDeviceUnderTest, objectUnderTest);\n    } catch (error) {\n        CouldLocalVariablesBeRetrieved();\n    }\n        \n    try {\n        if (response.code == 200) {\n\n            var objectInclHeadline = response.json();\n            var object;\n            if (classUnderTest===\"\") {\n                object = objectInclHeadline;\n            } else {\n                object = objectInclHeadline[moduleUnderTest + \":\" + technologyUnderTest + \"-\" + classUnderTest];\n            }               \n\n            console.log(objectUnderTest + \" at \" + nameOfTheDeviceUnderTest + \" could be retrieved:\");\n            console.log(object);\n            \n            console.log(objectUnderTest + \" Reference:\");               \n            console.log(reference);                                     \n            \n            console.log(objectUnderTest + \" at \" + nameOfTheDeviceUnderTest + \" Validation Result: \");\n\n            let testResult = tv4.validateMultiple(object, reference, true, true);\n\t\t\tconsole.log(testResult);\n\t\t\tvar errorMessage = \"\";\n            var errorDescription = \"\";\n            if (testResult.valid === false) {\n\t\t\t\tfor(let eIndex=0; eIndex < testResult.errors.length; eIndex++) {\n                    if( (eIndex+1) < testResult.errors.length) //Removing duplicate error messages\n                    {\n                        if(testResult.errors[eIndex].message === testResult.errors[eIndex+1].message) {\n                            continue;\n                        }\n                    }\n                    if(testResult.errors[eIndex].message.includes(\"Missing required property\")) {\n                        if(errorMessage == \"\") {\n                            errorMessage = testResult.errors[eIndex].message;\n                        } else {\n                            errorMessage = errorMessage+\",\"+testResult.errors[eIndex].message.replace(\"Missing required property:\", \"\");\n                        }\n                    }\n                    errorDescription = testResult.errors[eIndex].name;\n\t\t\t\t}\n            }\n            pm.variables.set(\"responseCode\", response.code);\n            pm.variables.set(\"response\", objectInclHeadline);\n            pm.variables.set(\"requestBod\", \"\");\n\n            pm.variables.set(\"errorMessage\", errorMessage);\n            pm.variables.set(\"errorDescription\", errorDescription);\n            eval(UpdateErrorResults)();\n            CouldValidationBeExecuted(true);\n        } else {\n            console.log(\" ERROR: \" + objectUnderTest + \" at \" + nameOfTheDeviceUnderTest \n                            + \" could not be retrieved. Response Code: \" + response.code);\n        }\n\n        CouldValidationBeExecuted(true);\n    } catch (error) {\n        CouldValidationBeExecuted(false);\n    }\n        \n    try {\n        if (mantisInterfaceStatus===\"read-only\") {\n            eval(PrintMantisIssuesForTechnologyAndClass)();\n            CouldMantisIssuesBeListed(true);\n        }\n    } catch (error) {\n        CouldMantisIssuesBeListed(false);\n    }\n\n    // Self Testing Functions\n    function CouldInputForValidatingCompletenessBeLoaded(controller, mantisInterfaceStatus, \n                                                            indexOfDeviceUnderTest, \n                                                            moduleUnderTest, \n                                                            technologyUnderTest, \n                                                            PrintMantisIssuesForTechnologyAndClass, \n                                                            classUnderTest, \n                                                            reference,\n                                                            response) {\n        pm.test(\"CouldControllerBeLoaded\", function () {\n            pm.expect(controller).to.be.an(\"object\");\n        });\n        pm.test(\"CouldMantisInterfaceStatusBeLoaded\", function () {\n            pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);\n        });\n        pm.test(\"CouldIndexOfDeviceUnderTestBeLoaded\", function () {            \n            pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");\n        });\n        pm.test(\"CouldModuleUnderTestBeLoaded\", function () {            \n            pm.expect(moduleUnderTest).to.be.a(\"string\");\n            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {\n            pm.expect(technologyUnderTest).to.be.a(\"string\");\n            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldPrintMantisIssuesForTechnologyAndClassBeLoaded\", function () {\n            pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");\n            pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldClassUnderTestBeLoaded\", function () {\n            pm.expect(classUnderTest).to.be.a(\"string\");\n        });\n        pm.test(\"CouldReferenceBeLoaded\", function () {\n            pm.expect(reference).to.be.a(\"object\");\n            pm.expect(response).to.be.a(\"object\");\n        });\n    }\n        \n    function CouldLocalVariablesBeRetrieved(nameOfTheDeviceUnderTest, objectUnderTest) {\n        pm.test(\"CouldLocalVariablesBeRetrieved\", function () {\n            pm.expect(nameOfTheDeviceUnderTest).to.be.a(\"string\");\n            pm.expect(nameOfTheDeviceUnderTest).to.not.have.lengthOf(0);\n            pm.expect(objectUnderTest).to.be.a(\"string\");\n            pm.expect(objectUnderTest).to.not.have.lengthOf(0);\n        });\n    }\n        \n    function CouldValidationBeExecuted(success) {\n        pm.test(\"CouldValidationBeExecuted\", function () {\n            pm.expect(success).to.be.true;\n        });\n    }\n        \n    function CouldMantisIssuesBeListed(success) {\n        pm.test(\"CouldMantisIssuesBeListed\", function () {\n            pm.expect(success).to.be.true;\n        });\n    }\n}",
      "key": "ValidatingCompleteness"
    },
    {
      "type": "any",
      "value": "{\n    // Required Input Parameters\n    try {\n        pm.variables.clear();\n            \n        var indexOfAttributeUnderTest =  pm.collectionVariables.get(\"indexOfAttributeUnderTest\");\n\n        var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");\n        var SettingTheFdRequestVariables = pm.environment.get(\"SettingTheFdRequestVariables\");\n        var SettingTheFcRequestVariables = pm.environment.get(\"SettingTheFcRequestVariables\");\n        var SettingTheProfileRequestVariables = pm.environment.get(\"SettingTheProfileRequestVariables\");\n            \n        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");\n        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");        \n        var capability = pm.collectionVariables.get(\"capability\");\n        var configuration = pm.collectionVariables.get(\"configuration\");\n        var status = pm.collectionVariables.get(\"status\");\n        var attributes = pm.collectionVariables.get(\"attributes\");\n            \n        CouldInputBeLoaded(indexOfAttributeUnderTest,\n                                SettingTheRequestVariables,\n                                SettingTheFdRequestVariables,\n                                SettingTheFcRequestVariables,\n                                SettingTheProfileRequestVariables,\n                                moduleUnderTest,\n                                technologyUnderTest,\n                                capability, \n                                configuration, \n                                status,\n                                attributes\n                           );\n    } catch (error) {\n        CouldInputBeLoaded(indexOfAttributeUnderTest);\n    }\n        \n    // CASE SPECIFIC Parameters\n    try {\n        eval(attributes[indexOfAttributeUnderTest].CreatingDummyValueAsaString);\n        CouldCreatingDummyValueBeExecuted(indexOfAttributeUnderTest, true);\n    } catch (error) {\n        CouldCreatingDummyValueBeExecuted(indexOfAttributeUnderTest, false);\n    }\n        \n    // Determining the Request Body\n    try {\n        var CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", \n                                                    // \"status\", \"current-problems\", \"current-performance\" \n                                                    // or \"historical-performances\"\n            \n        var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"\n        var FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;\n        var FILTERED_FIELDS = \"\";\n        var requestBody = '{ \"'\n                            + moduleUnderTest\n                            + ':'\n                            + ATTRIBUTE_UNDER_TEST\n                            + '\": ';\n        if (typeof dummyValue === \"string\") {\n            requestBody = requestBody\n                            + '\"'\n                            + dummyValue\n                            + '\" }';\n        } else {\n            requestBody = requestBody\n                            + dummyValue\n                            + ' }'; \n        }\n        AreValuesOfInputParametersCorrect(ATTRIBUTE_UNDER_TEST, \n                                            CLASS_UNDER_TEST, \n                                            DATATYPE_UNDER_TEST, \n                                            KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST,\n                                            CONTENT_TYPE, \n                                            FILTER_DEPTH, \n                                            FILTERED_FIELDS, \n                                            requestBody\n                                          );\n    } catch (error) {\n        AreValuesOfInputParametersCorrect(ATTRIBUTE_UNDER_TEST);\n    }\n        \n    // Setting Local Variables and Calling for Preparation of the Request\n    pm.variables.clear();\n        \n    let dummyValueString = JSON.stringify(dummyValue);\n    console.log(\"DummyValue: \" + dummyValueString);\n        \n    pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);\n    pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);\n    pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);\n    pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);\n    pm.variables.set(\"filteredContent\", CONTENT_TYPE);\n    pm.variables.set(\"filteredDepth\", FILTER_DEPTH);\n    pm.variables.set(\"filteredFields\", FILTERED_FIELDS);\n    pm.variables.set(\"requestBody\", requestBody);\n    pm.variables.set(\"dummyValueString\", dummyValueString);\n        \n    try {\n        switch (ObjectTypeOf(technologyUnderTest)) {\n            case \"interface\":\n            case \"container\":\n            case \"structure\":\n                eval(SettingTheRequestVariables)();\n                break;\n            case \"fd\":\n                eval(SettingTheFdRequestVariables)();\n                break;\n            case \"fc\":\n                eval(SettingTheFcRequestVariables)();\n                break;\n            case \"profile\":\n                eval(SettingTheProfileRequestVariables)();\n                break;\n        }\n        CouldFunctionForSettingTheRequestVariablesBeCalled(ATTRIBUTE_UNDER_TEST, true);\n    } catch (error) {\n        CouldFunctionForSettingTheRequestVariablesBeCalled(ATTRIBUTE_UNDER_TEST, false);\n    }\n\n    pm.variables.set(\"requestBod\", requestBody);\n    pm.variables.set(\"requestUri\", pm.variables.get(\"uri\"));\n    CouldTheDataBeStored();\n\n    // Functions\n    function ObjectTypeOf(technologyUnderTest) {\n        let indexOfLastMinus = technologyUnderTest.lastIndexOf(\"-\");\n        return technologyUnderTest.slice(indexOfLastMinus+1);\n    }\n\n    //Self Testing Functions\n    function CouldInputBeLoaded(indexOfAttributeUnderTest,\n                                    SettingTheRequestVariables,\n                                    SettingTheFdRequestVariables,\n                                    SettingTheFcRequestVariables,\n                                    SettingTheProfileRequestVariables,\n                                    moduleUnderTest,\n                                    technologyUnderTest,\n                                    capability,\n                                    configuration,\n                                    status,\n                                    attributes) {\n        pm.test(\"CouldIndexOfAttributeUnderTestBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {\n            pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");\n        });   \n        pm.test(\"CouldSettingTheRequestVariablesBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {\n            pm.expect(SettingTheRequestVariables).to.be.a(\"string\");\n            pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldSettingTheFdRequestVariablesBeLoaded(\" + indexOfAttributeUnderTest + \")\", function () {\n            pm.expect(SettingTheFdRequestVariables).to.be.a(\"string\");\n            pm.expect(SettingTheFdRequestVariables).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldSettingFcTheRequestVariablesBeLoaded(\" + indexOfAttributeUnderTest + \")\", function () {\n            pm.expect(SettingTheFcRequestVariables).to.be.a(\"string\");\n            pm.expect(SettingTheFcRequestVariables).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldSettingTheProfileRequestVariablesBeLoaded\", function () {\n            pm.expect(SettingTheProfileRequestVariables).to.be.a(\"string\");\n            pm.expect(SettingTheProfileRequestVariables).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldModuleUnderTestBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {\n            pm.expect(moduleUnderTest).to.be.a(\"string\");\n            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {\n            pm.expect(technologyUnderTest).to.be.a(\"string\");\n        });\n        pm.test(\"CouldCapabilityBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {\n            pm.expect(capability).to.be.an(\"object\");\n        });\n        pm.test(\"CouldConfigurationBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {\n            pm.expect(configuration).to.be.an(\"object\");\n        });\n        pm.test(\"CouldStatusBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {\n            pm.expect(status).to.be.an(\"object\");\n        });\n        pm.test(\"CouldAttributesBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {\n            pm.expect(attributes).to.be.an(\"array\");\n        });        \n    }\n        \n    function CouldCreatingDummyValueBeExecuted(location, success) {\n        pm.test(\"CouldCreatingDummyValueBeExecuted (\" + location + \")\", function () {\n            pm.expect(success).to.be.true;\n        });\n    }\n        \n    function AreValuesOfInputParametersCorrect(attributeUnderTest, \n                                                classUnderTest, \n                                                datatypeUnderTest, \n                                                keysOfDatatypeInstanceUnderTest, \n                                                contentType, \n                                                filteredDepth, \n                                                filteredFields, \n                                                requestBody) {\n        pm.test(\"IsValueOfAttributeUnderTestCorrect (\" + attributeUnderTest + \")\", function() {\n            pm.expect(attributeUnderTest).to.be.a(\"string\");\n            pm.expect(attributeUnderTest).to.not.have.lengthOf(0);\n        });\n        pm.test(\"IsValueOfClassUnderTestCorrect (\" + attributeUnderTest + \")\", function() {\n            pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",\n                                                    \"current-problems\", \"current-performance\",\n                                                    \"historical-performances\"]);\n        });\n        pm.test(\"IsValueOfDatatypeUnderTestCorrect (\" + attributeUnderTest + \")\", function() {\n            pm.expect(datatypeUnderTest).to.be.a(\"string\");\n        });\n        pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect (\" + attributeUnderTest + \")\", function() {\n            pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");\n        });\n        pm.test(\"IsValueOfContentTypeCorrect (\" + attributeUnderTest + \")\", function() {\n            pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);\n        });\n        pm.test(\"IsValueOfFilteredDepthCorrect (\" + attributeUnderTest + \")\", function() {\n            pm.expect(filteredDepth).to.be.a(\"number\");\n        });\n        pm.test(\"IsValueOfFilteredFieldsCorrect (\" + attributeUnderTest + \")\", function() {\n            pm.expect(filteredFields).to.be.a(\"string\");\n        });\n        pm.test(\"IsValueOfRequestBodyCorrect (\" + attributeUnderTest + \")\", function() {\n            pm.expect(requestBody).to.be.a(\"string\");\n            pm.expect(requestBody).to.not.have.lengthOf(0);\n        });\n    }\n        \n    function CouldFunctionForSettingTheRequestVariablesBeCalled(location, success) {\n        pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled (\" + location + \")\", function () {\n            pm.expect(success).to.be.true;\n        });\n    }\n\n    function CouldTheDataBeStored() {\n        pm.test(\"CouldTheDataBeStored\", function () {\n            pm.expect(pm.variables.get(\"requestBody\")).to.be.a(\"string\");\n            pm.expect(pm.variables.get(\"requestBody\")).to.not.have.lengthOf(0);\n            pm.expect(pm.variables.get(\"requestUri\")).to.be.a(\"string\");\n            pm.expect(pm.variables.get(\"requestUri\")).to.not.have.lengthOf(0);\n        });\n    }\n}",
      "key": "PreRequestOfWritingAsaString"
    },
    {
      "type": "any",
      "value": "{\n    // Required Input Parameters\n    try {\n        var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");\n        var SettingTheFdRequestVariables = pm.environment.get(\"SettingTheFdRequestVariables\");\n        var SettingTheFcRequestVariables = pm.environment.get(\"SettingTheFcRequestVariables\");\n        var SettingTheProfileRequestVariables = pm.environment.get(\"SettingTheProfileRequestVariables\");\n\n        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\"); \n\n        CouldInputBeLoaded(SettingTheRequestVariables, SettingTheFdRequestVariables,\n                                SettingTheFcRequestVariables,\n                                SettingTheProfileRequestVariables,\n                                technologyUnderTest\n                            );\n    } catch (error) {\n        CouldInputBeLoaded();\n    }\n        \n    // Setting Local Variables and Calling for Preparation of the Request\n    const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"\n    const REQUEST_BODY = \"\";\n        \n    AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);\n        \n    pm.variables.set(\"filteredContent\", CONTENT_TYPE);\n    pm.variables.set(\"requestBody\", REQUEST_BODY);\n        \n    try {\n        switch (ObjectTypeOf(technologyUnderTest)) {\n            case \"interface\":\n            case \"container\":\n            case \"structure\":\n                eval(SettingTheRequestVariables)();\n                break;\n            case \"fd\":\n                eval(SettingTheFdRequestVariables)();\n                break;\n            case \"fc\":\n                eval(SettingTheFcRequestVariables)();\n                break;\n            case \"profile\":\n                eval(SettingTheProfileRequestVariables)();\n                break;\n        }\n\n        CouldFunctionForSettingTheRequestVariablesBeCalled(true);\n    } catch (error) {\n        CouldFunctionForSettingTheRequestVariablesBeCalled(false);\n    }\n   \n    // Functions\n    function ObjectTypeOf(technologyUnderTest) {\n        let indexOfLastMinus = technologyUnderTest.lastIndexOf(\"-\");\n        return technologyUnderTest.slice(indexOfLastMinus+1);\n    }\n\n    // Self Testing Functions\n    function CouldInputBeLoaded(SettingTheRequestVariables, SettingTheFdRequestVariables,\n                                SettingTheFcRequestVariables,\n                                SettingTheProfileRequestVariables,\n                                technologyUnderTest) {\n        pm.test(\"CouldInputBeLoaded\", function () {\n            pm.expect(SettingTheRequestVariables).to.be.a(\"string\");\n            pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldInputBeLoaded\", function () {\n            pm.expect(SettingTheFdRequestVariables).to.be.a(\"string\");\n            pm.expect(SettingTheFdRequestVariables).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldInputBeLoaded\", function () {\n            pm.expect(SettingTheFcRequestVariables).to.be.a(\"string\");\n            pm.expect(SettingTheFcRequestVariables).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldInputBeLoaded\", function () {\n            pm.expect(SettingTheProfileRequestVariables).to.be.a(\"string\");\n            pm.expect(SettingTheProfileRequestVariables).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {\n            pm.expect(technologyUnderTest).to.be.a(\"string\");\n        });\n    }\n        \n    function AreValuesOfInputParametersCorrect(contentType, requestBody) {\n        pm.test(\"IsValueOfContentTypeCorrect\", function() {\n            pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);\n        });\n        pm.test(\"IsValueOfRequestBodyCorrect\", function() {\n            pm.expect(requestBody).to.be.a(\"string\");\n        });\n    }\n        \n    function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {\n        pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {\n            pm.expect(success).to.be.true;\n        });\n    }\n}",
      "key": "PreRequestOfReadingAsaString"
    },
    {
      "type": "any",
      "value": "{\n    // Required Input Parameters\n    try {\n        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");\n        \n        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");\n        var capability = pm.collectionVariables.get(\"capability\");\n        var configuration = pm.collectionVariables.get(\"configuration\");        \n        var attributes = pm.collectionVariables.get(\"attributes\");\n        var indexOfAttributeUnderTest =  pm.collectionVariables.get(\"indexOfAttributeUnderTest\");\n        \n        CouldInputForGetResultValueBeLoaded(attributeUnderTest, moduleUnderTest,\n                                                capability,\n                                                configuration,\n                                                attributes,\n                                                indexOfAttributeUnderTest\n        );\n    } catch (error) {\n        CouldInputForGetResultValueBeLoaded();\n    }\n        \n    // Retrieving ResultValue\n    try {\n        let response = pm.response;\n            \n        var responseCode = parseInt(response.code);\n            \n        let responseBody = JSON.parse(response.stream);\n        let completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;\n        let responseValue = responseBody[completeAttributeName];\n\n        var responseValueString;\n        eval(attributes[indexOfAttributeUnderTest].EvaluatingFeatureSupportAsaString); \n        // ->capabilitiesAreIndicatingThatFeatureNotSupported\n        if ( (capabilitiesAreIndicatingThatFeatureNotSupported) && (Math.floor(responseCode/100) === 4) ) {\n            responseValueString = \"-1\";\n        } else {\n            responseValueString = JSON.stringify(responseValue);\n        }\n        console.log(\"ResultValue: \" + responseValueString);\n            \n        CouldResponseBeRetrieved(attributeUnderTest, responseValueString, responseCode);\n    } catch (error) {\n        CouldResponseBeRetrieved(attributeUnderTest, responseValueString, responseCode);\n    }\n        \n    // Setting Local Variables\n    pm.variables.set(\"resultValueString\", responseValueString);\n    pm.variables.set(\"resultCode\", responseCode);\n        \n    // Self Testing Functions\n    function CouldInputForGetResultValueBeLoaded(attributeUnderTest, moduleUnderTest,\n                                                capability,\n                                                configuration,\n                                                attributes,\n                                                indexOfAttributeUnderTest) {\n        pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {\n            pm.expect(attributeUnderTest).to.be.a(\"string\");\n            pm.expect(attributeUnderTest).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldModuleUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {\n            pm.expect(moduleUnderTest).to.be.a(\"string\");\n            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldTheCapabilityBeLoaded (\" + attributeUnderTest+ \")\", function () {\n            pm.expect(capability).to.be.an(\"object\");\n        });\n        pm.test(\"CouldConfigurationBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {\n            pm.expect(configuration).to.be.an(\"object\");\n        });\n        pm.test(\"CouldAttributesBeLoaded (\" + attributeUnderTest+ \")\", function () {\n            pm.expect(attributes).to.be.an(\"array\");\n        });\n        pm.test(\"CouldIndexOfAttributeUnderTestBeLoaded (\" + attributeUnderTest+ \")\", function () {\n            pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");\n        });\n    }\n        \n    function CouldResponseBeRetrieved(location, responseValueString, responseCode) {\n        pm.test(\"CouldResponseValueStringBeRetrieved (\" + location + \")\", function () {\n            pm.expect(responseValueString).to.be.a(\"string\");\n            pm.expect(responseValueString).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldResponseCodeBeRetrieved (\" + location + \")\", function () {\n            pm.expect(responseCode).to.be.a(\"number\");\n        });\n    }   \n}",
      "key": "PostRequestOfReadingAsaString"
    },
    {
      "type": "any",
      "value": "{\n    // Required Input Parameters\n    try {\n        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");\n            \n        var dummyUri = pm.environment.get(\"dummyUri\");\n        var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");\n        var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");\n            \n        var responseCodeForConfigurationError = pm.environment.get(\"responseCodeForConfigurationError\");\n        var errorMessageForNotSupported = pm.environment.get(\"errorMessageForNotSupported\");\n        var errorMessageForOutOfRange = pm.environment.get(\"errorMessageForOutOfRange\");\n        var errorMessageForAgainstExisting = pm.environment.get(\"errorMessageForAgainstExisting\");\n        var errorMessageForInconsistent = pm.environment.get(\"errorMessageForInconsistent\");\n        var UpdateErrorResults = pm.environment.get(\"UpdateErrorResults\");\n        \n        var capability = pm.collectionVariables.get(\"capability\");\n        var configuration = pm.collectionVariables.get(\"configuration\");\n        var status = pm.collectionVariables.get(\"status\");\n        var attributes = pm.collectionVariables.get(\"attributes\");\n        var indexOfAttributeUnderTest =  pm.collectionVariables.get(\"indexOfAttributeUnderTest\");\n        var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");\n            \n        var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");\n        var keysOfDatatypeInstanceUnderTest = pm.variables.get(\"keysOfDatatypeInstanceUnderTest\");\n            \n        var dummyValueString = pm.variables.get(\"dummyValueString\");\n        var dummyCode = pm.variables.get(\"dummyCode\");\n        var dummyErrorMessage = pm.variables.get(\"dummyErrorMessage\"); \n        var resultValueString = pm.variables.get(\"resultValueString\");\n        var resultCode = pm.variables.get(\"resultCode\");\n            \n        if ( (datatypeUnderTest===undefined) || (datatypeUnderTest===\"\") ) {\n            var NameOfAttributeUnderTest = attributeUnderTest;\n        } else {\n            var NameOfAttributeUnderTest = datatypeUnderTest + \"/\" + attributeUnderTest;\n        }\n    } catch (error) { }\n    CouldTheInputBeLoaded(attributeUnderTest,\n                            dummyUri, \n                            mantisInterfaceStatus, \n                            PrintMantisIssuesForTechnologyAndClass,\n                            responseCodeForConfigurationError,\n                            errorMessageForNotSupported,\n                            errorMessageForOutOfRange,\n                            errorMessageForAgainstExisting,\n                            errorMessageForInconsistent,\n                            capability,\n                            configuration,\n                            status,\n                            attributes,\n                            indexOfAttributeUnderTest,\n                            configurationValidationResults,\n                            datatypeUnderTest,\n                            keysOfDatatypeInstanceUnderTest,\n                            dummyValueString,\n                            dummyCode,\n                            dummyErrorMessage,\n                            resultValueString,\n                            resultCode,\n                            NameOfAttributeUnderTest\n                         );\n\n    // CASE SPECIFIC Parameters\n    try {\n        eval(attributes[indexOfAttributeUnderTest].EvaluatingFeatureSupportAsaString); \n        // ->capabilitiesAreIndicatingThatFeatureNotSupported\n\n        var defaultValueString = \"\";\n        try {\n            defaultValueString \n                = JSON.stringify(attributes[indexOfAttributeUnderTest].defaultValueForStandardEvaluation);\n        } catch (error) { }\n\n        var aCaseSpecificEvaluationHasBeenDefined;\n        if ( attributes[indexOfAttributeUnderTest].EvaluatingResultAsaString === \"{}\" ) {\n            aCaseSpecificEvaluationHasBeenDefined = false;\n        } else {\n            aCaseSpecificEvaluationHasBeenDefined = true;\n        }\n        if ( aCaseSpecificEvaluationHasBeenDefined === true ) {\n            eval(attributes[indexOfAttributeUnderTest].EvaluatingResultAsaString);\n\n        } else {\n\n            if ( Math.floor(resultCode/100) === 2 ) {\n                if ( (Math.floor(dummyCode/100)===2) && (resultValueString===dummyValueString) ) {\n                    configurationValidationResults[NameOfAttributeUnderTest] = \"OK\";\n\n                } else if ( dummyCode === responseCodeForConfigurationError ) {\n                    let onfErrorMessage = DistillingOnfErrorMessageFrom(dummyErrorMessage);\n                    console.log(\"ONF message for not supported feature received:\");\n                    console.log(onfErrorMessage===errorMessageForNotSupported);\n                    console.log(\"Capabilities etc. indicate missing support:\");\n                    console.log(capabilitiesAreIndicatingThatFeatureNotSupported===true);\n                    console.log(\"Configuration attribute is representing the default value:\");\n                    console.log(resultValueString===defaultValueString);\n                    if ( (onfErrorMessage===errorMessageForNotSupported)\n                            && (capabilitiesAreIndicatingThatFeatureNotSupported===true)\n                            && (resultValueString===defaultValueString) ) {\n                        configurationValidationResults[NameOfAttributeUnderTest] = \"OK (not supported by hardware)\";\n                        \n                    } else if ( onfErrorMessage === errorMessageForOutOfRange ) {\n                        configurationValidationResults[NameOfAttributeUnderTest] = \"dummyValue out of hardware range\";\n                        \n                    } else if ( onfErrorMessage === errorMessageForAgainstExisting ) {\n                        configurationValidationResults[NameOfAttributeUnderTest] = \"dummyValue contradicts existing configuration\";\n                        \n                    } else if ( onfErrorMessage === errorMessageForInconsistent ) {\n                        configurationValidationResults[NameOfAttributeUnderTest] = \"dummyValue is inconsistent\";\n                        \n                    } else {\n                        configurationValidationResults[NameOfAttributeUnderTest] = \"Not configurable on application layer\";\n                    }\n                    \n                } else {\n                    configurationValidationResults[NameOfAttributeUnderTest] = \"Not configurable on server layer\";\n                }\n                \n            } else {\n                if ( capabilitiesAreIndicatingThatFeatureNotSupported===true ) {\n                    configurationValidationResults[NameOfAttributeUnderTest] = \"OK (not existing, because not supported)\";\n                } else {\n                    configurationValidationResults[NameOfAttributeUnderTest] = \"Not existing\";\n                }\n            }\n        }\n           \n        CouldResultEvaluationBeExecuted(attributeUnderTest, \n                                            resultCode, \n                                            dummyCode, \n                                            resultValueString, \n                                            dummyValueString,\n                                            dummyErrorMessage,\n                                            defaultValueString, \n                                            configurationValidationResults[NameOfAttributeUnderTest]\n                                        );\n    } catch (error) {\n        CouldResultEvaluationBeExecuted(attributeUnderTest);\n    }    \n\n    try {\n        //Storing data for Mantis purpose\n        pm.variables.set(\"NameOfAttributeUnderTest\", NameOfAttributeUnderTest);\n        pm.variables.set(\"responseCode\", dummyCode);\n        pm.variables.set(\"response\", dummyErrorMessage);\n        pm.variables.set(\"errorMessage\", configurationValidationResults[NameOfAttributeUnderTest]);\n        pm.variables.set(\"errorDescription\", \"Error in Configuration of \" + NameOfAttributeUnderTest);\n        eval(UpdateErrorResults)();\n        CouldUpdateErrorResultsBeSuccessfullyCalled(true);\n    } catch (error) {\n        CouldUpdateErrorResultsBeSuccessfullyCalled(false);\n    }\n    \n    // console.log\n    console.log(\"EvaluationResult: \" + configurationValidationResults[NameOfAttributeUnderTest]);\n        \n    try {\n        if (mantisInterfaceStatus===\"read-only\") {\n            eval(PrintMantisIssuesForTechnologyAndClass)();\n            CouldMantisIssuesBeListed(attributeUnderTest, true);\n        }\n    } catch (error) {\n        CouldMantisIssuesBeListed(attributeUnderTest, false);\n    }\n        \n    // Output provided to the Collection Variables\n    pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);\n        \n    // Setting up Local Variables and Preparing the Request\n    try {\n        pm.variables.set(\"uri\", dummyUri);\n        pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});\n        CouldTheRequestBePrepared(attributeUnderTest, true);\n    } catch (error) {\n        CouldTheRequestBePrepared(attributeUnderTest, false);\n    }\n    \n    // Functions\n    function DistillingOnfErrorMessageFrom(dummyErrorMessage) {\n        let indexOfStartTag = dummyErrorMessage.indexOf(\"#[onf:\");\n        let indexOfEndTag = dummyErrorMessage.indexOf(\"]#\");\n        return dummyErrorMessage.slice(indexOfStartTag, indexOfEndTag+2);\n    }\n        \n    // Self Testing Functions\n    function CouldTheInputBeLoaded(attributeUnderTest,\n                                        dummyUri, \n                                        mantisInterfaceStatus, \n                                        PrintMantisIssuesForTechnologyAndClass,\n                                        responseCodeForConfigurationError,\n                                        errorMessageForNotSupported,\n                                        errorMessageForOutOfRange,\n                                        errorMessageForAgainstExisting,\n                                        errorMessageForInconsistent,\n                                        capability,\n                                        configuration,\n                                        status,\n                                        attributes,\n                                        indexOfAttributeUnderTest,\n                                        configurationValidationResults,\n                                        datatypeUnderTest,\n                                        keysOfDatatypeInstanceUnderTest,\n                                        dummyValueString,\n                                        dummyCode,\n                                        dummyErrorMessage,\n                                        resultValueString,\n                                        resultCode,\n                                        NameOfAttributeUnderTest) {\n        pm.test(\"CouldTheAttributeUnderTestBeLoaded\", function () {\n            pm.expect(attributeUnderTest).to.be.a(\"string\");\n            pm.expect(attributeUnderTest).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldTheDummyUriBeLoaded (\" + attributeUnderTest+ \")\", function () {\n            pm.expect(dummyUri).to.be.a(\"string\");\n            pm.expect(dummyUri).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldTheMantisInterfaceStatusBeLoaded (\" + attributeUnderTest+ \")\", function () {\n            pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);\n        });\n        pm.test(\"CouldPrintMantisIssuesForTechnologyAndClassBeLoaded (\" + attributeUnderTest+ \")\", function () {\n            pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");\n            pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldTheresponseCodeForConfigurationErrorBeLoaded (\" + attributeUnderTest+ \")\", function () {\n            pm.expect(responseCodeForConfigurationError).to.be.a(\"number\");\n        });\n        pm.test(\"CouldTheErrorMessageForNotSupportedBeLoaded (\" + attributeUnderTest+ \")\", function () {\n            pm.expect(errorMessageForNotSupported).to.be.a(\"string\");\n        });\n        pm.test(\"CouldTheErrorMessageForOutOfRangeBeLoaded (\" + attributeUnderTest+ \")\", function () {\n            pm.expect(errorMessageForOutOfRange).to.be.a(\"string\");\n        });\n        pm.test(\"CouldTheErrorMessageForAgainstExistingBeLoaded (\" + attributeUnderTest+ \")\", function () {\n            pm.expect(errorMessageForAgainstExisting).to.be.a(\"string\");\n        });\n        pm.test(\"CouldTheErrorMessageForInconsistentBeLoaded (\" + attributeUnderTest+ \")\", function () {\n            pm.expect(errorMessageForInconsistent).to.be.a(\"string\");\n        });\n        pm.test(\"CouldTheCapabilityBeLoaded (\" + attributeUnderTest+ \")\", function () {\n            pm.expect(capability).to.be.an(\"object\");\n        });\n        pm.test(\"CouldTheConfigurationBeLoaded (\" + attributeUnderTest+ \")\", function () {\n            pm.expect(configuration).to.be.an(\"object\");\n        });\n        pm.test(\"CouldTheStatusBeLoaded (\" + attributeUnderTest+ \")\", function () {\n            pm.expect(status).to.be.an(\"object\");\n        });\n        pm.test(\"CouldAttributesBeLoaded (\" + attributeUnderTest+ \")\", function () {\n            pm.expect(attributes).to.be.an(\"array\");\n        }); \n        pm.test(\"CouldIndexOfAttributeUnderTestBeLoaded (\" + attributeUnderTest+ \")\", function () {\n            pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");\n        });    \n        pm.test(\"CouldTheConfigurationValidationResultsBeLoaded (\" + attributeUnderTest+ \")\", function () {\n            pm.expect(configurationValidationResults).to.be.an(\"object\");\n        });\n        pm.test(\"CouldTheDatatypeUnderTestBeLoaded (\" + attributeUnderTest+ \")\", function () {\n            pm.expect(datatypeUnderTest).to.be.a(\"string\");\n        });\n        pm.test(\"CouldTheKeysOfDatatypeInstanceUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {\n            pm.expect(keysOfDatatypeInstanceUnderTest).to.be.an(\"array\");\n        });\n        pm.test(\"CouldTheDummyValueStringBeLoaded (\" + attributeUnderTest + \")\", function () {\n            pm.expect(dummyValueString).to.be.a(\"string\");\n            pm.expect(dummyValueString).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldTheDummyCodeBeLoaded (\" + attributeUnderTest + \")\", function () {\n            pm.expect(dummyCode).to.be.a(\"number\");\n        });\n        pm.test(\"CouldTheDummyErrorMessageBeLoaded (\" + attributeUnderTest + \")\", function () {\n            pm.expect(dummyErrorMessage).to.be.a(\"string\");\n        });\n        pm.test(\"CouldTheResultValueStringBeLoaded (\" + attributeUnderTest + \")\", function () {\n            pm.expect(resultValueString).to.be.a(\"string\");\n            pm.expect(resultValueString).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldTheResultCodeBeLoaded (\" + attributeUnderTest + \")\", function () {\n            pm.expect(resultCode).to.be.a(\"number\");\n        });\n        pm.test(\"CouldTheNameOfAttributeUnderTestBeCombined (\" + attributeUnderTest+ \")\", function () {\n            pm.expect(NameOfAttributeUnderTest).to.be.a(\"string\");\n            pm.expect(NameOfAttributeUnderTest).to.not.have.lengthOf(0);\n        });\n    }\n        \n    function CouldResultEvaluationBeExecuted(location,\n                                                resultCode, \n                                                dummyCode, \n                                                resultValueString, \n                                                dummyValueString, \n                                                dummyErrorMessage,\n                                                defaultValueString, \n                                                configurationValidationResult\n                                            ) {\n        pm.test(\"WasResultCodeAvailable (\" + location + \")\", function () {\n            pm.expect(resultCode).to.be.a(\"number\");\n        });\n        pm.test(\"WasDummyCodeAvailable (\" + location + \")\", function () {\n            pm.expect(dummyCode).to.be.a(\"number\");\n        });\n        pm.test(\"WasResultValueStringAvailable (\" + location + \")\", function () {\n            pm.expect(resultValueString).to.be.a(\"string\");\n            pm.expect(resultValueString).to.not.have.lengthOf(0);\n        });\n        pm.test(\"WasDummyValueStringAvailable (\" + location + \")\", function () {\n            pm.expect(dummyValueString).to.be.a(\"string\");\n            pm.expect(dummyValueString).to.not.have.lengthOf(0);\n        });\n        pm.test(\"WasDummyErrorMessageAvailable (\" + location + \")\", function () {            \n            pm.expect(dummyErrorMessage).to.be.a(\"string\");\n        });\n        pm.test(\"WasDefaultValueStringAvailable (\" + location + \")\", function () {            \n            pm.expect(defaultValueString).to.be.a(\"string\");\n        });\n        pm.test(\"CouldConfigurationValidationResultBeCalculated (\" + location + \")\", function () {            \n            pm.expect(configurationValidationResult).to.be.a(\"string\");\n            pm.expect(configurationValidationResult).to.not.have.lengthOf(0);\n        });\n    }\n        \n    function CouldMantisIssuesBeListed(location, success) {\n        pm.test(\"CouldMantisIssuesBeListed (\" + location + \")\", function () {\n            pm.expect(success).to.be.true;\n        });\n    }\n        \n    function CouldTheRequestBePrepared(location, success) {\n        pm.test(\"CouldTheRequestBePrepared (\" + location + \")\", function () {\n            pm.expect(success).to.be.true;\n            pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");\n            pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);\n        });\n    }\n\n    function CouldUpdateErrorResultsBeSuccessfullyCalled(success) {\n        pm.test(\"CouldUpdateErrorResultsBeSuccessfullyCalled \", function () {\n            pm.expect(success).to.be.true;\n        });\n    }\n}",
      "key": "PreRequestOfEvaluatingAsaString"
    },
    {
      "type": "any",
      "value": "{\n    // Required Input Parameters\n    try {\n        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");\n            \n        var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");\n        var SettingTheFdRequestVariables = pm.environment.get(\"SettingTheFdRequestVariables\");\n        var SettingTheFcRequestVariables = pm.environment.get(\"SettingTheFcRequestVariables\");\n        var SettingTheProfileRequestVariables = pm.environment.get(\"SettingTheProfileRequestVariables\");\n\n        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");\n        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");\n        var configuration = pm.collectionVariables.get(\"configuration\");\n            \n        var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");\n        var keysOfDatatypeInstanceUnderTest = pm.variables.get(\"keysOfDatatypeInstanceUnderTest\");\n\n        CouldInputBeLoaded(attributeUnderTest,\n                                SettingTheRequestVariables,\n                                SettingTheFdRequestVariables,\n                                SettingTheFcRequestVariables,\n                                SettingTheProfileRequestVariables,\n                                moduleUnderTest,\n                                technologyUnderTest,\n                                configuration,\n                                datatypeUnderTest,\n                                keysOfDatatypeInstanceUnderTest\n                           );\n    } catch (error) {\n        CouldInputBeLoaded(attributeUnderTest);\n    }\n\n    // Determining the Request Body\n    try {\n        var originalValue;\n        if ( (typeof datatypeUnderTest==\"undefined\") || (datatypeUnderTest===\"\") ) {\n            originalValue = configuration[attributeUnderTest];\n        } else {\n            if ( JSON.stringify(keysOfDatatypeInstanceUnderTest[0]) === \"{}\" ) {\n                originalValue = configuration[datatypeUnderTest][attributeUnderTest];\n            } else {\n                let instanceIndexUnderTest;\n                instanceIndexUnderTest \n                    = InstanceIndexOf(keysOfDatatypeInstanceUnderTest[0], datatypeUnderTest, configuration);\n                originalValue = configuration[datatypeUnderTest][instanceIndexUnderTest][attributeUnderTest];\n            }\n        }\n            \n        var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"\n        var requestBody = '{ \"'\n                            + moduleUnderTest\n                            + ':'\n                            + attributeUnderTest\n                            + '\": ';\n        if (typeof originalValue === \"string\") {\n            requestBody = requestBody\n                            + '\"'\n                            + originalValue\n                            + '\" }';\n        } else {\n            requestBody = requestBody\n                            + originalValue\n                            + ' }'; \n        }\n        AreValuesOfTheRequestBodyCorrect(attributeUnderTest, originalValue, CONTENT_TYPE, requestBody);\n    } catch (error) {\n        AreValuesOfTheRequestBodyCorrect(attributeUnderTest);\n    }\n\n    // Setting Local Variables and Calling for Preparation of the Request\n    pm.variables.set(\"filteredContent\", CONTENT_TYPE);\n    pm.variables.set(\"requestBody\", requestBody);\n\n    try {\n        switch (ObjectTypeOf(technologyUnderTest)) {\n            case \"interface\":\n            case \"container\":\n            case \"structure\":\n                eval(SettingTheRequestVariables)();\n                break;\n            case \"fd\":\n                eval(SettingTheFdRequestVariables)();\n                break;\n            case \"fc\":\n                eval(SettingTheFcRequestVariables)();\n                break;\n            case \"profile\":\n                eval(SettingTheProfileRequestVariables)();\n                break;\n        }\n        CouldFunctionForSettingTheRequestVariablesBeCalled(attributeUnderTest, true);\n    } catch (error) {\n        CouldFunctionForSettingTheRequestVariablesBeCalled(attributeUnderTest, false);\n    }\n\n    // Functions\n    function InstanceIndexOf(keyValueOfInstanceUnderTest, datatypeUnderTest, configuration) {\n        for (let i=0; i<(configuration[datatypeUnderTest].length); i++) {\n            let sampleName = configuration[datatypeUnderTest][i][keyValueOfInstanceUnderTest.key];\n            if ( sampleName === keyValueOfInstanceUnderTest.value ) {\n                return i;\n            }\n        }\n    }\n    \n    function ObjectTypeOf(technologyUnderTest) {\n        let indexOfLastMinus = technologyUnderTest.lastIndexOf(\"-\");\n        return technologyUnderTest.slice(indexOfLastMinus+1);\n    }\n    \n    //Self Testing Functions\n    function CouldInputBeLoaded(attributeUnderTest,\n                                    SettingTheRequestVariables,\n                                    SettingTheFdRequestVariables,\n                                    SettingTheFcRequestVariables,\n                                    SettingTheProfileRequestVariables,\n                                    moduleUnderTest,\n                                    technologyUnderTest,\n                                    configuration, \n                                    datatypeUnderTest,\n                                    keysOfDatatypeInstanceUnderTest) {\n        pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {\n            pm.expect(attributeUnderTest).to.be.a(\"string\");\n            pm.expect(attributeUnderTest).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldSettingTheRequestVariablesBeLoaded (\" + attributeUnderTest + \")\", function () {\n            pm.expect(SettingTheRequestVariables).to.be.a(\"string\");\n            pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldSettingTheFdRequestVariablesBeLoaded(\" + attributeUnderTest + \")\", function () {\n            pm.expect(SettingTheFdRequestVariables).to.be.a(\"string\");\n            pm.expect(SettingTheFdRequestVariables).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldSettingFcTheRequestVariablesBeLoaded(\" + attributeUnderTest + \")\", function () {\n            pm.expect(SettingTheFcRequestVariables).to.be.a(\"string\");\n            pm.expect(SettingTheFcRequestVariables).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldSettingTheProfileRequestVariablesBeLoaded(\" + attributeUnderTest + \")\", function () {\n            pm.expect(SettingTheProfileRequestVariables).to.be.a(\"string\");\n            pm.expect(SettingTheProfileRequestVariables).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldModuleUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {\n            pm.expect(moduleUnderTest).to.be.a(\"string\");\n            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);\n        });\n        pm.test(\"CouldTechnologyUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {\n            pm.expect(technologyUnderTest).to.be.a(\"string\");\n        });\n        pm.test(\"CouldConfigurationBeLoaded (\" + attributeUnderTest + \")\", function () {\n            pm.expect(configuration).to.be.an(\"object\");\n        });\n        pm.test(\"CouldDatatypeUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {\n            pm.expect(datatypeUnderTest).to.be.a(\"string\");\n        });\n        pm.test(\"CouldKeysOfDatatypeInstanceUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {\n            pm.expect(keysOfDatatypeInstanceUnderTest[0]).to.be.an(\"object\");\n        });\n    }\n        \n    function AreValuesOfTheRequestBodyCorrect(location, originalValue, contentType, requestBody) {\n        pm.test(\"CouldTheOriginalValueBeRead (\" + location + \")\", function() {\n            pm.expect(originalValue).to.not.be.undefined;\n        });\n        pm.test(\"IsValueOfContentTypeCorrect (\" + location + \")\", function() {\n            pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);\n        });\n        pm.test(\"IsValueOfRequestBodyCorrect (\" + location + \")\", function() {\n            pm.expect(requestBody).to.be.a(\"string\");\n            pm.expect(requestBody).to.not.have.lengthOf(0);\n        });\n    }\n        \n    function CouldFunctionForSettingTheRequestVariablesBeCalled(location, success) {\n        pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled (\" + location + \")\", function () {\n            pm.expect(success).to.be.true;\n        });\n    }\n}",
      "key": "PreRequestOfRestoringAsaString"
    }
  ],
  "name": "environment",
  "_postman_variable_scope": "environment",
  "_postman_exported_at": "2021-06-17T12:33:45.873Z",
  "_postman_exported_using": "Newman/5.2.2"
}